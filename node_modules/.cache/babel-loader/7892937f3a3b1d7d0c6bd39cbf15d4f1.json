{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\"; // Constants\n\nconst GRID_ROW_LENGTH = 25;\nconst GRID_COL_LENGTH = 60;\nconst SIMULATION_SPEED = 50;\nvar timeouts = [];\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      startCancelPos: {},\n      endCancelPos: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false,\n      tutorialEnabled: false\n    };\n  }\n\n  componentDidMount() {\n    const startPos = {\n      row: 0,\n      col: 0\n    };\n    const endPos = {\n      row: GRID_ROW_LENGTH - 1,\n      col: GRID_COL_LENGTH - 1\n    };\n    const grid = this.createGrid(startPos, endPos);\n    this.setState({\n      grid\n    });\n  }\n\n  onTutorialEnabled() {\n    this.setState({\n      disableClicking: true\n    });\n  }\n\n  onTutorialDisabled() {\n    this.setState({\n      disableClicking: false\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const {\n      grid,\n      startNode,\n      endNode,\n      mouseHoldsStart,\n      mouseHoldsEnd,\n      disableClicking,\n      tutorialEnabled\n    } = this.state; // Alogrithm/tutorial in progress don't allow clicking\n\n    if (disableClicking || tutorialEnabled || mouseHoldsStart || mouseHoldsEnd) return; // Check to see if the mouse clicked on the start\n    // or end point\n\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true,\n        savedGrid: grid,\n        startCancelPos: {\n          row: row,\n          col: col\n        }\n      });\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true,\n        endCancelPos: {\n          row: row,\n          col: col\n        }\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // Check to see if the grid spot is already occupied\n    // if so cancel\n    // If the user releases the start or end on a grid\n    // set the start on that grid\n    const {\n      grid,\n      startCancelPos,\n      endCancelPos\n    } = this.state;\n    const currentNode = grid[row][col];\n\n    if (this.state.mouseHoldsStart) {\n      // Check to see if the grid spot is already occupied\n      // if so cancel\n      if (currentNode.isEndNode || currentNode.isObstacle) {\n        const newGrid = getNewGridWithNewStart(grid, startCancelPos.row, startCancelPos.col);\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid,\n          startNode: grid[startCancelPos.row][startCancelPos.col]\n        });\n        return;\n      }\n\n      this.setState({\n        startNode: currentNode\n      });\n    } else if (this.state.mouseHoldsEnd) {\n      if (currentNode.isStartNode || currentNode.isObstacle) {\n        const newGrid = getNewGridWithNewEnd(this.state.grid, endCancelPos.row, endCancelPos.col);\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid,\n          endNode: grid[endCancelPos.row][endCancelPos.col]\n        });\n        return;\n      }\n\n      this.setState({\n        endNode: currentNode\n      });\n    }\n\n    this.setState({\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      mouseIsPressed: false\n    });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n    const {\n      grid\n    } = this.state;\n\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n\n    if (this.state.mouseHoldsEnd) {\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n    const {\n      grid\n    } = this.state; // If we enter a new grid with the start held, generate a new start\n\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    } // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n        if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n        const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n        this.setState({\n          grid: newGrid\n        });\n      } // Toogle the obstacles\n      else {\n          if (grid[row][col].isStartNode || grid[row][col].isEndNode) return;\n          const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid\n          });\n        }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    const speed = SIMULATION_SPEED / (this.props.simulatorSpeed * 5);\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        timeouts.push(setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, speed * i));\n        return;\n      }\n\n      timeouts.push(setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, speed * i));\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      timeouts.push(setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, 40 * i));\n    }\n  }\n\n  cancelTimeouts() {\n    for (let i = 0; i < timeouts.length; i++) {\n      clearTimeout(timeouts[i]);\n    }\n\n    timeouts = [];\n  }\n\n  resetGridStyles(grid) {\n    this.setState({\n      cancelSearch: true\n    });\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = grid[row][col];\n\n        if (!node.isStartNode && !node.isEndNode) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node\";\n        }\n      }\n    }\n  }\n\n  createGrid(startPos, endPos) {\n    // Create a new grid which holds nodes\n    const grid = [];\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const newNode = createNewNode(row, col); // If the position is at the designated start\n        // or end, add the start and node to that cell\n\n        if (row == startPos.row && col == startPos.col) {\n          newNode.isStartNode = true;\n          this.setState({\n            startNode: newNode\n          });\n        }\n\n        if (row == endPos.row && col == endPos.col) {\n          newNode.isEndNode = true;\n          this.setState({\n            endNode: newNode\n          });\n        }\n\n        currentRow.push(newNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  randomizeObstacles() {\n    const {\n      startNode,\n      endNode\n    } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        if (startPos.row == row && startPos.col == col || endPos.row == row && endPos.col == col) {\n          continue;\n        }\n\n        var randomNum = Math.floor(Math.random() * 10 + 1);\n\n        if (randomNum <= 3) {\n          const node = newGrid[row][col];\n          node.isObstacle = true;\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-obstacle\";\n        }\n      }\n    }\n\n    this.setState({\n      grid: newGrid,\n      disableClicking: false\n    });\n  }\n\n  resetPath() {\n    const {\n      grid,\n      startNode,\n      endNode\n    } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = newGrid[row][col];\n        node.isObstacle = grid[row][col].isObstacle;\n\n        if (node.isObstacle) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-obstacle\";\n        }\n      }\n    }\n\n    this.setState({\n      grid: newGrid,\n      disableClicking: false\n    });\n  }\n\n  visualizeAlgorithm(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true,\n      cancelSearch: false\n    }); // Grab our values and call the animate function for visualization\n\n    const {\n      activeAlgorithm\n    } = this.props;\n    if (activeAlgorithm == \"A*\") visitedNodesInOrder = astar(grid, startNode, endNode);else if (activeAlgorithm == \"Dijkstra\") var visitedNodesInOrder = dijkstra(grid, startNode, endNode);else if (activeAlgorithm == \"GBF\") var visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);else if (activeAlgorithm == \"BFS\") var visitedNodesInOrder = bfs(grid, startNode, endNode);else if (activeAlgorithm == \"DFS\") var visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  resetObstacles() {\n    this.setState({\n      cancelSearch: true\n    });\n    const {\n      startNode,\n      endNode\n    } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n    const newStart = newGrid[startNode.row][startNode.col];\n    const newEnd = newGrid[endNode.row][endNode.col];\n    newStart.isStartNode = true;\n    newEnd.isEndNode = true;\n    this.setState({\n      startNode: newStart,\n      endNode: newEnd,\n      grid: newGrid,\n      disableClicking: false\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      startNode,\n      endNode,\n      disableClicking,\n      tutorialEnabled\n    } = this.state;\n    const simulatorClassName = disableClicking ? \"button-simulate-red\" : \"button-simulate\";\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-panel-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: simulatorClassName,\n      onClick: () => {\n        this.visualizeAlgorithm(grid, startNode, endNode);\n      },\n      disabled: disableClicking || tutorialEnabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 15\n      }\n    }, \"Simulate\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button-clear\",\n      onClick: () => {\n        this.cancelTimeouts();\n        this.resetGridStyles(grid);\n        this.resetPath();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 15\n      }\n    }, \"Reset Path\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button-reset\",\n      onClick: () => {\n        this.cancelTimeouts();\n        this.resetGridStyles(grid);\n        this.resetObstacles();\n      },\n      disabled: tutorialEnabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 15\n      }\n    }, \"Reset Obstacles\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button-randomize\",\n      onClick: () => {\n        this.cancelTimeouts();\n        this.resetGridStyles(grid);\n        this.randomizeObstacles();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 15\n      }\n    }, \"Randomize Obstacles\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          mouseIsPressed: mouseIsPressed,\n          onMouseOut: (row, col) => this.handleMouseOut(row, col),\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: (row, col) => this.handleMouseUp(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: false,\n    isEndNode: false,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStartNode: !node.isStartNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isEndNode: !node.isEndNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getResultPath = endNode => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return []; // Get the shortest path by backtracking\n  // each node\n\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","dijkstra","greedybestfirst","bfs","dfs","GRID_ROW_LENGTH","GRID_COL_LENGTH","SIMULATION_SPEED","timeouts","Display","constructor","props","state","grid","startNode","endNode","startCancelPos","endCancelPos","mouseIsPressed","mouseHoldsStart","mouseHoldsEnd","disableClicking","tutorialEnabled","componentDidMount","startPos","row","col","endPos","createGrid","setState","onTutorialEnabled","onTutorialDisabled","handleMouseDown","savedGrid","newGrid","getNewGridWithToggledObstacle","handleMouseUp","currentNode","isEndNode","isObstacle","getNewGridWithNewStart","isStartNode","getNewGridWithNewEnd","handleMouseOut","handleMouseEnter","animateNodeList","visitedNodesInOrder","shortestPathInOrder","speed","simulatorSpeed","i","length","push","setTimeout","animateShortestPath","node","document","getElementById","className","cancelTimeouts","clearTimeout","resetGridStyles","cancelSearch","currentRow","newNode","createNewNode","randomizeObstacles","randomNum","Math","floor","random","resetPath","visualizeAlgorithm","activeAlgorithm","getResultPath","resetObstacles","newStart","newEnd","render","simulatorClassName","map","rowId","nodeId","g","Infinity","h","isVisited","neighborNodes","parentNode","slice","scanningNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\n\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\";\n\n// Constants\nconst GRID_ROW_LENGTH = 25;\nconst GRID_COL_LENGTH = 60;\nconst SIMULATION_SPEED = 50;\nvar timeouts = [];\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      startCancelPos: {},\n      endCancelPos: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false,\n      tutorialEnabled: false,\n    };\n  }\n\n  componentDidMount() {\n    const startPos = {\n      row: 0,\n      col: 0,\n    };\n    const endPos = {\n      row: GRID_ROW_LENGTH - 1,\n      col: GRID_COL_LENGTH - 1,\n    };\n    const grid = this.createGrid(startPos, endPos);\n    this.setState({ grid });\n  }\n\n  onTutorialEnabled() {\n    this.setState({ disableClicking: true });\n  }\n\n  onTutorialDisabled() {\n    this.setState({ disableClicking: false });\n  }\n\n  handleMouseDown(row, col) {\n    const {\n      grid,\n      startNode,\n      endNode,\n      mouseHoldsStart,\n      mouseHoldsEnd,\n      disableClicking,\n      tutorialEnabled,\n    } = this.state;\n\n    // Alogrithm/tutorial in progress don't allow clicking\n    if (disableClicking || tutorialEnabled || mouseHoldsStart || mouseHoldsEnd)\n      return;\n    // Check to see if the mouse clicked on the start\n    // or end point\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true,\n        savedGrid: grid,\n        startCancelPos: { row: row, col: col },\n      });\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true,\n        endCancelPos: { row: row, col: col },\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // Check to see if the grid spot is already occupied\n    // if so cancel\n\n    // If the user releases the start or end on a grid\n    // set the start on that grid\n    const { grid, startCancelPos, endCancelPos } = this.state;\n    const currentNode = grid[row][col];\n\n    if (this.state.mouseHoldsStart) {\n      // Check to see if the grid spot is already occupied\n      // if so cancel\n      if (currentNode.isEndNode || currentNode.isObstacle) {\n        const newGrid = getNewGridWithNewStart(\n          grid,\n          startCancelPos.row,\n          startCancelPos.col\n        );\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid,\n          startNode: grid[startCancelPos.row][startCancelPos.col],\n        });\n        return;\n      }\n      this.setState({ startNode: currentNode });\n    } else if (this.state.mouseHoldsEnd) {\n      if (currentNode.isStartNode || currentNode.isObstacle) {\n        const newGrid = getNewGridWithNewEnd(\n          this.state.grid,\n          endCancelPos.row,\n          endCancelPos.col\n        );\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid,\n          endNode: grid[endCancelPos.row][endCancelPos.col],\n        });\n        return;\n      }\n      this.setState({ endNode: currentNode });\n    }\n\n    this.setState({\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      mouseIsPressed: false,\n    });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    const { grid } = this.state;\n\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    if (this.state.mouseHoldsEnd) {\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    const { grid } = this.state;\n\n    // If we enter a new grid with the start held, generate a new start\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // Toogle the obstacles\n    else {\n      if (grid[row][col].isStartNode || grid[row][col].isEndNode) return;\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    const speed = SIMULATION_SPEED / (this.props.simulatorSpeed * 5);\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        timeouts.push(\n          setTimeout(() => {\n            this.animateShortestPath(shortestPathInOrder);\n          }, speed * i)\n        );\n        return;\n      }\n      timeouts.push(\n        setTimeout(() => {\n          const node = visitedNodesInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-visited\";\n        }, speed * i)\n      );\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      timeouts.push(\n        setTimeout(() => {\n          const node = shortestPathInOrder[i];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-shortest-path\";\n        }, 40 * i)\n      );\n    }\n  }\n\n  cancelTimeouts() {\n    for (let i = 0; i < timeouts.length; i++) {\n      clearTimeout(timeouts[i]);\n    }\n    timeouts = [];\n  }\n\n  resetGridStyles(grid) {\n    this.setState({ cancelSearch: true });\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = grid[row][col];\n        if (!node.isStartNode && !node.isEndNode) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node\";\n        }\n      }\n    }\n  }\n\n  createGrid(startPos, endPos) {\n    // Create a new grid which holds nodes\n    const grid = [];\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      const currentRow = [];\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const newNode = createNewNode(row, col);\n        // If the position is at the designated start\n        // or end, add the start and node to that cell\n        if (row == startPos.row && col == startPos.col) {\n          newNode.isStartNode = true;\n          this.setState({ startNode: newNode });\n        }\n        if (row == endPos.row && col == endPos.col) {\n          newNode.isEndNode = true;\n          this.setState({ endNode: newNode });\n        }\n\n        currentRow.push(newNode);\n      }\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  randomizeObstacles() {\n    const { startNode, endNode } = this.state;\n\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col,\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col,\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        if (\n          (startPos.row == row && startPos.col == col) ||\n          (endPos.row == row && endPos.col == col)\n        ) {\n          continue;\n        }\n        var randomNum = Math.floor(Math.random() * 10 + 1);\n        if (randomNum <= 3) {\n          const node = newGrid[row][col];\n          node.isObstacle = true;\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-obstacle\";\n        }\n      }\n    }\n    this.setState({ grid: newGrid, disableClicking: false });\n  }\n\n  resetPath() {\n    const { grid, startNode, endNode } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col,\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col,\n    };\n\n    const newGrid = this.createGrid(startPos, endPos);\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = newGrid[row][col];\n        node.isObstacle = grid[row][col].isObstacle;\n        if (node.isObstacle) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-obstacle\";\n        }\n      }\n    }\n\n    this.setState({ grid: newGrid, disableClicking: false });\n  }\n\n  visualizeAlgorithm(grid, startNode, endNode) {\n    this.setState({ disableClicking: true, cancelSearch: false });\n    // Grab our values and call the animate function for visualization\n    const { activeAlgorithm } = this.props;\n\n    if (activeAlgorithm == \"A*\")\n      visitedNodesInOrder = astar(grid, startNode, endNode);\n    else if (activeAlgorithm == \"Dijkstra\")\n      var visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    else if (activeAlgorithm == \"GBF\")\n      var visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    else if (activeAlgorithm == \"BFS\")\n      var visitedNodesInOrder = bfs(grid, startNode, endNode);\n    else if (activeAlgorithm == \"DFS\")\n      var visitedNodesInOrder = dfs(grid, startNode, endNode);\n\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  resetObstacles() {\n    this.setState({ cancelSearch: true });\n    const { startNode, endNode } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col,\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col,\n    };\n\n    const newGrid = this.createGrid(startPos, endPos);\n    const newStart = newGrid[startNode.row][startNode.col];\n    const newEnd = newGrid[endNode.row][endNode.col];\n    newStart.isStartNode = true;\n    newEnd.isEndNode = true;\n    this.setState({\n      startNode: newStart,\n      endNode: newEnd,\n      grid: newGrid,\n      disableClicking: false,\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      startNode,\n      endNode,\n      disableClicking,\n      tutorialEnabled,\n    } = this.state;\n\n    const simulatorClassName = disableClicking\n      ? \"button-simulate-red\"\n      : \"button-simulate\";\n    return (\n      <>\n        <div className=\"button-panel-container\">\n          <div className=\"button-panel\">\n            <div className=\"button-group\">\n              <button\n                className={simulatorClassName}\n                onClick={() => {\n                  this.visualizeAlgorithm(grid, startNode, endNode);\n                }}\n                disabled={disableClicking || tutorialEnabled}\n              >\n                Simulate\n              </button>\n              <button\n                className=\"button-clear\"\n                onClick={() => {\n                  this.cancelTimeouts();\n                  this.resetGridStyles(grid);\n                  this.resetPath();\n                }}\n              >\n                Reset Path\n              </button>\n              <button\n                className=\"button-reset\"\n                onClick={() => {\n                  this.cancelTimeouts();\n                  this.resetGridStyles(grid);\n                  this.resetObstacles();\n                }}\n                disabled={tutorialEnabled}\n              >\n                Reset Obstacles\n              </button>\n              <button\n                className=\"button-randomize\"\n                onClick={() => {\n                  this.cancelTimeouts();\n                  this.resetGridStyles(grid);\n                  this.randomizeObstacles();\n                }}\n              >\n                Randomize Obstacles\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseOut={(row, col) => this.handleMouseOut(row, col)}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={(row, col) => this.handleMouseUp(row, col)}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: false,\n    isEndNode: false,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStartNode: !node.isStartNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isEndNode: !node.isEndNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getResultPath = (endNode) => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return [];\n\n  // Get the shortest path by backtracking\n  // each node\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};\n"]},"metadata":{},"sourceType":"module"}