{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutDataStructure/AboutQueue.js\";\nimport React, { Component } from \"react\";\nimport \"./AboutDataStructure.css\";\nexport default class AboutQueue extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tutorial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"The Queue\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"queue-image\",\n      src: require(\"./../../gifs/queue.gif\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"paragraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, \"The queue resembes that of the \\\"First come, first serve\\\" or a line of people waiting to purchase something.This allows us to keep the Last-In First-Out ordering and also makes removing and inserting from the stack very efficient (constant, since we only need to keep track of the top item). Here, push adds an item and pop removes an item. The peek method returns the current top item in the stack. In our case, the red items in the above image can be thought of each grid cell in the search. The stack can be seen in action with Depth-First-Search algorithm.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }), \" The code for the implemented stack can be found here:\\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://github.com/MilanFatschel/PathFinder_Algorithm_Visualization/blob/master/src/structures/stack.js\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, \"Stack\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"next\",\n      onClick: () => {\n        this.props.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, \"Close\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutDataStructure/AboutQueue.js"],"names":["React","Component","AboutQueue","constructor","props","state","render","require","close"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,0BAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAChDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,GAAG,EAAEC,OAAO,CAAC,wBAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAME;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ykBAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,6EAWE;AACE,MAAA,IAAI,EAAC,yGADP;AAEE,MAAA,MAAM,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAXF,CANF,eAwBE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKH,KAAL,CAAWI,KAAX;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAxBF,CADF;AAmCD;;AA1C+C","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./AboutDataStructure.css\";\n\nexport default class AboutQueue extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"tutorial\">\n        <h3 className=\"title\">The Queue</h3>\n        <img\n          className=\"queue-image\"\n          src={require(\"./../../gifs/queue.gif\")}\n        ></img>\n        <p className=\"paragraph\">\n          The queue resembes that of the \"First come, first serve\" or a line of\n          people waiting to purchase something.This allows us to keep the\n          Last-In First-Out ordering and also makes removing and inserting from\n          the stack very efficient (constant, since we only need to keep track\n          of the top item). Here, push adds an item and pop removes an item. The\n          peek method returns the current top item in the stack. In our case,\n          the red items in the above image can be thought of each grid cell in\n          the search. The stack can be seen in action with Depth-First-Search\n          algorithm.\n          <br /> The code for the implemented stack can be found here:&nbsp;\n          <a\n            href=\"https://github.com/MilanFatschel/PathFinder_Algorithm_Visualization/blob/master/src/structures/stack.js\"\n            target=\"_blank\"\n          >\n            Stack\n          </a>\n        </p>\n        <button\n          className=\"next\"\n          onClick={() => {\n            this.props.close();\n          }}\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}