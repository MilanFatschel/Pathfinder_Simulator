{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // @ts-check\n\n\nimport * as React from 'react';\n/**\n * @typedef {object} State\n * @prop {number} index\n * @prop {({ key: string } & (State | {}))[]} routes\n * @prop {boolean} [isTransitioning]\n *\n * @typedef {object} ParentPayload\n * @prop {string} type\n * @prop {object} action\n * @prop {State} state\n * @prop {State | {key: string, routes?: undefined, index?: undefined, isTransitioning?: undefined} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Payload\n * @prop {string} type\n * @prop {object} action\n * @prop {State | {key: string}} state\n * @prop {State | {key: string} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Props\n * @prop {object} navigation\n * @prop {Function} navigation.addListener\n * @prop {Function} navigation.removeListener\n * @prop {() => boolean} navigation.isFocused\n * @prop {() => object | undefined} navigation.dangerouslyGetParent\n * @prop {State} navigation.state\n * @prop {(target: string, type: string, data: any) => void} onEvent\n *\n * @extends {React.Component<Props>}\n */\n\nexport default class NavigationEventManager extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"_actionSubscription\", void 0);\n\n    _defineProperty(this, \"_willFocusSubscription\", void 0);\n\n    _defineProperty(this, \"_willBlurSubscription\", void 0);\n\n    _defineProperty(this, \"_didFocusSubscription\", void 0);\n\n    _defineProperty(this, \"_didBlurSubscription\", void 0);\n\n    _defineProperty(this, \"_refocusSubscription\", void 0);\n\n    _defineProperty(this, \"_lastWillBlurKey\", void 0);\n\n    _defineProperty(this, \"_lastWillFocusKey\", void 0);\n\n    _defineProperty(this, \"_lastDidBlurKey\", void 0);\n\n    _defineProperty(this, \"_lastDidFocusKey\", void 0);\n\n    _defineProperty(this, \"_handleAction\", ({\n      state,\n      lastState,\n      action,\n      type,\n      context\n    }) => {\n      var _lastState$routes;\n\n      const {\n        navigation,\n        onEvent\n      } = this.props; // We should only emit events when the navigator is focused\n      // When navigator is not focused, screens inside shouldn't receive focused status either\n\n      if (!navigation.isFocused()) {\n        return;\n      }\n\n      const previous = lastState ? (_lastState$routes = lastState.routes) === null || _lastState$routes === void 0 ? void 0 : _lastState$routes[lastState.index] : undefined;\n      const current = state.routes[state.index];\n      const payload = {\n        context: \"\".concat(current.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n        state: current,\n        lastState: previous,\n        action,\n        type\n      };\n\n      if ((previous === null || previous === void 0 ? void 0 : previous.key) !== current.key) {\n        this._emitWillFocus(current.key, payload);\n\n        if (previous === null || previous === void 0 ? void 0 : previous.key) {\n          this._emitWillBlur(previous.key, payload);\n        }\n      }\n\n      if ((lastState === null || lastState === void 0 ? void 0 : lastState.isTransitioning) !== state.isTransitioning && state.isTransitioning === false) {\n        if (this._lastWillBlurKey) {\n          this._emitDidBlur(this._lastWillBlurKey, payload);\n        }\n\n        if (this._lastWillFocusKey) {\n          this._emitDidFocus(this._lastWillFocusKey, payload);\n        }\n      }\n\n      onEvent(current.key, 'action', payload);\n    });\n\n    _defineProperty(this, \"_handleWillFocus\", ({\n      lastState,\n      action,\n      context,\n      type\n    }) => {\n      var _lastState$routes2;\n\n      const {\n        navigation\n      } = this.props;\n      const route = navigation.state.routes[navigation.state.index];\n\n      this._emitWillFocus(route.key, {\n        context: \"\".concat(route.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n        state: route,\n        lastState: lastState === null || lastState === void 0 ? void 0 : (_lastState$routes2 = lastState.routes) === null || _lastState$routes2 === void 0 ? void 0 : _lastState$routes2.find(r => r.key === route.key),\n        action,\n        type\n      });\n    });\n\n    _defineProperty(this, \"_handleWillBlur\", ({\n      lastState,\n      action,\n      context,\n      type\n    }) => {\n      var _lastState$routes3;\n\n      const {\n        navigation\n      } = this.props;\n      const route = navigation.state.routes[navigation.state.index];\n\n      this._emitWillBlur(route.key, {\n        context: \"\".concat(route.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n        state: route,\n        lastState: lastState === null || lastState === void 0 ? void 0 : (_lastState$routes3 = lastState.routes) === null || _lastState$routes3 === void 0 ? void 0 : _lastState$routes3.find(r => r.key === route.key),\n        action,\n        type\n      });\n    });\n\n    _defineProperty(this, \"_handleDidFocus\", ({\n      lastState,\n      action,\n      context,\n      type\n    }) => {\n      const {\n        navigation\n      } = this.props;\n\n      if (this._lastWillFocusKey) {\n        const route = navigation.state.routes.find(r => r.key === this._lastWillFocusKey);\n\n        if (route) {\n          var _lastState$routes4;\n\n          this._emitDidFocus(route.key, {\n            context: \"\".concat(route.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n            state: route,\n            lastState: lastState === null || lastState === void 0 ? void 0 : (_lastState$routes4 = lastState.routes) === null || _lastState$routes4 === void 0 ? void 0 : _lastState$routes4.find(r => r.key === route.key),\n            action,\n            type\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"_handleDidBlur\", ({\n      lastState,\n      action,\n      context,\n      type\n    }) => {\n      const {\n        navigation\n      } = this.props;\n\n      if (this._lastWillBlurKey) {\n        const route = navigation.state.routes.find(r => r.key === this._lastWillBlurKey);\n\n        if (route) {\n          var _lastState$routes5;\n\n          this._emitDidBlur(route.key, {\n            context: \"\".concat(route.key, \":\").concat(action.type, \"_\").concat(context || 'Root'),\n            state: route,\n            lastState: lastState === null || lastState === void 0 ? void 0 : (_lastState$routes5 = lastState.routes) === null || _lastState$routes5 === void 0 ? void 0 : _lastState$routes5.find(r => r.key === route.key),\n            action,\n            type\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"_handleRefocus\", () => {\n      const {\n        onEvent,\n        navigation\n      } = this.props;\n      const route = navigation.state.routes[navigation.state.index];\n      onEvent(route.key, 'refocus');\n    });\n\n    _defineProperty(this, \"_emitWillFocus\", (target, payload) => {\n      if (this._lastWillBlurKey === target) {\n        this._lastWillBlurKey = undefined;\n      }\n\n      if (this._lastWillFocusKey === target) {\n        return;\n      }\n\n      this._lastDidFocusKey = undefined;\n      this._lastWillFocusKey = target;\n      const {\n        navigation,\n        onEvent\n      } = this.props;\n      onEvent(target, 'willFocus', payload);\n\n      if (typeof navigation.state.isTransitioning !== 'boolean' || navigation.state.isTransitioning !== true && !navigation.dangerouslyGetParent()) {\n        this._emitDidFocus(target, payload);\n      }\n    });\n\n    _defineProperty(this, \"_emitWillBlur\", (target, payload) => {\n      if (this._lastWillFocusKey === target) {\n        this._lastWillFocusKey = undefined;\n      }\n\n      if (this._lastWillBlurKey === target) {\n        return;\n      }\n\n      this._lastDidBlurKey = undefined;\n      this._lastWillBlurKey = target;\n      const {\n        navigation,\n        onEvent\n      } = this.props;\n      onEvent(target, 'willBlur', payload);\n\n      if (typeof navigation.state.isTransitioning !== 'boolean' || navigation.state.isTransitioning !== true && !navigation.dangerouslyGetParent()) {\n        this._emitDidBlur(target, payload);\n      }\n    });\n\n    _defineProperty(this, \"_emitDidFocus\", (target, payload) => {\n      if (this._lastWillFocusKey !== target || this._lastDidFocusKey === target) {\n        return;\n      }\n\n      this._lastDidFocusKey = target;\n      const {\n        onEvent\n      } = this.props;\n      onEvent(target, 'didFocus', payload);\n    });\n\n    _defineProperty(this, \"_emitDidBlur\", (target, payload) => {\n      if (this._lastWillBlurKey !== target || this._lastDidBlurKey === target) {\n        return;\n      }\n\n      this._lastDidBlurKey = target;\n      const {\n        onEvent\n      } = this.props;\n      onEvent(target, 'didBlur', payload);\n    });\n  }\n\n  componentDidMount() {\n    const {\n      navigation\n    } = this.props;\n    this._actionSubscription = navigation.addListener('action', this._handleAction);\n    this._willFocusSubscription = navigation.addListener('willFocus', this._handleWillFocus);\n    this._willBlurSubscription = navigation.addListener('willBlur', this._handleWillBlur);\n    this._didFocusSubscription = navigation.addListener('didFocus', this._handleDidFocus);\n    this._didBlurSubscription = navigation.addListener('didBlur', this._handleDidBlur);\n    this._refocusSubscription = navigation.addListener('refocus', this._handleRefocus);\n  }\n\n  componentWillUnmount() {\n    var _this$_actionSubscrip, _this$_willFocusSubsc, _this$_willBlurSubscr, _this$_didFocusSubscr, _this$_didBlurSubscri, _this$_refocusSubscri;\n\n    (_this$_actionSubscrip = this._actionSubscription) === null || _this$_actionSubscrip === void 0 ? void 0 : _this$_actionSubscrip.remove();\n    (_this$_willFocusSubsc = this._willFocusSubscription) === null || _this$_willFocusSubsc === void 0 ? void 0 : _this$_willFocusSubsc.remove();\n    (_this$_willBlurSubscr = this._willBlurSubscription) === null || _this$_willBlurSubscr === void 0 ? void 0 : _this$_willBlurSubscr.remove();\n    (_this$_didFocusSubscr = this._didFocusSubscription) === null || _this$_didFocusSubscr === void 0 ? void 0 : _this$_didFocusSubscr.remove();\n    (_this$_didBlurSubscri = this._didBlurSubscription) === null || _this$_didBlurSubscri === void 0 ? void 0 : _this$_didBlurSubscri.remove();\n    (_this$_refocusSubscri = this._refocusSubscription) === null || _this$_refocusSubscri === void 0 ? void 0 : _this$_refocusSubscri.remove();\n  }\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n\n\n  render() {\n    return null;\n  }\n\n}","map":{"version":3,"sources":["NavigationFocusEvents.js"],"names":["React","componentDidMount","navigation","componentWillUnmount","context","onEvent","previous","lastState","current","state","payload","action","type","route","r","render"],"mappings":"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","sourcesContent":["// @ts-check\n\nimport * as React from 'react';\n\n/**\n * @typedef {object} State\n * @prop {number} index\n * @prop {({ key: string } & (State | {}))[]} routes\n * @prop {boolean} [isTransitioning]\n *\n * @typedef {object} ParentPayload\n * @prop {string} type\n * @prop {object} action\n * @prop {State} state\n * @prop {State | {key: string, routes?: undefined, index?: undefined, isTransitioning?: undefined} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Payload\n * @prop {string} type\n * @prop {object} action\n * @prop {State | {key: string}} state\n * @prop {State | {key: string} | undefined | null} lastState\n * @prop {string} [context]\n *\n * @typedef {object} Props\n * @prop {object} navigation\n * @prop {Function} navigation.addListener\n * @prop {Function} navigation.removeListener\n * @prop {() => boolean} navigation.isFocused\n * @prop {() => object | undefined} navigation.dangerouslyGetParent\n * @prop {State} navigation.state\n * @prop {(target: string, type: string, data: any) => void} onEvent\n *\n * @extends {React.Component<Props>}\n */\nexport default class NavigationEventManager extends React.Component {\n  componentDidMount() {\n    const { navigation } = this.props;\n\n    this._actionSubscription = navigation.addListener(\n      'action',\n      this._handleAction\n    );\n\n    this._willFocusSubscription = navigation.addListener(\n      'willFocus',\n      this._handleWillFocus\n    );\n\n    this._willBlurSubscription = navigation.addListener(\n      'willBlur',\n      this._handleWillBlur\n    );\n\n    this._didFocusSubscription = navigation.addListener(\n      'didFocus',\n      this._handleDidFocus\n    );\n\n    this._didBlurSubscription = navigation.addListener(\n      'didBlur',\n      this._handleDidBlur\n    );\n\n    this._refocusSubscription = navigation.addListener(\n      'refocus',\n      this._handleRefocus\n    );\n  }\n\n  componentWillUnmount() {\n    this._actionSubscription?.remove();\n    this._willFocusSubscription?.remove();\n    this._willBlurSubscription?.remove();\n    this._didFocusSubscription?.remove();\n    this._didBlurSubscription?.remove();\n    this._refocusSubscription?.remove();\n  }\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _actionSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _willFocusSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _willBlurSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _didFocusSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _didBlurSubscription;\n\n  /**\n   * @type {{ remove(): void } | undefined}\n   */\n  _refocusSubscription;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastWillBlurKey;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastWillFocusKey;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastDidBlurKey;\n\n  /**\n   * @type {string | undefined}\n   */\n  _lastDidFocusKey;\n\n  /**\n   * The 'action' event will fire when navigation state changes.\n   * Detect if the focused route changed here and emit appropriate events.\n   *\n   * @param {ParentPayload} payload\n   */\n  _handleAction = ({ state, lastState, action, type, context }) => {\n    const { navigation, onEvent } = this.props;\n\n    // We should only emit events when the navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (!navigation.isFocused()) {\n      return;\n    }\n\n    const previous = lastState\n      ? lastState.routes?.[lastState.index]\n      : undefined;\n    const current = state.routes[state.index];\n\n    const payload = {\n      context: `${current.key}:${action.type}_${context || 'Root'}`,\n      state: current,\n      lastState: previous,\n      action,\n      type,\n    };\n\n    if (previous?.key !== current.key) {\n      this._emitWillFocus(current.key, payload);\n\n      if (previous?.key) {\n        this._emitWillBlur(previous.key, payload);\n      }\n    }\n\n    if (\n      lastState?.isTransitioning !== state.isTransitioning &&\n      state.isTransitioning === false\n    ) {\n      if (this._lastWillBlurKey) {\n        this._emitDidBlur(this._lastWillBlurKey, payload);\n      }\n\n      if (this._lastWillFocusKey) {\n        this._emitDidFocus(this._lastWillFocusKey, payload);\n      }\n    }\n\n    onEvent(current.key, 'action', payload);\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleWillFocus = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n    const route = navigation.state.routes[navigation.state.index];\n\n    this._emitWillFocus(route.key, {\n      context: `${route.key}:${action.type}_${context || 'Root'}`,\n      state: route,\n      lastState: lastState?.routes?.find((r) => r.key === route.key),\n      action,\n      type,\n    });\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleWillBlur = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n    const route = navigation.state.routes[navigation.state.index];\n\n    this._emitWillBlur(route.key, {\n      context: `${route.key}:${action.type}_${context || 'Root'}`,\n      state: route,\n      lastState: lastState?.routes?.find((r) => r.key === route.key),\n      action,\n      type,\n    });\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleDidFocus = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n\n    if (this._lastWillFocusKey) {\n      const route = navigation.state.routes.find(\n        (r) => r.key === this._lastWillFocusKey\n      );\n\n      if (route) {\n        this._emitDidFocus(route.key, {\n          context: `${route.key}:${action.type}_${context || 'Root'}`,\n          state: route,\n          lastState: lastState?.routes?.find((r) => r.key === route.key),\n          action,\n          type,\n        });\n      }\n    }\n  };\n\n  /**\n   * @param {ParentPayload} payload\n   */\n  _handleDidBlur = ({ lastState, action, context, type }) => {\n    const { navigation } = this.props;\n\n    if (this._lastWillBlurKey) {\n      const route = navigation.state.routes.find(\n        (r) => r.key === this._lastWillBlurKey\n      );\n\n      if (route) {\n        this._emitDidBlur(route.key, {\n          context: `${route.key}:${action.type}_${context || 'Root'}`,\n          state: route,\n          lastState: lastState?.routes?.find((r) => r.key === route.key),\n          action,\n          type,\n        });\n      }\n    }\n  };\n\n  _handleRefocus = () => {\n    const { onEvent, navigation } = this.props;\n    const route = navigation.state.routes[navigation.state.index];\n\n    onEvent(route.key, 'refocus');\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitWillFocus = (target, payload) => {\n    if (this._lastWillBlurKey === target) {\n      this._lastWillBlurKey = undefined;\n    }\n\n    if (this._lastWillFocusKey === target) {\n      return;\n    }\n\n    this._lastDidFocusKey = undefined;\n    this._lastWillFocusKey = target;\n\n    const { navigation, onEvent } = this.props;\n\n    onEvent(target, 'willFocus', payload);\n\n    if (\n      typeof navigation.state.isTransitioning !== 'boolean' ||\n      (navigation.state.isTransitioning !== true &&\n        !navigation.dangerouslyGetParent())\n    ) {\n      this._emitDidFocus(target, payload);\n    }\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitWillBlur = (target, payload) => {\n    if (this._lastWillFocusKey === target) {\n      this._lastWillFocusKey = undefined;\n    }\n\n    if (this._lastWillBlurKey === target) {\n      return;\n    }\n\n    this._lastDidBlurKey = undefined;\n    this._lastWillBlurKey = target;\n\n    const { navigation, onEvent } = this.props;\n\n    onEvent(target, 'willBlur', payload);\n\n    if (\n      typeof navigation.state.isTransitioning !== 'boolean' ||\n      (navigation.state.isTransitioning !== true &&\n        !navigation.dangerouslyGetParent())\n    ) {\n      this._emitDidBlur(target, payload);\n    }\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitDidFocus = (target, payload) => {\n    if (this._lastWillFocusKey !== target || this._lastDidFocusKey === target) {\n      return;\n    }\n\n    this._lastDidFocusKey = target;\n\n    const { onEvent } = this.props;\n\n    onEvent(target, 'didFocus', payload);\n  };\n\n  /**\n   * @param {string} target\n   * @param {Payload} payload\n   */\n  _emitDidBlur = (target, payload) => {\n    if (this._lastWillBlurKey !== target || this._lastDidBlurKey === target) {\n      return;\n    }\n\n    this._lastDidBlurKey = target;\n\n    const { onEvent } = this.props;\n\n    onEvent(target, 'didBlur', payload);\n  };\n\n  render() {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}