{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/DescriptionText/Description.js\";\nimport React, { Component } from \"react\";\nimport \"./Description.css\";\nexport default class Description extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getAlgorithmDescription(algorithm) {\n    if (algorithm == \"A*\") return \"A*, a balance of Greedy and Dijkstra. Uses both the start and end node to expand based on a heuristic. Returns the shortest path.\";else if (algorithm == \"Dijkstra\") return \"Dijkstra, stays as close as possible to the start node and expands outwards. Returns the shortest path.\";else if (algorithm == \"GBF\") return \"Greedy-Best-First, an aggressive and speedy algorithm that expands to the node closest to the end node. Will not always return the shortest path.\";else if (algorithm == \"BFS\") return \"Breadth-First-Search, doesn't use the start or end node for expansion, but rather grows level by level. Returns the shortest path.\";else if (algorithm == \"DFS\") return \"Depth-First-Search, an algorithm not made for pathfinding which has no sense of direction. Will not return the shortest path unless you are lucky.\";else return \"\";\n  }\n\n  render() {\n    const {\n      activeAlgorithm\n    } = this.props;\n    const description = this.getAlgorithmDescription(activeAlgorithm);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"descriptionContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, description));\n  }\n\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/DescriptionText/Description.js"],"names":["React","Component","Description","constructor","props","state","getAlgorithmDescription","algorithm","render","activeAlgorithm","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,mBAAP;AAEA,eAAe,MAAMC,WAAN,SAA0BD,SAA1B,CAAoC;AACjDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,uBAAuB,CAACC,SAAD,EAAY;AACjC,QAAIA,SAAS,IAAI,IAAjB,EACE,OAAO,mIAAP,CADF,KAEK,IAAIA,SAAS,IAAI,UAAjB,EACH,OAAO,yGAAP,CADG,KAEA,IAAIA,SAAS,IAAI,KAAjB,EACH,OAAO,mJAAP,CADG,KAEA,IAAIA,SAAS,IAAI,KAAjB,EACH,OAAO,oIAAP,CADG,KAEA,IAAIA,SAAS,IAAI,KAAjB,EACH,OAAO,oJAAP,CADG,KAEA,OAAO,EAAP;AACN;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAsB,KAAKL,KAAjC;AAEA,UAAMM,WAAW,GAAG,KAAKJ,uBAAL,CAA6BG,eAA7B,CAApB;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIC,WAAJ,CADF,CADF;AAKD;;AA9BgD","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Description.css\";\n\nexport default class Description extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getAlgorithmDescription(algorithm) {\n    if (algorithm == \"A*\")\n      return \"A*, a balance of Greedy and Dijkstra. Uses both the start and end node to expand based on a heuristic. Returns the shortest path.\";\n    else if (algorithm == \"Dijkstra\")\n      return \"Dijkstra, stays as close as possible to the start node and expands outwards. Returns the shortest path.\";\n    else if (algorithm == \"GBF\")\n      return \"Greedy-Best-First, an aggressive and speedy algorithm that expands to the node closest to the end node. Will not always return the shortest path.\";\n    else if (algorithm == \"BFS\")\n      return \"Breadth-First-Search, doesn't use the start or end node for expansion, but rather grows level by level. Returns the shortest path.\";\n    else if (algorithm == \"DFS\")\n      return \"Depth-First-Search, an algorithm not made for pathfinding which has no sense of direction. Will not return the shortest path unless you are lucky.\";\n    else return \"\";\n  }\n\n  render() {\n    const { activeAlgorithm } = this.props;\n\n    const description = this.getAlgorithmDescription(activeAlgorithm);\n\n    return (\n      <div className=\"descriptionContainer\">\n        <b>{description}</b>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}