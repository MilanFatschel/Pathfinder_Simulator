{"ast":null,"code":"// Action constants\nexport const BACK = 'Navigation/BACK';\nexport const INIT = 'Navigation/INIT';\nexport const NAVIGATE = 'Navigation/NAVIGATE';\nexport const SET_PARAMS = 'Navigation/SET_PARAMS'; // Action creators\n\nexport const back = (payload = {}) => ({\n  type: BACK,\n  key: payload.key,\n  immediate: payload.immediate\n});\nexport const init = (payload = {}) => {\n  const action = {\n    type: INIT\n  };\n\n  if (payload.params) {\n    action.params = payload.params;\n  }\n\n  return action;\n};\nexport const navigate = payload => {\n  const action = {\n    type: NAVIGATE,\n    routeName: payload.routeName\n  };\n\n  if (payload.params) {\n    action.params = payload.params;\n  }\n\n  if (payload.action) {\n    action.action = payload.action;\n  }\n\n  if (payload.key) {\n    action.key = payload.key;\n  }\n\n  return action;\n};\nexport const setParams = payload => ({\n  type: SET_PARAMS,\n  key: payload.key,\n  params: payload.params,\n  preserveFocus: true\n});","map":{"version":3,"sources":["NavigationActions.ts"],"names":["BACK","INIT","NAVIGATE","SET_PARAMS","back","payload","type","key","immediate","init","action","navigate","routeName","setParams","params","preserveFocus"],"mappings":"AAkDA;AACA,OAAO,MAAMA,IAAI,GAAV,iBAAA;AACP,OAAO,MAAMC,IAAI,GAAV,iBAAA;AACP,OAAO,MAAMC,QAAQ,GAAd,qBAAA;AACP,OAAO,MAAMC,UAAU,GAAhB,uBAAA,C,CAEP;;AACA,OAAO,MAAMC,IAAI,GAAG,CAClBC,OAAoC,GADlB,EAAA,MAEQ;AAC1BC,EAAAA,IAAI,EADsB,IAAA;AAE1BC,EAAAA,GAAG,EAAEF,OAAO,CAFc,GAAA;AAG1BG,EAAAA,SAAS,EAAEH,OAAO,CAACG;AAHO,CAFR,CAAb;AAQP,OAAO,MAAMC,IAAI,GAAG,CAACJ,OAAoC,GAArC,EAAA,KAA+C;AACjE,QAAMK,MAA4B,GAAG;AACnCJ,IAAAA,IAAI,EAAEL;AAD6B,GAArC;;AAGA,MAAII,OAAO,CAAX,MAAA,EAAoB;AAClBK,IAAAA,MAAM,CAANA,MAAAA,GAAgBL,OAAO,CAAvBK,MAAAA;AACD;;AACD,SAAA,MAAA;AAPK,CAAA;AAUP,OAAO,MAAMC,QAAQ,GACnBN,OADsB,IAEO;AAC7B,QAAMK,MAAgC,GAAG;AACvCJ,IAAAA,IAAI,EADmC,QAAA;AAEvCM,IAAAA,SAAS,EAAEP,OAAO,CAACO;AAFoB,GAAzC;;AAIA,MAAIP,OAAO,CAAX,MAAA,EAAoB;AAClBK,IAAAA,MAAM,CAANA,MAAAA,GAAgBL,OAAO,CAAvBK,MAAAA;AACD;;AACD,MAAIL,OAAO,CAAX,MAAA,EAAoB;AAClBK,IAAAA,MAAM,CAANA,MAAAA,GAAgBL,OAAO,CAAvBK,MAAAA;AACD;;AACD,MAAIL,OAAO,CAAX,GAAA,EAAiB;AACfK,IAAAA,MAAM,CAANA,GAAAA,GAAaL,OAAO,CAApBK,GAAAA;AACD;;AACD,SAAA,MAAA;AAhBK,CAAA;AAmBP,OAAO,MAAMG,SAAS,GACpBR,OADuB,KAEQ;AAC/BC,EAAAA,IAAI,EAD2B,UAAA;AAE/BC,EAAAA,GAAG,EAAEF,OAAO,CAFmB,GAAA;AAG/BS,EAAAA,MAAM,EAAET,OAAO,CAHgB,MAAA;AAI/BU,EAAAA,aAAa,EAAE;AAJgB,CAFR,CAAlB","sourcesContent":["export interface NavigationParams {\n  [key: string]: any;\n}\n\nexport interface NavigationNavigateActionPayload {\n  routeName: string;\n  params?: NavigationParams;\n\n  // The action to run inside the sub-router\n  action?: NavigationNavigateAction;\n\n  key?: string;\n}\n\nexport interface NavigationNavigateAction\n  extends NavigationNavigateActionPayload {\n  type: 'Navigation/NAVIGATE';\n}\n\nexport interface NavigationBackActionPayload {\n  key?: string | null;\n  immediate?: boolean;\n}\n\nexport interface NavigationBackAction extends NavigationBackActionPayload {\n  type: 'Navigation/BACK';\n}\n\nexport interface NavigationInitActionPayload {\n  params?: NavigationParams;\n}\n\nexport interface NavigationInitAction extends NavigationInitActionPayload {\n  type: 'Navigation/INIT';\n}\n\nexport interface NavigationSetParamsActionPayload {\n  // The key of the route where the params should be set\n  key: string;\n\n  // The new params to merge into the existing route params\n  params?: NavigationParams;\n}\n\nexport interface NavigationSetParamsAction\n  extends NavigationSetParamsActionPayload {\n  type: 'Navigation/SET_PARAMS';\n  preserveFocus: true;\n}\n\n// Action constants\nexport const BACK = 'Navigation/BACK';\nexport const INIT = 'Navigation/INIT';\nexport const NAVIGATE = 'Navigation/NAVIGATE';\nexport const SET_PARAMS = 'Navigation/SET_PARAMS';\n\n// Action creators\nexport const back = (\n  payload: NavigationBackActionPayload = {}\n): NavigationBackAction => ({\n  type: BACK,\n  key: payload.key,\n  immediate: payload.immediate,\n});\n\nexport const init = (payload: NavigationInitActionPayload = {}) => {\n  const action: NavigationInitAction = {\n    type: INIT,\n  };\n  if (payload.params) {\n    action.params = payload.params;\n  }\n  return action;\n};\n\nexport const navigate = (\n  payload: NavigationNavigateActionPayload\n): NavigationNavigateAction => {\n  const action: NavigationNavigateAction = {\n    type: NAVIGATE,\n    routeName: payload.routeName,\n  };\n  if (payload.params) {\n    action.params = payload.params;\n  }\n  if (payload.action) {\n    action.action = payload.action;\n  }\n  if (payload.key) {\n    action.key = payload.key;\n  }\n  return action;\n};\n\nexport const setParams = (\n  payload: NavigationSetParamsActionPayload\n): NavigationSetParamsAction => ({\n  type: SET_PARAMS,\n  key: payload.key,\n  params: payload.params,\n  preserveFocus: true,\n});\n"]},"metadata":{},"sourceType":"module"}