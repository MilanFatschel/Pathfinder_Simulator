{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 19;\nconst GRID_ROW_LENGTH = 20;\nconst GRID_COL_LENGTH = 20;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    console.log(grid);\n    addNeighborNodes(grid);\n    this.setState({\n      grid\n    });\n  }\n\n  animateNodeList(visitedNodesInOrder) {// for (let i = 0; i < visitedNodesInOrder.length; i++) {\n    //   setTimeout(() => {\n    //     const node = visitedNodesInOrder[i];\n    //     const newGrid = this.state.grid.slice();\n    //     const newNode = {\n    //       ...node,\n    //       isVisited: true,\n    //     };\n    //     newGrid[node.row][node.col] = newNode;\n    //     this.setState({ grid: newGrid });\n    //   }, 1000 * i);\n    // }\n  }\n\n  visualizeAstar() {\n    // Grab our values and call the animate function for visualization\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    this.animateNodeList(visitedNodesInOrder);\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAstar(),\n      Run: true,\n      astar: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          isStartNode,\n          isEndNode,\n          isVisited\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isVisited: isVisited,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst createGrid = () => {\n  // Display Grid and Nodes\n  const grid = [];\n\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (col, row) => {\n  const newNode = {\n    col,\n    row,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst addNeighborNodes = grid => {\n  for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n    for (let j = 0; j < GRID_COL_LENGTH; j++) {\n      if (i < GRID_COL_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n\n      if (j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n\n      if (i < GRID_COL_LENGTH - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n\n      if (i > 0 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n\n      if (i < GRID_COL_LENGTH - 1 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_ROW_LENGTH","GRID_COL_LENGTH","Display","constructor","props","state","grid","componentDidMount","createGrid","console","log","addNeighborNodes","setState","animateNodeList","visitedNodesInOrder","visualizeAstar","startNode","endNode","render","map","row","rowIdx","node","nodeIdx","isStartNode","isEndNode","isVisited","currentRow","col","push","createNewNode","newNode","g","Infinity","h","isObstacle","neighborNodes","parentNode","i","j"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 19;\nconst GRID_ROW_LENGTH = 20;\nconst GRID_COL_LENGTH = 20;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    console.log(grid);\n    addNeighborNodes(grid);\n    this.setState({ grid });\n  }\n\n  animateNodeList(visitedNodesInOrder) {\n    // for (let i = 0; i < visitedNodesInOrder.length; i++) {\n    //   setTimeout(() => {\n    //     const node = visitedNodesInOrder[i];\n    //     const newGrid = this.state.grid.slice();\n    //     const newNode = {\n    //       ...node,\n    //       isVisited: true,\n    //     };\n    //     newGrid[node.row][node.col] = newNode;\n    //     this.setState({ grid: newGrid });\n    //   }, 1000 * i);\n    // }\n  }\n\n  visualizeAstar() {\n    // Grab our values and call the animate function for visualization\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    this.animateNodeList(visitedNodesInOrder);\n  }\n\n  render() {\n    const { grid } = this.state;\n    return (\n      <div>\n        <button onClick={() => this.visualizeAstar()} Run astar></button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { isStartNode, isEndNode, isVisited } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isVisited={isVisited}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst createGrid = () => {\n  // Display Grid and Nodes\n  const grid = [];\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (col, row) => {\n  const newNode = {\n    col,\n    row,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst addNeighborNodes = (grid) => {\n  for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n    for (let j = 0; j < GRID_COL_LENGTH; j++) {\n      if (i < GRID_COL_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n      if (j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n      if (i < GRID_COL_LENGTH - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n      if (i > 0 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n      if (i < GRID_COL_LENGTH - 1 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}