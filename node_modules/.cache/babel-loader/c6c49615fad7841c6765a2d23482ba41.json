{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 17;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 18;\nconst GRID_COL_LENGTH = 40;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false,\n      simulationSpeed: 50\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({\n      grid\n    });\n    this.setState({\n      startNode: grid[START_NODE_ROW][START_NODE_COL]\n    });\n    this.setState({\n      endNode: grid[END_NODE_ROW][END_NODE_COL]\n    });\n  } // Item clicks for algorithms\n\n\n  onClickAlgorithm(e, algorithm) {\n    e.preventDefault();\n    if (algorithm == \"astar\") this.setState({\n      activeAlgorithm: \"astar\"\n    });else if (algorithm == \"dijkstra\") this.setState({\n      activeAlgorithm: \"dijkstra\"\n    });else if (algorithm == \"gbf\") this.setState({\n      activeAlgorithm: \"gbf\"\n    });else if (algorithm == \"bfs\") this.setState({\n      activeAlgorithm: \"bfs\"\n    });else if (algorithm == \"dfs\") this.setState({\n      activeAlgorithm: \"dfs\"\n    });\n  } // Item Click for Simulation Speed\n\n\n  onClickSpeed(e, speed) {\n    e.preventDefault();\n    this.setState({\n      simulatorSpeed: speed\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const {\n      startNode,\n      endNode,\n      disableClicking\n    } = this.state; // Alogrithm in progress don't allow clicking\n\n    if (disableClicking) return; // Check to see if the mouse clicked on the start\n    // or end point\n\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true\n      });\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // If the user releases the start on a grid\n    // set the start on that grid\n    if (this.state.mouseHoldsStart) {\n      this.setState({\n        startNode: this.state.grid[row][col]\n      });\n    } else if (this.state.mouseHoldsEnd) {\n      this.setState({\n        endNode: this.state.grid[row][col]\n      });\n    }\n\n    this.setState({\n      mouseIsPressed: false\n    });\n    this.setState({\n      mouseHoldsStart: false\n    });\n    this.setState({\n      mouseHoldsEnd: false\n    });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n\n    if (this.state.mouseHoldsEnd) {\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return; // If we enter a new grid with the start held, generate a new start\n\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    } // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n        const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n        this.setState({\n          grid: newGrid\n        });\n      } // Toogle the obstacles\n      else {\n          const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid\n          });\n        }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, this.state.simulationSpeed * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, this.state.simulationSpeed * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  visualizeAstar(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDijkstra(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeGreedy(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeBFS(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDFS(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      startNode,\n      endNode\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAstar(grid, startNode, endNode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, \"A*\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(grid, startNode, endNode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, \"Dijkstra\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeGreedy(grid, startNode, endNode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }, \"Greedy-best-first\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeBFS(grid, startNode, endNode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }\n    }, \"BFS\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDFS(grid, startNode, endNode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }, \"DFS\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          mouseIsPressed: mouseIsPressed,\n          onMouseOut: (row, col) => this.handleMouseOut(row, col),\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: (row, col) => this.handleMouseUp(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n} // const randomizeObstacles = (grid) => {\n//   // Randomly assigns obstacles\n//   for (let row = 0; row < grid.length; row++) {\n//     for (let col = 0; col < grid[row].length; col++) {\n//       if (\n//         random(1) < 0.3 &&\n//         !grid[row][col].isStartNode &&\n//         !grid[row][col].isEndNode\n//       ) {\n//         grid[i][j].isObstacle = true;\n//       }\n//     }\n//   }\n// };\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStartNode: !node.isStartNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isEndNode: !node.isEndNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getResultPath = endNode => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return []; // Get the shortest path by backtracking\n  // each node\n\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","dijkstra","greedybestfirst","bfs","dfs","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_ROW_LENGTH","GRID_COL_LENGTH","Display","constructor","props","state","grid","startNode","endNode","mouseIsPressed","mouseHoldsStart","mouseHoldsEnd","disableClicking","simulationSpeed","componentDidMount","createGrid","setState","onClickAlgorithm","e","algorithm","preventDefault","activeAlgorithm","onClickSpeed","speed","simulatorSpeed","handleMouseDown","row","col","newGrid","getNewGridWithToggledObstacle","handleMouseUp","handleMouseOut","getNewGridWithNewStart","getNewGridWithNewEnd","handleMouseEnter","animateNodeList","visitedNodesInOrder","shortestPathInOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeAstar","getResultPath","visualizeDijkstra","visualizeGreedy","visualizeBFS","visualizeDFS","render","map","rowId","nodeId","isStartNode","isEndNode","isObstacle","currentRow","push","createNewNode","newNode","g","Infinity","h","isVisited","neighborNodes","parentNode","slice","scanningNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\n\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 17;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 18;\nconst GRID_COL_LENGTH = 40;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false,\n      simulationSpeed: 50,\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({ grid });\n    this.setState({ startNode: grid[START_NODE_ROW][START_NODE_COL] });\n    this.setState({ endNode: grid[END_NODE_ROW][END_NODE_COL] });\n  }\n\n  // Item clicks for algorithms\n  onClickAlgorithm(e, algorithm) {\n    e.preventDefault();\n    if (algorithm == \"astar\") this.setState({ activeAlgorithm: \"astar\" });\n    else if (algorithm == \"dijkstra\")\n      this.setState({ activeAlgorithm: \"dijkstra\" });\n    else if (algorithm == \"gbf\") this.setState({ activeAlgorithm: \"gbf\" });\n    else if (algorithm == \"bfs\") this.setState({ activeAlgorithm: \"bfs\" });\n    else if (algorithm == \"dfs\") this.setState({ activeAlgorithm: \"dfs\" });\n  }\n\n  // Item Click for Simulation Speed\n  onClickSpeed(e, speed) {\n    e.preventDefault();\n    this.setState({ simulatorSpeed: speed });\n  }\n\n  handleMouseDown(row, col) {\n    const { startNode, endNode, disableClicking } = this.state;\n\n    // Alogrithm in progress don't allow clicking\n    if (disableClicking) return;\n\n    // Check to see if the mouse clicked on the start\n    // or end point\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true,\n      });\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true,\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // If the user releases the start on a grid\n    // set the start on that grid\n    if (this.state.mouseHoldsStart) {\n      this.setState({ startNode: this.state.grid[row][col] });\n    } else if (this.state.mouseHoldsEnd) {\n      this.setState({ endNode: this.state.grid[row][col] });\n    }\n\n    this.setState({ mouseIsPressed: false });\n    this.setState({ mouseHoldsStart: false });\n    this.setState({ mouseHoldsEnd: false });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    if (this.state.mouseHoldsEnd) {\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    // If we enter a new grid with the start held, generate a new start\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // Toogle the obstacles\n    else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, this.state.simulationSpeed * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, this.state.simulationSpeed * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  visualizeAstar(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDijkstra(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeGreedy(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeBFS(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDFS(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed, startNode, endNode } = this.state;\n    return (\n      <>\n        <button onClick={() => this.visualizeAstar(grid, startNode, endNode)}>\n          A*\n        </button>\n        <button\n          onClick={() => this.visualizeDijkstra(grid, startNode, endNode)}\n        >\n          Dijkstra\n        </button>\n        <button onClick={() => this.visualizeGreedy(grid, startNode, endNode)}>\n          Greedy-best-first\n        </button>\n        <button onClick={() => this.visualizeBFS(grid, startNode, endNode)}>\n          BFS\n        </button>\n        <button onClick={() => this.visualizeDFS(grid, startNode, endNode)}>\n          DFS\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseOut={(row, col) => this.handleMouseOut(row, col)}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={(row, col) => this.handleMouseUp(row, col)}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\n// const randomizeObstacles = (grid) => {\n//   // Randomly assigns obstacles\n//   for (let row = 0; row < grid.length; row++) {\n//     for (let col = 0; col < grid[row].length; col++) {\n//       if (\n//         random(1) < 0.3 &&\n//         !grid[row][col].isStartNode &&\n//         !grid[row][col].isEndNode\n//       ) {\n//         grid[i][j].isObstacle = true;\n//       }\n//     }\n//   }\n// };\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStartNode: !node.isStartNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isEndNode: !node.isEndNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getResultPath = (endNode) => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return [];\n\n  // Get the shortest path by backtracking\n  // each node\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};\n"]},"metadata":{},"sourceType":"module"}