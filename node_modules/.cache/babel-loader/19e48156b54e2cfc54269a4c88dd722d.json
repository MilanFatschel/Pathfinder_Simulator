{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from './utils/invariant';\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\n\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n    const routes = state.routes.slice();\n    routes.push(route);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes\n    });\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n\n    const routes = state.routes.slice(0, -1);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes\n    });\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n    return _objectSpread({}, state, {\n      index\n    });\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n    return _objectSpread({}, replaced, {\n      routes: replaced.routes.slice(0, index + 1)\n    });\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n    return _objectSpread({}, state, {\n      index,\n      routes\n    });\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n    return _objectSpread({}, state, {\n      index: nextIndex,\n      routes\n    });\n  }\n\n};\nexport default StateUtils;","map":{"version":3,"sources":["StateUtils.js"],"names":["StateUtils","get","state","route","indexOf","has","push","invariant","routes","index","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAt","preserveIndex","nextIndex","nextState","replaceAtIndex","reset","Array","compare"],"mappings":"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","sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find((route) => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex((route) => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some((route) => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"]},"metadata":{},"sourceType":"module"}