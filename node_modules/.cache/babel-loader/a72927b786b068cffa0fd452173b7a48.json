{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutDataStructure/AboutStack.js\";\nimport React, { Component } from \"react\";\nimport \"./../Tutorial/Tutorial.css\";\nexport default class AboutStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tutorial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"The Stack\"), /*#__PURE__*/React.createElement(\"h6\", {\n      className: \"bold-paragraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }, \"Last-In First-Out\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"tutorial-image\",\n      src: require(\"./../../gifs/dragstartend.gif\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    }, \"The stack can be thought of a physical stack of books. As you place books on top of each other you can only take off the top item in order to remove things from it. This allows us to keep the Last-In First-Out ordering and also make removing and inserting from the stack very efficient (Constant, since we only need to keep track of the top item). The stack is implemented in the Depth-First-Search algorithm.\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"next\",\n      onClick: () => {\n        this.props.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, \"Close\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutDataStructure/AboutStack.js"],"names":["React","Component","AboutStack","constructor","props","state","render","require","close"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,4BAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAChDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,eAGE;AACE,MAAA,SAAS,EAAC,gBADZ;AAEE,MAAA,GAAG,EAAEC,OAAO,CAAC,+BAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,maAPF,eAeE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKH,KAAL,CAAWI,KAAX;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAfF,CADF;AA0BD;;AAjC+C","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./../Tutorial/Tutorial.css\";\n\nexport default class AboutStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"tutorial\">\n        <h3 className=\"title\">The Stack</h3>\n        <h6 className=\"bold-paragraph\">Last-In First-Out</h6>\n        <img\n          className=\"tutorial-image\"\n          src={require(\"./../../gifs/dragstartend.gif\")}\n        ></img>\n        <p>\n          The stack can be thought of a physical stack of books. As you place\n          books on top of each other you can only take off the top item in order\n          to remove things from it. This allows us to keep the Last-In First-Out\n          ordering and also make removing and inserting from the stack very\n          efficient (Constant, since we only need to keep track of the top\n          item). The stack is implemented in the Depth-First-Search algorithm.\n        </p>\n        <button\n          className=\"next\"\n          onClick={() => {\n            this.props.close();\n          }}\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}