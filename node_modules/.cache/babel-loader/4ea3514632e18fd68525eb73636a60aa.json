{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 49;\nconst GRID_ROW_LENGTH = 20;\nconst GRID_COL_LENGTH = 50;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    console.log(\"mouse is pressed\");\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  animateNodeList(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      if (i == visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodePath);\n        }, 15 * i);\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i]; // React not refreshing correctly for animation\n        // so have to do it this way for now\n\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, 15 * i);\n    }\n  }\n\n  animateShortestPath(nodePath) {\n    for (let i = 0; i < nodePath.length; i++) {\n      setTimeout(() => {\n        const node = nodePath[i]; // React not refreshing correctly for animation\n        // so have to do it this way for now\n\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-path\";\n      }, 25 * i);\n    }\n  }\n\n  visualizeAstar(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    const shortestPathInOrder = getShortestPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  reset() {\n    const {\n      grid\n    } = this.state;\n\n    for (let i = 0; i < GRID_COL_LENGTH; i++) {\n      for (let j = 0; j < GRID_ROW_LENGTH; j++) {\n        if (grid[i][j].isVisited) {\n          const node = grid[i][j];\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node\";\n        }\n      }\n    }\n\n    const newGrid = createGrid();\n    this.setState({\n      newGrid\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAstar(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, \"A*\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.reset(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, \"Reset\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_ROW_LENGTH","GRID_COL_LENGTH","Display","constructor","props","state","grid","mouseIsPressed","componentDidMount","createGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithToggledObstacle","handleMouseUp","handleMouseEnter","console","log","animateNodeList","visitedNodesInOrder","i","length","setTimeout","animateShortestPath","nodePath","node","document","getElementById","className","visualizeAstar","startNode","endNode","shortestPathInOrder","getShortestPath","reset","j","isVisited","render","map","rowId","nodeId","isStartNode","isEndNode","isObstacle","currentRow","push","createNewNode","newNode","g","Infinity","h","neighborNodes","parentNode","slice"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 49;\nconst GRID_ROW_LENGTH = 20;\nconst GRID_COL_LENGTH = 50;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    console.log(\"mouse is pressed\");\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  animateNodeList(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      if (i == visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodePath);\n        }, 15 * i);\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        // React not refreshing correctly for animation\n        // so have to do it this way for now\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 15 * i);\n    }\n  }\n\n  animateShortestPath(nodePath) {\n    for (let i = 0; i < nodePath.length; i++) {\n      setTimeout(() => {\n        const node = nodePath[i];\n        // React not refreshing correctly for animation\n        // so have to do it this way for now\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-path\";\n      }, 25 * i);\n    }\n  }\n\n  visualizeAstar(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    const shortestPathInOrder = getShortestPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  reset() {\n    const { grid } = this.state;\n    for (let i = 0; i < GRID_COL_LENGTH; i++) {\n      for (let j = 0; j < GRID_ROW_LENGTH; j++) {\n        if (grid[i][j].isVisited) {\n          const node = grid[i][j];\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node\";\n        }\n      }\n    }\n    const newGrid = createGrid();\n    this.setState({ newGrid });\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <>\n        <button onClick={() => this.visualizeAstar(grid)}>A*</button>\n        <button onClick={() => this.reset()}>Reset</button>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}