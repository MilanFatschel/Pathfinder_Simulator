{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 19;\nconst GRID_ROW_LENGTH = 20;\nconst GRID_COL_LENGTH = 20;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    addNeighborNodes(grid);\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  animateNodeList(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const newGrid = this.state.grid.slice();\n        const newNode = { ...node,\n          isVisited: true\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({\n          grid: newGrid\n        });\n      }, 1000 * i);\n    }\n  }\n\n  visualizeAstar() {\n    // Grab our values and call the animate function for visualization\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(startNode, endNode);\n    this.animateNodeList(visitedNodesInOrder);\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAstar(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, \"A*\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst addNeighborNodes = grid => {\n  // Adds each neighbor node in the grid.\n  // Have to make sure we do not run out of bounds\n  for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n    for (let j = 0; j < GRID_COL_LENGTH; j++) {\n      if (i < GRID_COL_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n\n      if (j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n\n      if (i < GRID_COL_LENGTH - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n\n      if (i > 0 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n\n      if (i < GRID_COL_LENGTH - 1 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_ROW_LENGTH","GRID_COL_LENGTH","Display","constructor","props","state","grid","mouseIsPressed","componentDidMount","createGrid","addNeighborNodes","setState","handleMouseDown","row","col","newGrid","getNewGridWithToggledObstacle","handleMouseUp","handleMouseEnter","animateNodeList","visitedNodesInOrder","i","length","setTimeout","node","slice","newNode","isVisited","visualizeAstar","startNode","endNode","render","map","rowId","nodeId","isStartNode","isEndNode","isObstacle","currentRow","push","createNewNode","g","Infinity","h","neighborNodes","parentNode","j"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 19;\nconst GRID_ROW_LENGTH = 20;\nconst GRID_COL_LENGTH = 20;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    addNeighborNodes(grid);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  animateNodeList(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const newGrid = this.state.grid.slice();\n        const newNode = {\n          ...node,\n          isVisited: true,\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({ grid: newGrid });\n      }, 1000 * i);\n    }\n  }\n\n  visualizeAstar() {\n    // Grab our values and call the animate function for visualization\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(startNode, endNode);\n    this.animateNodeList(visitedNodesInOrder);\n  }\n\n  render() {\n    const { grid } = this.state;\n    return (\n      <>\n        <button onClick={() => this.visualizeAstar()}>A*</button>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst addNeighborNodes = (grid) => {\n  // Adds each neighbor node in the grid.\n  // Have to make sure we do not run out of bounds\n\n  for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n    for (let j = 0; j < GRID_COL_LENGTH; j++) {\n      if (i < GRID_COL_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n      if (j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n      if (i < GRID_COL_LENGTH - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n      if (i > 0 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n      if (i < GRID_COL_LENGTH - 1 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}