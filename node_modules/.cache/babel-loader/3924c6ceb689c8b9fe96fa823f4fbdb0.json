{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 17;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 18;\nconst GRID_COL_LENGTH = 40;\nconst SIMULATION_SPEED = 50;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      startCancelPos: {},\n      endCancelPos: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false\n    };\n  }\n\n  componentDidMount() {\n    const startPos = {\n      row: START_NODE_ROW,\n      col: START_NODE_COL\n    };\n    const endPos = {\n      row: END_NODE_ROW,\n      col: END_NODE_COL\n    };\n    const grid = this.createGrid(startPos, endPos);\n    this.setState({\n      savedGrid: grid\n    });\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const {\n      grid,\n      startNode,\n      endNode,\n      mouseHoldsStart,\n      mouseHoldsEnd,\n      disableClicking\n    } = this.state; // Alogrithm in progress don't allow clicking\n\n    if (disableClicking || mouseHoldsStart || mouseHoldsEnd) return; // Check to see if the mouse clicked on the start\n    // or end point\n\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true\n      });\n      console.log(this.state.savedGrid);\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true,\n        startCancelPos: {\n          row: row,\n          col: col\n        },\n        endCancelPos: {\n          row: row,\n          col: col\n        }\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // Check to see if the grid spot is already occupied\n    // if so cancel\n    // If the user releases the start or end on a grid\n    // set the start on that grid\n    const {\n      grid\n    } = this.state;\n    const node = this.state.grid[row][col];\n\n    if (this.state.mouseHoldsStart) {\n      // Check to see if the grid spot is already occupied\n      // if so cancel\n      if (node.isEndNode || node.isObstacle) {\n        const newGrid = this.getNewGridWithNewStart(grid, row, col);\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid\n        });\n        return;\n      }\n\n      this.setState({\n        startNode: this.state.grid[row][col]\n      });\n    } else if (this.state.mouseHoldsEnd) {\n      if (node.isStartNode || node.isObstacle) {\n        const endCancelPos = this.state.endCancelPos;\n        const newGrid = getNewGridWithNewEnd(this.state.grid, endCancelPos.row, endCancelPos.col);\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid\n        });\n        return;\n      }\n\n      this.setState({\n        endNode: this.state.grid[row][col]\n      });\n    }\n\n    this.setState({\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      mouseIsPressed: false\n    });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n    const {\n      grid\n    } = this.state;\n\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n\n    if (this.state.mouseHoldsEnd) {\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n    const {\n      grid\n    } = this.state; // If we enter a new grid with the start held, generate a new start\n\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    } // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n        if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n        const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n        this.setState({\n          grid: newGrid\n        });\n      } // Toogle the obstacles\n      else {\n          if (grid[row][col].isStartNode || grid[row][col].isEndNode) return;\n          const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid\n          });\n        }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    const speed = SIMULATION_SPEED / this.props.simulatorSpeed;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, speed * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, speed * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  resetGridStyles(grid) {\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = grid[row][col];\n\n        if (!node.isStartNode && !node.isEndNode) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node\";\n        }\n      }\n    }\n  }\n\n  createGrid(startPos, endPos) {\n    // Create a new grid which holds nodes\n    const grid = [];\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const newNode = createNewNode(row, col); // If the position is at the designated start\n        // or end, add the start and node to that cell\n\n        if (row == startPos.row && col == startPos.col) {\n          newNode.isStartNode = true;\n          this.setState({\n            startNode: newNode\n          });\n        }\n\n        if (row == endPos.row && col == endPos.col) {\n          newNode.isEndNode = true;\n          this.setState({\n            endNode: newNode\n          });\n        }\n\n        currentRow.push(newNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  visualizeAlgorithm(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const {\n      activeAlgorithm\n    } = this.props;\n    console.log(grid);\n    if (activeAlgorithm == \"astar\") visitedNodesInOrder = astar(grid, startNode, endNode);else if (activeAlgorithm == \"dijkstra\") var visitedNodesInOrder = dijkstra(grid, startNode, endNode);else if (activeAlgorithm == \"gbf\") var visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);else if (activeAlgorithm == \"bfs\") var visitedNodesInOrder = bfs(grid, startNode, endNode);else if (activeAlgorithm == \"dfs\") var visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  resetObstacles() {\n    const {\n      startNode,\n      endNode\n    } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n    const newStart = newGrid[startNode.row][startNode.col];\n    const newEnd = newGrid[endNode.row][endNode.col];\n    newStart.isStartNode = true;\n    newEnd.isEndNode = true;\n    this.setState({\n      startNode: newStart,\n      endNode: newEnd,\n      grid: newGrid,\n      disableClicking: false\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      startNode,\n      endNode\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAlgorithm(grid, startNode, endNode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }\n    }, \"Simulate \", this.props.activeAlgorithm, \" at\", \" \", this.props.simulatorSpeed * 100, \"%\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        this.resetGridStyles(grid);\n        this.resetObstacles();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }\n    }, \"Reset Obstacles\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          mouseIsPressed: mouseIsPressed,\n          onMouseOut: (row, col) => this.handleMouseOut(row, col),\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: (row, col) => this.handleMouseUp(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: false,\n    isEndNode: false,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStartNode: !node.isStartNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isEndNode: !node.isEndNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getResultPath = endNode => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return []; // Get the shortest path by backtracking\n  // each node\n\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","dijkstra","greedybestfirst","bfs","dfs","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_ROW_LENGTH","GRID_COL_LENGTH","SIMULATION_SPEED","Display","constructor","props","state","grid","startNode","endNode","startCancelPos","endCancelPos","mouseIsPressed","mouseHoldsStart","mouseHoldsEnd","disableClicking","componentDidMount","startPos","row","col","endPos","createGrid","setState","savedGrid","handleMouseDown","console","log","newGrid","getNewGridWithToggledObstacle","handleMouseUp","node","isEndNode","isObstacle","getNewGridWithNewStart","isStartNode","getNewGridWithNewEnd","handleMouseOut","handleMouseEnter","animateNodeList","visitedNodesInOrder","shortestPathInOrder","speed","simulatorSpeed","i","length","setTimeout","animateShortestPath","document","getElementById","className","resetGridStyles","currentRow","newNode","createNewNode","push","visualizeAlgorithm","activeAlgorithm","getResultPath","resetObstacles","newStart","newEnd","render","map","rowId","nodeId","g","Infinity","h","isVisited","neighborNodes","parentNode","slice","scanningNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\n\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 17;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 18;\nconst GRID_COL_LENGTH = 40;\nconst SIMULATION_SPEED = 50;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      startCancelPos: {},\n      endCancelPos: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false,\n    };\n  }\n\n  componentDidMount() {\n    const startPos = {\n      row: START_NODE_ROW,\n      col: START_NODE_COL,\n    };\n    const endPos = {\n      row: END_NODE_ROW,\n      col: END_NODE_COL,\n    };\n    const grid = this.createGrid(startPos, endPos);\n    this.setState({ savedGrid: grid });\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const {\n      grid,\n      startNode,\n      endNode,\n      mouseHoldsStart,\n      mouseHoldsEnd,\n      disableClicking,\n    } = this.state;\n\n    // Alogrithm in progress don't allow clicking\n    if (disableClicking || mouseHoldsStart || mouseHoldsEnd) return;\n    // Check to see if the mouse clicked on the start\n    // or end point\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true,\n      });\n      console.log(this.state.savedGrid);\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true,\n        startCancelPos: { row: row, col: col },\n        endCancelPos: { row: row, col: col },\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // Check to see if the grid spot is already occupied\n    // if so cancel\n\n    // If the user releases the start or end on a grid\n    // set the start on that grid\n    const { grid } = this.state;\n    const node = this.state.grid[row][col];\n    if (this.state.mouseHoldsStart) {\n      // Check to see if the grid spot is already occupied\n      // if so cancel\n      if (node.isEndNode || node.isObstacle) {\n        const newGrid = this.getNewGridWithNewStart(grid, row, col);\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid,\n        });\n\n        return;\n      }\n      this.setState({ startNode: this.state.grid[row][col] });\n    } else if (this.state.mouseHoldsEnd) {\n      if (node.isStartNode || node.isObstacle) {\n        const endCancelPos = this.state.endCancelPos;\n        const newGrid = getNewGridWithNewEnd(\n          this.state.grid,\n          endCancelPos.row,\n          endCancelPos.col\n        );\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid,\n        });\n\n        return;\n      }\n      this.setState({ endNode: this.state.grid[row][col] });\n    }\n\n    this.setState({\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      mouseIsPressed: false,\n    });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    const { grid } = this.state;\n\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    if (this.state.mouseHoldsEnd) {\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    const { grid } = this.state;\n\n    // If we enter a new grid with the start held, generate a new start\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // Toogle the obstacles\n    else {\n      if (grid[row][col].isStartNode || grid[row][col].isEndNode) return;\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    const speed = SIMULATION_SPEED / this.props.simulatorSpeed;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, speed * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, speed * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  resetGridStyles(grid) {\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = grid[row][col];\n        if (!node.isStartNode && !node.isEndNode) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node\";\n        }\n      }\n    }\n  }\n\n  createGrid(startPos, endPos) {\n    // Create a new grid which holds nodes\n    const grid = [];\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      const currentRow = [];\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const newNode = createNewNode(row, col);\n        // If the position is at the designated start\n        // or end, add the start and node to that cell\n        if (row == startPos.row && col == startPos.col) {\n          newNode.isStartNode = true;\n          this.setState({ startNode: newNode });\n        }\n        if (row == endPos.row && col == endPos.col) {\n          newNode.isEndNode = true;\n          this.setState({ endNode: newNode });\n        }\n\n        currentRow.push(newNode);\n      }\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  visualizeAlgorithm(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const { activeAlgorithm } = this.props;\n\n    console.log(grid);\n\n    if (activeAlgorithm == \"astar\")\n      visitedNodesInOrder = astar(grid, startNode, endNode);\n    else if (activeAlgorithm == \"dijkstra\")\n      var visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    else if (activeAlgorithm == \"gbf\")\n      var visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    else if (activeAlgorithm == \"bfs\")\n      var visitedNodesInOrder = bfs(grid, startNode, endNode);\n    else if (activeAlgorithm == \"dfs\")\n      var visitedNodesInOrder = dfs(grid, startNode, endNode);\n\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  resetObstacles() {\n    const { startNode, endNode } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col,\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col,\n    };\n\n    const newGrid = this.createGrid(startPos, endPos);\n    const newStart = newGrid[startNode.row][startNode.col];\n    const newEnd = newGrid[endNode.row][endNode.col];\n    newStart.isStartNode = true;\n    newEnd.isEndNode = true;\n    this.setState({\n      startNode: newStart,\n      endNode: newEnd,\n      grid: newGrid,\n      disableClicking: false,\n    });\n  }\n\n  render() {\n    const { grid, mouseIsPressed, startNode, endNode } = this.state;\n    return (\n      <>\n        <div className=\"button\">\n          <button\n            onClick={() => this.visualizeAlgorithm(grid, startNode, endNode)}\n          >\n            Simulate {this.props.activeAlgorithm} at{\" \"}\n            {this.props.simulatorSpeed * 100}%\n          </button>\n        </div>\n        <div className=\"button\">\n          <button\n            onClick={() => {\n              this.resetGridStyles(grid);\n              this.resetObstacles();\n            }}\n          >\n            Reset Obstacles\n          </button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseOut={(row, col) => this.handleMouseOut(row, col)}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={(row, col) => this.handleMouseUp(row, col)}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: false,\n    isEndNode: false,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStartNode: !node.isStartNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isEndNode: !node.isEndNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getResultPath = (endNode) => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return [];\n\n  // Get the shortest path by backtracking\n  // each node\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};\n"]},"metadata":{},"sourceType":"module"}