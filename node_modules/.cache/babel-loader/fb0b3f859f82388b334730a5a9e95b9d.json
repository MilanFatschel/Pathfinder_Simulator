{"ast":null,"code":"// A* Algorithm\n// Returns list of nodes that have been visited, and\n// each of the nodes' parent node which will be used\n// for creating our final shortest path\nexport function astar(startNode, endNode) {\n  // Inital check on our parameters\n  if (!startNode || !endNode || startNode === endNode) {\n    return false;\n  } // Create visited array for visualization\n\n\n  const visitedNodes = []; // Start by adding our start Node\n  // Calculate initial g,h, and f\n\n  startNode.g = 0;\n  startNode.h = getEuclideanDistance(startNode, endNode);\n  startNode.f = startNode.g + startNode.h; // Push in startNode as first in our list\n\n  const nodeList = [];\n  nodeList.push(startNode); // A* algorithm starts here....\n\n  while (nodeList.length > 0) {\n    // Normally we would use a priority queue here to omptimize the\n    // algorithm instead of sorting our list everytime. Javascript doesn't\n    // have anything built in so for simplicity will just use this method for now.\n    // A priority queue would do this for us as we add in our nodes with a min heap.\n    // Sort from greatest to least based on the heuristic function. Sorting backwards,\n    // so we can just use the pop() function on our list to remove the next queued node easily.\n    nodeList.sort((a, b) => a.f < b.f ? 1 : -1); // Check to see if the next node in the list is visited or the end node.\n    // If so remove it, we do not need to check it\n\n    while (nodeList.length > 0 && (nodeList[nodeList.length - 1].isVisited || nodeList[nodeList.length - 1] === endNode)) {\n      // Check to see if we are finished/at the end node\n      if (nodeList[nodeList.length - 1] === endNode) {\n        console.log(\"Finished\");\n        console.log(visitedNodes);\n        return visitedNodes;\n      }\n\n      nodeList.pop();\n    } // Make sure our list is not empty\n\n\n    if (nodeList.length > 0) {\n      // Mark current node as visited, add to visited array\n      const currentNode = nodeList[nodeList.length - 1];\n      currentNode.isVisited = true;\n      visitedNodes.push(currentNode);\n\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\n        // Get current neighbor being scanned\n        var nodeNeighbor = currentNode.neighborNodes[i]; // If the node neighbor has not been visited and is not an\n        // obstacle add it to the node list\n\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.obstacle) nodeList.push(nodeNeighbor); // Calculate possible lower g value\n\n        var possibleLowerG = currentNode.g + getEuclideanDistance(currentNode, nodeNeighbor); // If lower, update the current g and the parent.\n        // Recalculate the new h\n\n        if (possibleLowerG < nodeNeighbor.g) {\n          nodeNeighbor.parentNode = currentNode;\n          nodeNeighbor.g = possibleLowerG;\n          nodeNeighbor.h = getEuclideanDistance(nodeNeighbor, endNode); // f(n) = g(n) + h(n)\n\n          nodeNeighbor.f = nodeNeighbor.g + nodeNeighbor.h;\n        }\n      }\n    } else {\n      break;\n    }\n  }\n} // Euclidean hueristic function\n\nconst getEuclideanDistance = (nodeA, nodeB) => {\n  return sqrt((nodeA.col - nodeB.col) * (nodeA.col - nodeB.col) + (nodeA.row - nodeB.row) * (nodeA.row - nodeB.row));\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/algorithms/astar.js"],"names":["astar","startNode","endNode","visitedNodes","g","h","getEuclideanDistance","f","nodeList","push","length","sort","a","b","isVisited","console","log","pop","currentNode","i","neighborNodes","nodeNeighbor","obstacle","possibleLowerG","parentNode","nodeA","nodeB","sqrt","col","row"],"mappings":"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","sourcesContent":["// A* Algorithm\n// Returns list of nodes that have been visited, and\n// each of the nodes' parent node which will be used\n// for creating our final shortest path\n\nexport function astar(startNode, endNode) {\n  // Inital check on our parameters\n  if (!startNode || !endNode || startNode === endNode) {\n    return false;\n  }\n\n  // Create visited array for visualization\n  const visitedNodes = [];\n\n  // Start by adding our start Node\n  // Calculate initial g,h, and f\n  startNode.g = 0;\n  startNode.h = getEuclideanDistance(startNode, endNode);\n  startNode.f = startNode.g + startNode.h;\n\n  // Push in startNode as first in our list\n  const nodeList = [];\n  nodeList.push(startNode);\n\n  // A* algorithm starts here....\n  while (nodeList.length > 0) {\n    // Normally we would use a priority queue here to omptimize the\n    // algorithm instead of sorting our list everytime. Javascript doesn't\n    // have anything built in so for simplicity will just use this method for now.\n    // A priority queue would do this for us as we add in our nodes with a min heap.\n\n    // Sort from greatest to least based on the heuristic function. Sorting backwards,\n    // so we can just use the pop() function on our list to remove the next queued node easily.\n    nodeList.sort((a, b) => (a.f < b.f ? 1 : -1));\n\n    // Check to see if the next node in the list is visited or the end node.\n    // If so remove it, we do not need to check it\n    while (\n      nodeList.length > 0 &&\n      (nodeList[nodeList.length - 1].isVisited ||\n        nodeList[nodeList.length - 1] === endNode)\n    ) {\n      // Check to see if we are finished/at the end node\n      if (nodeList[nodeList.length - 1] === endNode) {\n        console.log(\"Finished\");\n        console.log(visitedNodes);\n        return visitedNodes;\n      }\n      nodeList.pop();\n    }\n\n    // Make sure our list is not empty\n    if (nodeList.length > 0) {\n      // Mark current node as visited, add to visited array\n      const currentNode = nodeList[nodeList.length - 1];\n      currentNode.isVisited = true;\n      visitedNodes.push(currentNode);\n\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\n        // Get current neighbor being scanned\n        var nodeNeighbor = currentNode.neighborNodes[i];\n\n        // If the node neighbor has not been visited and is not an\n        // obstacle add it to the node list\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.obstacle)\n          nodeList.push(nodeNeighbor);\n\n        // Calculate possible lower g value\n        var possibleLowerG =\n          currentNode.g + getEuclideanDistance(currentNode, nodeNeighbor);\n\n        // If lower, update the current g and the parent.\n        // Recalculate the new h\n        if (possibleLowerG < nodeNeighbor.g) {\n          nodeNeighbor.parentNode = currentNode;\n          nodeNeighbor.g = possibleLowerG;\n          nodeNeighbor.h = getEuclideanDistance(nodeNeighbor, endNode);\n\n          // f(n) = g(n) + h(n)\n          nodeNeighbor.f = nodeNeighbor.g + nodeNeighbor.h;\n        }\n      }\n    } else {\n      break;\n    }\n  }\n}\n\n// Euclidean hueristic function\nconst getEuclideanDistance = (nodeA, nodeB) => {\n  return sqrt(\n    (nodeA.col - nodeB.col) * (nodeA.col - nodeB.col) +\n      (nodeA.row - nodeB.row) * (nodeA.row - nodeB.row)\n  );\n};\n"]},"metadata":{},"sourceType":"module"}