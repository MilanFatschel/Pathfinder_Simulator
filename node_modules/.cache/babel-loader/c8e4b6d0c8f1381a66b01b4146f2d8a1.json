{"ast":null,"code":"import MinHeap from \"../structures/heap\"; // A* Algorithm\n// Returns list of nodes that have been visited, and\n// each of the nodes' parent node which will be used\n// for creating our final shortest path\n\nexport function astar(grid, startNode, endNode) {\n  // Inital check on our parameters\n  if (!startNode || !endNode || startNode === endNode) {\n    return false;\n  } // Add each nodes' neighbors before\n  // starting\n\n\n  addNeighborNodes(grid); // Create visited array for visualization\n\n  const visitedNodes = []; // Start by adding our start Node\n  // Calculate initial g,h, and f\n\n  startNode.g = 0;\n  startNode.h = getEuclideanDistance(startNode, endNode);\n  startNode.f = startNode.g + startNode.h; // Push in startNode as first in our min heap\n\n  const nodeHeap = new MinHeap();\n  nodeHeap.insert(startNode); // A* algorithm starts here....\n\n  while (nodeHeap.length > 0) {\n    // Normally we would use a priority queue here to omptimize the\n    // algorithm instead of sorting our list everytime. Javascript doesn't\n    // have anything built in so for simplicity will just use this method for now.\n    // A priority queue would do this for us as we add in our nodes with a min heap.\n    // Sort from greatest to least based on the heuristic function. Sorting backwards,\n    // so we can just use the pop() function on our list to remove the next queued node easily.\n    nodeList.sort((a, b) => a.f < b.f ? 1 : -1); // Check to see if the next node in the list is visited or the end node.\n    // If so remove it, we do not need to check it\n\n    while (nodeList.length > 0 && (nodeList[nodeList.length - 1].isVisited || nodeList[nodeList.length - 1] === endNode)) {\n      // Check to see if we are finished/at the end node\n      if (nodeList[nodeList.length - 1] === endNode) {\n        return visitedNodes;\n      }\n\n      nodeList.pop();\n    } // Make sure our list is not empty\n\n\n    if (nodeList.length > 0) {\n      // Mark current node as visited, add to visited array\n      const currentNode = nodeList[nodeList.length - 1];\n      currentNode.isVisited = true; // push nodes visited into array for rendering\n      // keep start and end nodes out of list\n\n      if (currentNode !== startNode && currentNode !== endNode) visitedNodes.push(currentNode);\n\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\n        // Get current neighbor being scanned\n        var nodeNeighbor = currentNode.neighborNodes[i]; // If the node neighbor has not been visited and is not an\n        // obstacle add it to the node list\n\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle) nodeList.push(nodeNeighbor); // Calculate possible lower g value\n\n        var possibleLowerG = currentNode.g + getEuclideanDistance(currentNode, nodeNeighbor); // If lower, update the current g and the parent.\n        // Recalculate the new h\n\n        if (possibleLowerG < nodeNeighbor.g) {\n          nodeNeighbor.parentNode = currentNode;\n          nodeNeighbor.g = possibleLowerG;\n          nodeNeighbor.h = getEuclideanDistance(nodeNeighbor, endNode); // f(n) = g(n) + h(n)\n\n          nodeNeighbor.f = nodeNeighbor.g + nodeNeighbor.h;\n        }\n      }\n    } else {\n      // No solutions, show the visited nodes\n      return visitedNodes;\n    }\n  }\n} // Euclidean hueristic function\n\nconst getEuclideanDistance = (nodeA, nodeB) => {\n  return Math.sqrt((nodeA.col - nodeB.col) * (nodeA.col - nodeB.col) + (nodeA.row - nodeB.row) * (nodeA.row - nodeB.row));\n};\n\nconst addNeighborNodes = grid => {\n  // Adds each neighbor node in the grid.\n  // Have to make sure we do not run out of bounds\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (i < grid.length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n\n      if (j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n\n      if (i < grid.length - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n\n      if (i > 0 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/algorithms/astar.js"],"names":["MinHeap","astar","grid","startNode","endNode","addNeighborNodes","visitedNodes","g","h","getEuclideanDistance","f","nodeHeap","insert","length","nodeList","sort","a","b","isVisited","pop","currentNode","push","i","neighborNodes","nodeNeighbor","isObstacle","possibleLowerG","parentNode","nodeA","nodeB","Math","sqrt","col","row","j"],"mappings":"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","sourcesContent":["import MinHeap from \"../structures/heap\";\n// A* Algorithm\n// Returns list of nodes that have been visited, and\n// each of the nodes' parent node which will be used\n// for creating our final shortest path\n\nexport function astar(grid, startNode, endNode) {\n  // Inital check on our parameters\n  if (!startNode || !endNode || startNode === endNode) {\n    return false;\n  }\n\n  // Add each nodes' neighbors before\n  // starting\n  addNeighborNodes(grid);\n\n  // Create visited array for visualization\n  const visitedNodes = [];\n\n  // Start by adding our start Node\n  // Calculate initial g,h, and f\n  startNode.g = 0;\n  startNode.h = getEuclideanDistance(startNode, endNode);\n  startNode.f = startNode.g + startNode.h;\n\n  // Push in startNode as first in our min heap\n  const nodeHeap = new MinHeap();\n  nodeHeap.insert(startNode);\n\n  // A* algorithm starts here....\n  while (nodeHeap.length > 0) {\n    // Normally we would use a priority queue here to omptimize the\n    // algorithm instead of sorting our list everytime. Javascript doesn't\n    // have anything built in so for simplicity will just use this method for now.\n    // A priority queue would do this for us as we add in our nodes with a min heap.\n\n    // Sort from greatest to least based on the heuristic function. Sorting backwards,\n    // so we can just use the pop() function on our list to remove the next queued node easily.\n    nodeList.sort((a, b) => (a.f < b.f ? 1 : -1));\n\n    // Check to see if the next node in the list is visited or the end node.\n    // If so remove it, we do not need to check it\n    while (\n      nodeList.length > 0 &&\n      (nodeList[nodeList.length - 1].isVisited ||\n        nodeList[nodeList.length - 1] === endNode)\n    ) {\n      // Check to see if we are finished/at the end node\n      if (nodeList[nodeList.length - 1] === endNode) {\n        return visitedNodes;\n      }\n      nodeList.pop();\n    }\n\n    // Make sure our list is not empty\n    if (nodeList.length > 0) {\n      // Mark current node as visited, add to visited array\n      const currentNode = nodeList[nodeList.length - 1];\n      currentNode.isVisited = true;\n\n      // push nodes visited into array for rendering\n      // keep start and end nodes out of list\n      if (currentNode !== startNode && currentNode !== endNode)\n        visitedNodes.push(currentNode);\n\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\n        // Get current neighbor being scanned\n        var nodeNeighbor = currentNode.neighborNodes[i];\n\n        // If the node neighbor has not been visited and is not an\n        // obstacle add it to the node list\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle)\n          nodeList.push(nodeNeighbor);\n\n        // Calculate possible lower g value\n        var possibleLowerG =\n          currentNode.g + getEuclideanDistance(currentNode, nodeNeighbor);\n\n        // If lower, update the current g and the parent.\n        // Recalculate the new h\n        if (possibleLowerG < nodeNeighbor.g) {\n          nodeNeighbor.parentNode = currentNode;\n          nodeNeighbor.g = possibleLowerG;\n          nodeNeighbor.h = getEuclideanDistance(nodeNeighbor, endNode);\n\n          // f(n) = g(n) + h(n)\n          nodeNeighbor.f = nodeNeighbor.g + nodeNeighbor.h;\n        }\n      }\n    } else {\n      // No solutions, show the visited nodes\n      return visitedNodes;\n    }\n  }\n}\n\n// Euclidean hueristic function\nconst getEuclideanDistance = (nodeA, nodeB) => {\n  return Math.sqrt(\n    (nodeA.col - nodeB.col) * (nodeA.col - nodeB.col) +\n      (nodeA.row - nodeB.row) * (nodeA.row - nodeB.row)\n  );\n};\n\nconst addNeighborNodes = (grid) => {\n  // Adds each neighbor node in the grid.\n  // Have to make sure we do not run out of bounds\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (i < grid.length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n      if (j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n      if (i < grid.length - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n      if (i > 0 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}