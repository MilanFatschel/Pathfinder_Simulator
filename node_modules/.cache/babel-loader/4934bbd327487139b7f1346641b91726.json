{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport withNavigation from './withNavigation';\nexport default function withNavigationFocus(Component) {\n  class ComponentWithNavigationFocus extends React.Component {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"state\", {\n        isFocused: this.props.navigation.isFocused()\n      });\n    }\n\n    componentDidMount() {\n      const {\n        navigation\n      } = this.props;\n      this.subscriptions = [navigation.addListener('willFocus', () => this.setState({\n        isFocused: true\n      })), navigation.addListener('willBlur', () => this.setState({\n        isFocused: false\n      }))];\n    }\n\n    componentWillUnmount() {\n      var _this$subscriptions;\n\n      (_this$subscriptions = this.subscriptions) === null || _this$subscriptions === void 0 ? void 0 : _this$subscriptions.forEach(sub => sub.remove());\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(Component, _extends({}, this.props, {\n        isFocused: this.state.isFocused,\n        ref: this.props.onRef\n      }));\n    }\n\n  }\n\n  _defineProperty(ComponentWithNavigationFocus, \"displayName\", \"withNavigationFocus(\".concat(Component.displayName || Component.name, \")\"));\n\n  return hoistStatics(withNavigation(ComponentWithNavigationFocus, {\n    forwardRef: false\n  }), Component);\n}","map":{"version":3,"sources":["withNavigationFocus.js"],"names":["React","Component","isFocused","componentDidMount","navigation","componentWillUnmount","sub","render","onRef","hoistStatics","withNavigation","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,YAAA,MAAA,yBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;AAEA,eAAe,SAAA,mBAAA,CAAA,SAAA,EAAwC;AACrD,QAAA,4BAAA,SAA2CA,KAAK,CAAhD,SAAA,CAA2D;AAAA,IAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,YAAA,GAAA,IAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAKjD;AACNE,QAAAA,SAAS,EAAE,KAAA,KAAA,CAAA,UAAA,CAAA,SAAA;AADL,OALiD,CAAA;AAAA;;AASzDC,IAAAA,iBAAiB,GAAG;AAClB,YAAM;AAAEC,QAAAA;AAAF,UAAiB,KAAvB,KAAA;AAEA,WAAA,aAAA,GAAqB,CACnB,UAAU,CAAV,WAAA,CAAA,WAAA,EAAoC,MAClC,KAAA,QAAA,CAAc;AAAEF,QAAAA,SAAS,EAAE;AAAb,OAAd,CADF,CADmB,EAInB,UAAU,CAAV,WAAA,CAAA,UAAA,EAAmC,MACjC,KAAA,QAAA,CAAc;AAAEA,QAAAA,SAAS,EAAE;AAAb,OAAd,CADF,CAJmB,CAArB;AAQD;;AAEDG,IAAAA,oBAAoB,GAAG;AAAA,UAAA,mBAAA;;AACrB,OAAA,mBAAA,GAAA,KAAA,aAAA,MAAA,IAAA,IAAA,mBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAA,OAAA,CAA6BC,GAAD,IAASA,GAAG,CAAxC,MAAqCA,EAArC,CAAA;AACD;;AAEDC,IAAAA,MAAM,GAAG;AACP,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EACM,KADN,KAAA,EAAA;AAEE,QAAA,SAAS,EAAE,KAAA,KAAA,CAFb,SAAA;AAGE,QAAA,GAAG,EAAE,KAAA,KAAA,CAAWC;AAHlB,OAAA,CAAA,CADF;AAOD;;AAlCwD;;AADN,EAAA,eAAA,CAAA,4BAAA,EAAA,aAAA,EAAA,uBAAA,MAAA,CAGjDP,SAAS,CAATA,WAAAA,IAAyBA,SAAS,CAHe,IAAA,EAAA,GAAA,CAAA,CAAA;;AAsCrD,SAAOQ,YAAY,CACjBC,cAAc,CAAA,4BAAA,EAA+B;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAA/B,CADG,EAAnB,SAAmB,CAAnB;AAID","sourcesContent":["import React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport withNavigation from './withNavigation';\n\nexport default function withNavigationFocus(Component) {\n  class ComponentWithNavigationFocus extends React.Component {\n    static displayName = `withNavigationFocus(${\n      Component.displayName || Component.name\n    })`;\n\n    state = {\n      isFocused: this.props.navigation.isFocused(),\n    };\n\n    componentDidMount() {\n      const { navigation } = this.props;\n\n      this.subscriptions = [\n        navigation.addListener('willFocus', () =>\n          this.setState({ isFocused: true })\n        ),\n        navigation.addListener('willBlur', () =>\n          this.setState({ isFocused: false })\n        ),\n      ];\n    }\n\n    componentWillUnmount() {\n      this.subscriptions?.forEach((sub) => sub.remove());\n    }\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          isFocused={this.state.isFocused}\n          ref={this.props.onRef}\n        />\n      );\n    }\n  }\n\n  return hoistStatics(\n    withNavigation(ComponentWithNavigationFocus, { forwardRef: false }),\n    Component\n  );\n}\n"]},"metadata":{},"sourceType":"module"}