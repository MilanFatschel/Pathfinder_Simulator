{"ast":null,"code":"/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\nlet validateFormat = function validateFormat() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, ...args) {\n  validateFormat(format);\n\n  if (!condition) {\n    let error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n}\n\nexport default invariant;","map":{"version":3,"sources":["invariant.ts"],"names":["validateFormat","process","format","error","argIndex","args"],"mappings":"AAAA;;;;;;;;;;AAWA,IAAIA,cAAyC,GAAG,SAAA,cAAA,GAAY,CAA5D,CAAA;;AAEA,IAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;AACzCD,EAAAA,cAAc,GAAG,SAAA,cAAA,CAAA,MAAA,EAA2B;AAC1C,QAAIE,MAAM,KAAV,SAAA,EAA0B;AACxB,YAAM,IAAA,KAAA,CAAN,8CAAM,CAAN;AACD;AAHHF,GAAAA;AAKD;;AAED,SAAA,SAAA,CAAA,SAAA,EAAA,MAAA,EAAwD,GAAxD,IAAA,EAAwE;AACtEA,EAAAA,cAAc,CAAdA,MAAc,CAAdA;;AAEA,MAAI,CAAJ,SAAA,EAAgB;AACd,QAAA,KAAA;;AACA,QAAIE,MAAM,KAAV,SAAA,EAA0B;AACxBC,MAAAA,KAAK,GAAG,IAAA,KAAA,CAARA,+HAAQ,CAARA;AADF,KAAA,MAIO;AACL,UAAIC,QAAQ,GAAZ,CAAA;AACAD,MAAAA,KAAK,GAAG,IAAA,KAAA,CAAUD,MAAM,CAANA,OAAAA,CAAAA,KAAAA,EAAsB,MAAMG,IAAI,CAACD,QAAnDD,EAAkD,CAAhCD,CAAV,CAARC;AACAA,MAAAA,KAAK,CAALA,IAAAA,GAAAA,qBAAAA;AACD;;AAEDA,IAAAA,KAAK,CAALA,WAAAA,GAZc,CAYdA,CAZc,CAYS;;AACvB,UAAA,KAAA;AACD;AACF;;AAED,eAAA,SAAA","sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nlet validateFormat: (format?: string) => void = function () {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function (format?: string) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition: boolean, format?: string, ...args: any[]) {\n  validateFormat(format);\n\n  if (!condition) {\n    let error: Error & { framesToPop?: number };\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nexport default invariant;\n"]},"metadata":{},"sourceType":"module"}