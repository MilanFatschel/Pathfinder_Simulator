{"ast":null,"code":"import Stack from \"../structures/stack\"; // DFS Algorithm\n// Returns list of nodes that have been visited, and\n// each of the nodes' parent node which will be used\n// for creating our final path (Not necessarly shortest)\n\nexport function dfs(grid, startNode, endNode) {\n  // Inital check on our parameters\n  if (!startNode || !endNode || startNode === endNode) {\n    return false;\n  } // Add each nodes' neighbors before\n  // starting\n\n\n  addNeighborNodes(grid); // Create visited array for visualization\n\n  const visitedNodes = []; // Create a new queue to keep track of BFS\n\n  var nodeStack = new Stack();\n  nodeStack.push(startNode); // DFS algorithm starts here....\n\n  while (!nodeStack.isEmpty()) {\n    // Check to see if the next node in the queue is visited or the end node.\n    // If so remove it, we do not need to check it\n    while (!nodeStack.isEmpty() && (nodeStack.top().isVisited || nodeStack.top() === endNode)) {\n      // Check to see if we ae at the end node\n      if (nodeNeighbor == endNode) return visitedNodes;\n      nodeStack.pop();\n    } // Make sure our queue is not empty\n\n\n    if (!nodeStack.isEmpty()) {\n      // Mark current node as visited, add to visited array\n      const currentNode = nodeStack.front();\n      currentNode.isVisited = true; // push nodes visited into list for rendering\n      // keep start and end nodes out of list\n\n      if (currentNode !== startNode && currentNode !== endNode) visitedNodes.push(currentNode);\n\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\n        // Get current neighbor being scanned\n        var nodeNeighbor = currentNode.neighborNodes[i]; // If the node neighbor has not been visited and is not an\n        // obstacle, add the current node as a parent\n        // and  add it to the node list\n\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle) {\n          // Only update the parent if is has no parent yet, since\n          // BFS works in wave frontes we do not want to update\n          if (!nodeNeighbor.parentNode) nodeNeighbor.parentNode = currentNode;\n          nodeStack.push(nodeNeighbor);\n        }\n      }\n    } else {\n      // Our queue is empty and we are still trying find a path...\n      // Either there is no solution or something has gone wrong\n      return [];\n    }\n  }\n}\n\nconst addNeighborNodes = grid => {\n  // Adds each neighbor node in the grid.\n  // Have to make sure we do not run out of bounds\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (i < grid.length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n\n      if (j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n\n      if (i < grid.length - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n\n      if (i > 0 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/algorithms/dfs.js"],"names":["Stack","dfs","grid","startNode","endNode","addNeighborNodes","visitedNodes","nodeStack","push","isEmpty","top","isVisited","nodeNeighbor","pop","currentNode","front","i","neighborNodes","length","isObstacle","parentNode","j"],"mappings":"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","sourcesContent":["import Stack from \"../structures/stack\";\n\n// DFS Algorithm\n// Returns list of nodes that have been visited, and\n// each of the nodes' parent node which will be used\n// for creating our final path (Not necessarly shortest)\n\nexport function dfs(grid, startNode, endNode) {\n  // Inital check on our parameters\n  if (!startNode || !endNode || startNode === endNode) {\n    return false;\n  }\n\n  // Add each nodes' neighbors before\n  // starting\n  addNeighborNodes(grid);\n\n  // Create visited array for visualization\n  const visitedNodes = [];\n\n  // Create a new queue to keep track of BFS\n  var nodeStack = new Stack();\n  nodeStack.push(startNode);\n\n  // DFS algorithm starts here....\n  while (!nodeStack.isEmpty()) {\n    // Check to see if the next node in the queue is visited or the end node.\n    // If so remove it, we do not need to check it\n    while (\n      !nodeStack.isEmpty() &&\n      (nodeStack.top().isVisited || nodeStack.top() === endNode)\n    ) {\n      // Check to see if we ae at the end node\n      if (nodeNeighbor == endNode) return visitedNodes;\n      nodeStack.pop();\n    }\n\n    // Make sure our queue is not empty\n    if (!nodeStack.isEmpty()) {\n      // Mark current node as visited, add to visited array\n      const currentNode = nodeStack.front();\n      currentNode.isVisited = true;\n\n      // push nodes visited into list for rendering\n      // keep start and end nodes out of list\n      if (currentNode !== startNode && currentNode !== endNode)\n        visitedNodes.push(currentNode);\n\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\n        // Get current neighbor being scanned\n        var nodeNeighbor = currentNode.neighborNodes[i];\n\n        // If the node neighbor has not been visited and is not an\n        // obstacle, add the current node as a parent\n        // and  add it to the node list\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle) {\n          // Only update the parent if is has no parent yet, since\n          // BFS works in wave frontes we do not want to update\n          if (!nodeNeighbor.parentNode) nodeNeighbor.parentNode = currentNode;\n          nodeStack.push(nodeNeighbor);\n        }\n      }\n    } else {\n      // Our queue is empty and we are still trying find a path...\n      // Either there is no solution or something has gone wrong\n      return [];\n    }\n  }\n}\n\nconst addNeighborNodes = (grid) => {\n  // Adds each neighbor node in the grid.\n  // Have to make sure we do not run out of bounds\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (i < grid.length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n      if (j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n      if (i < grid.length - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n      if (i > 0 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}