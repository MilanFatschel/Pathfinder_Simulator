{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 17;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 18;\nconst GRID_COL_LENGTH = 40;\nconst SIMULATION_SPEED = 50;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false\n    };\n  }\n\n  componentDidMount() {\n    const startPos = {\n      row: START_NODE_ROW,\n      col: START_NODE_COL\n    };\n    const endPos = {\n      row: END_NODE_ROW,\n      col: END_NODE_COL\n    };\n    const grid = this.createGrid(startPos, endPos);\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const {\n      startNode,\n      endNode,\n      disableClicking\n    } = this.state; // Alogrithm in progress don't allow clicking\n\n    if (disableClicking) return; // Check to see if the mouse clicked on the start\n    // or end point\n\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true\n      });\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // If the user releases the start on a grid\n    // set the start on that grid\n    if (this.state.mouseHoldsStart) {\n      this.setState({\n        startNode: this.state.grid[row][col]\n      });\n    } else if (this.state.mouseHoldsEnd) {\n      this.setState({\n        endNode: this.state.grid[row][col]\n      });\n    }\n\n    this.setState({\n      mouseIsPressed: false\n    });\n    this.setState({\n      mouseHoldsStart: false\n    });\n    this.setState({\n      mouseHoldsEnd: false\n    });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n\n    if (this.state.mouseHoldsEnd) {\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return; // If we enter a new grid with the start held, generate a new start\n\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    } // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n        const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n        this.setState({\n          grid: newGrid\n        });\n      } // Toogle the obstacles\n      else {\n          const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid\n          });\n        }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    const speed = SIMULATION_SPEED / this.props.simulatorSpeed;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, speed * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, speed * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  resetGridStyles(grid) {\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = grid[row][col];\n\n        if (!node.isStartNode && !node.isEndNode) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node\";\n        }\n      }\n    }\n  }\n\n  createGrid(startPos, endPos) {\n    // Create a new grid which holds nodes\n    const grid = [];\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const newNode = createNewNode(row, col); // If the position is at the designated start\n        // or end, add the start and node to that cell\n\n        if (row == startPos.row && col == startPos.col) {\n          newNode.isStartNode = true;\n          this.setState({\n            startNode: newNode\n          });\n        }\n\n        if (row == endPos.row && col == endPos.col) {\n          newNode.isEndNode = true;\n          this.setState({\n            endNode: newNode\n          });\n        }\n\n        currentRow.push(newNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  visualizeAlgorithm(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const {\n      activeAlgorithm\n    } = this.props;\n    if (activeAlgorithm == \"astar\") visitedNodesInOrder = astar(grid, startNode, endNode);else if (activeAlgorithm == \"dijkstra\") var visitedNodesInOrder = dijkstra(grid, startNode, endNode);else if (activeAlgorithm == \"gbf\") var visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);else if (activeAlgorithm == \"bfs\") var visitedNodesInOrder = bfs(grid, startNode, endNode);else if (activeAlgorithm == \"dfs\") var visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  resetPath(grid) {\n    const savedGrid = grid.slice();\n    this.resetObstacles(); // Save the obstacle state of the old grid\n    // to the new grid\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const newNode = this.state.grid[row][col];\n        const oldNode = savedGrid[row][col];\n        newNode.isObstacle = oldNode.isObstacle;\n      }\n    }\n  }\n\n  resetObstacles() {\n    const {\n      startNode,\n      endNode\n    } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n    const newStart = newGrid[startNode.row][startNode.col];\n    const newEnd = newGrid[endNode.row][endNode.col];\n    newStart.isStartNode = true;\n    newEnd.isEndNode = true;\n    this.setState({\n      startNode: newStart,\n      endNode: newEnd,\n      grid: newGrid,\n      disableClicking: false\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      startNode,\n      endNode\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAlgorithm(grid, startNode, endNode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }\n    }, \"Simulate \", this.props.activeAlgorithm, \" at\", \" \", this.props.simulatorSpeed * 100, \"%\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetPath(grid, startNode, endNode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }\n    }, \"Reset Path\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        this.resetGridStyles(grid);\n        this.resetObstacles(grid, startNode, endNode);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }\n    }, \"Reset Obstacles\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          mouseIsPressed: mouseIsPressed,\n          onMouseOut: (row, col) => this.handleMouseOut(row, col),\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: (row, col) => this.handleMouseUp(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n} // const randomizeObstacles = (grid) => {\n//   // Randomly assigns obstacles\n//   for (let row = 0; row < grid.length; row++) {\n//     for (let col = 0; col < grid[row].length; col++) {\n//       if (\n//         random(1) < 0.3 &&\n//         !grid[row][col].isStartNode &&\n//         !grid[row][col].isEndNode\n//       ) {\n//         grid[i][j].isObstacle = true;\n//       }\n//     }\n//   }\n// };\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: false,\n    isEndNode: false,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStartNode: !node.isStartNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isEndNode: !node.isEndNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getResultPath = endNode => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return []; // Get the shortest path by backtracking\n  // each node\n\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","dijkstra","greedybestfirst","bfs","dfs","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_ROW_LENGTH","GRID_COL_LENGTH","SIMULATION_SPEED","Display","constructor","props","state","grid","startNode","endNode","mouseIsPressed","mouseHoldsStart","mouseHoldsEnd","disableClicking","componentDidMount","startPos","row","col","endPos","createGrid","setState","handleMouseDown","newGrid","getNewGridWithToggledObstacle","handleMouseUp","handleMouseOut","getNewGridWithNewStart","getNewGridWithNewEnd","handleMouseEnter","animateNodeList","visitedNodesInOrder","shortestPathInOrder","speed","simulatorSpeed","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","resetGridStyles","isStartNode","isEndNode","currentRow","newNode","createNewNode","push","visualizeAlgorithm","activeAlgorithm","getResultPath","resetPath","savedGrid","slice","resetObstacles","oldNode","isObstacle","newStart","newEnd","render","map","rowId","nodeId","g","Infinity","h","isVisited","neighborNodes","parentNode","scanningNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\n\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 17;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 18;\nconst GRID_COL_LENGTH = 40;\nconst SIMULATION_SPEED = 50;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false,\n    };\n  }\n\n  componentDidMount() {\n    const startPos = {\n      row: START_NODE_ROW,\n      col: START_NODE_COL,\n    };\n    const endPos = {\n      row: END_NODE_ROW,\n      col: END_NODE_COL,\n    };\n    const grid = this.createGrid(startPos, endPos);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const { startNode, endNode, disableClicking } = this.state;\n\n    // Alogrithm in progress don't allow clicking\n    if (disableClicking) return;\n\n    // Check to see if the mouse clicked on the start\n    // or end point\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true,\n      });\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true,\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // If the user releases the start on a grid\n    // set the start on that grid\n    if (this.state.mouseHoldsStart) {\n      this.setState({ startNode: this.state.grid[row][col] });\n    } else if (this.state.mouseHoldsEnd) {\n      this.setState({ endNode: this.state.grid[row][col] });\n    }\n\n    this.setState({ mouseIsPressed: false });\n    this.setState({ mouseHoldsStart: false });\n    this.setState({ mouseHoldsEnd: false });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    if (this.state.mouseHoldsEnd) {\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    // If we enter a new grid with the start held, generate a new start\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // Toogle the obstacles\n    else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    const speed = SIMULATION_SPEED / this.props.simulatorSpeed;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, speed * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, speed * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  resetGridStyles(grid) {\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = grid[row][col];\n        if (!node.isStartNode && !node.isEndNode) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node\";\n        }\n      }\n    }\n  }\n\n  createGrid(startPos, endPos) {\n    // Create a new grid which holds nodes\n    const grid = [];\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      const currentRow = [];\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const newNode = createNewNode(row, col);\n        // If the position is at the designated start\n        // or end, add the start and node to that cell\n        if (row == startPos.row && col == startPos.col) {\n          newNode.isStartNode = true;\n          this.setState({ startNode: newNode });\n        }\n        if (row == endPos.row && col == endPos.col) {\n          newNode.isEndNode = true;\n          this.setState({ endNode: newNode });\n        }\n\n        currentRow.push(newNode);\n      }\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  visualizeAlgorithm(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const { activeAlgorithm } = this.props;\n\n    if (activeAlgorithm == \"astar\")\n      visitedNodesInOrder = astar(grid, startNode, endNode);\n    else if (activeAlgorithm == \"dijkstra\")\n      var visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    else if (activeAlgorithm == \"gbf\")\n      var visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    else if (activeAlgorithm == \"bfs\")\n      var visitedNodesInOrder = bfs(grid, startNode, endNode);\n    else if (activeAlgorithm == \"dfs\")\n      var visitedNodesInOrder = dfs(grid, startNode, endNode);\n\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  resetPath(grid) {\n    const savedGrid = grid.slice();\n    this.resetObstacles();\n\n    // Save the obstacle state of the old grid\n    // to the new grid\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const newNode = this.state.grid[row][col];\n        const oldNode = savedGrid[row][col];\n        newNode.isObstacle = oldNode.isObstacle;\n      }\n    }\n  }\n\n  resetObstacles() {\n    const { startNode, endNode } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col,\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col,\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n    const newStart = newGrid[startNode.row][startNode.col];\n    const newEnd = newGrid[endNode.row][endNode.col];\n    newStart.isStartNode = true;\n    newEnd.isEndNode = true;\n    this.setState({\n      startNode: newStart,\n      endNode: newEnd,\n      grid: newGrid,\n      disableClicking: false,\n    });\n  }\n\n  render() {\n    const { grid, mouseIsPressed, startNode, endNode } = this.state;\n    return (\n      <>\n        <div className=\"button\">\n          <button\n            onClick={() => this.visualizeAlgorithm(grid, startNode, endNode)}\n          >\n            Simulate {this.props.activeAlgorithm} at{\" \"}\n            {this.props.simulatorSpeed * 100}%\n          </button>\n        </div>\n        <div className=\"button\">\n          <button onClick={() => this.resetPath(grid, startNode, endNode)}>\n            Reset Path\n          </button>\n        </div>\n        <div className=\"button\">\n          <button\n            onClick={() => {\n              this.resetGridStyles(grid);\n              this.resetObstacles(grid, startNode, endNode);\n            }}\n          >\n            Reset Obstacles\n          </button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseOut={(row, col) => this.handleMouseOut(row, col)}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={(row, col) => this.handleMouseUp(row, col)}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\n// const randomizeObstacles = (grid) => {\n//   // Randomly assigns obstacles\n//   for (let row = 0; row < grid.length; row++) {\n//     for (let col = 0; col < grid[row].length; col++) {\n//       if (\n//         random(1) < 0.3 &&\n//         !grid[row][col].isStartNode &&\n//         !grid[row][col].isEndNode\n//       ) {\n//         grid[i][j].isObstacle = true;\n//       }\n//     }\n//   }\n// };\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: false,\n    isEndNode: false,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStartNode: !node.isStartNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isEndNode: !node.isEndNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getResultPath = (endNode) => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return [];\n\n  // Get the shortest path by backtracking\n  // each node\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};\n"]},"metadata":{},"sourceType":"module"}