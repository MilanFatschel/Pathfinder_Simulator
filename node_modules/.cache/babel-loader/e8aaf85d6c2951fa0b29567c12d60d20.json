{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 23;\nconst GRID_COL_LENGTH = 40;\nconst ANIMATION_SPEED = 75;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid({}, {}, []);\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, ANIMATION_SPEED * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, ANIMATION_SPEED * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  resetPath(grid) {\n    let start = {};\n    let end = {};\n    let obstacles = [];\n\n    for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n      for (let j = 0; j < GRID_COL_LENGTH; j++) {\n        if (grid[i][j].isStartNode) start = grid[i][j];\n        if (grid[i][j].isEndNode) end = grid[i][j];\n        if (grid[i][j].isObstacle) obstacles.push(grid[i][j]);\n        const node = grid[i][j];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node\";\n      }\n    }\n\n    const newGrid = createGrid(start, end, obstacles);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  visualizeAstar(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDijkstra(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeGreedy(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeBFS(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDFS(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAstar(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, \"A*\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, \"Dijkstra\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeGreedy(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, \"Greedy-best-first\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeBFS(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, \"BFS\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDFS(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, \"DFS\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetPath(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, \"Reset Path\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst createGrid = (start, end, obstacles) => {\n  // Create a new grid which holds nodes\n  const grid = [];\n\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      let newNode = createNewNode(row, col); // Check for start and end nodes\n\n      if (row == start.row && col == start.col) newNode = start;\n      if (row == end.row && col == end.col) newNode = end; // Check for obstacles if there are any\n\n      if (obstacles.length > 0) {\n        if (row == obstacles[0].row && col == obstacles[0].col) {\n          newNode = obstacles[0];\n          obstacles.splice(0, 1);\n        }\n      }\n\n      currentRow.push(newNode);\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getResultPath = endNode => {\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","dijkstra","greedybestfirst","bfs","dfs","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_ROW_LENGTH","GRID_COL_LENGTH","ANIMATION_SPEED","Display","constructor","props","state","grid","mouseIsPressed","componentDidMount","createGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithToggledObstacle","handleMouseUp","handleMouseEnter","animateNodeList","visitedNodesInOrder","shortestPathInOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","resetPath","start","end","obstacles","j","isStartNode","isEndNode","isObstacle","push","visualizeAstar","startNode","endNode","getResultPath","visualizeDijkstra","visualizeGreedy","visualizeBFS","visualizeDFS","render","map","rowId","nodeId","currentRow","newNode","createNewNode","splice","g","Infinity","h","isVisited","neighborNodes","parentNode","slice","scanningNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\n\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 23;\nconst GRID_COL_LENGTH = 40;\nconst ANIMATION_SPEED = 75;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid({}, {}, []);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, ANIMATION_SPEED * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, ANIMATION_SPEED * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  resetPath(grid) {\n    let start = {};\n    let end = {};\n    let obstacles = [];\n\n    for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n      for (let j = 0; j < GRID_COL_LENGTH; j++) {\n        if (grid[i][j].isStartNode) start = grid[i][j];\n        if (grid[i][j].isEndNode) end = grid[i][j];\n        if (grid[i][j].isObstacle) obstacles.push(grid[i][j]);\n\n        const node = grid[i][j];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node\";\n      }\n    }\n    const newGrid = createGrid(start, end, obstacles);\n    this.setState({ grid: newGrid });\n  }\n\n  visualizeAstar(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDijkstra(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeGreedy(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeBFS(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDFS(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <>\n        <button onClick={() => this.visualizeAstar(grid)}>A*</button>\n        <button onClick={() => this.visualizeDijkstra(grid)}>Dijkstra</button>\n        <button onClick={() => this.visualizeGreedy(grid)}>\n          Greedy-best-first\n        </button>\n        <button onClick={() => this.visualizeBFS(grid)}>BFS</button>\n        <button onClick={() => this.visualizeDFS(grid)}>DFS</button>\n        <button onClick={() => this.resetPath(grid)}>Reset Path</button>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst createGrid = (start, end, obstacles) => {\n  // Create a new grid which holds nodes\n  const grid = [];\n\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      let newNode = createNewNode(row, col);\n\n      // Check for start and end nodes\n      if (row == start.row && col == start.col) newNode = start;\n      if (row == end.row && col == end.col) newNode = end;\n\n      // Check for obstacles if there are any\n      if (obstacles.length > 0) {\n        if (row == obstacles[0].row && col == obstacles[0].col) {\n          newNode = obstacles[0];\n          obstacles.splice(0, 1);\n        }\n      }\n      currentRow.push(newNode);\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getResultPath = (endNode) => {\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};\n"]},"metadata":{},"sourceType":"module"}