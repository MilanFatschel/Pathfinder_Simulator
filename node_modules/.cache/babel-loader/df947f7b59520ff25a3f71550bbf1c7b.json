{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutDataStructure/AboutStack.js\";\nimport React, { Component } from \"react\";\nimport \"./AboutDataStructure.css\";\nexport default class AboutStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tutorial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"The Stack\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"data-image\",\n      src: require(\"./../../gifs/stack.gif\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"paragraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, \"The stack can be thought of a physical stack of books. As you place books on top of each other you can only take off the top item in order to remove things from it. This allows us to keep the Last-In First-Out ordering and also makes removing and inserting from the stack very efficient (constant, since we only need to keep track of the top item). Here, push adds an item and pop removes an item. The peek method returns the current top item in the stack. In our case, the red items in the above image can be thought of each grid cell in the search. The stack can be seen in action with Depth-First-Search algorithm. \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 22\n      }\n    }), \" The code for the implemented stack can be found here:\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://www.github.com/MilanFatschel\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    }, \"Stack\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"close\",\n      onClick: () => {\n        this.props.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"Close\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutDataStructure/AboutStack.js"],"names":["React","Component","AboutStack","constructor","props","state","render","require","close"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,0BAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAChDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AACE,MAAA,SAAS,EAAC,YADZ;AAEE,MAAA,GAAG,EAAEC,OAAO,CAAC,wBAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAME;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,koBAUa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVb,yEAYE;AAAG,MAAA,IAAI,EAAC,sCAAR;AAA+C,MAAA,MAAM,EAAC,QAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAZF,CANF,eAsBE;AACE,MAAA,SAAS,EAAC,OADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKH,KAAL,CAAWI,KAAX;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAtBF,CADF;AAiCD;;AAxC+C","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./AboutDataStructure.css\";\n\nexport default class AboutStack extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"tutorial\">\n        <h3 className=\"title\">The Stack</h3>\n        <img\n          className=\"data-image\"\n          src={require(\"./../../gifs/stack.gif\")}\n        ></img>\n        <p className=\"paragraph\">\n          The stack can be thought of a physical stack of books. As you place\n          books on top of each other you can only take off the top item in order\n          to remove things from it. This allows us to keep the Last-In First-Out\n          ordering and also makes removing and inserting from the stack very\n          efficient (constant, since we only need to keep track of the top\n          item). Here, push adds an item and pop removes an item. The peek\n          method returns the current top item in the stack. In our case, the red\n          items in the above image can be thought of each grid cell in the\n          search. The stack can be seen in action with Depth-First-Search\n          algorithm. <br></br> The code for the implemented stack can be found\n          here:\n          <a href=\"https://www.github.com/MilanFatschel\" target=\"_blank\">\n            Stack\n          </a>\n        </p>\n        <button\n          className=\"close\"\n          onClick={() => {\n            this.props.close();\n          }}\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}