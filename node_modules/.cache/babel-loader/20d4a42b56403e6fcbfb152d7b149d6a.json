{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutAlgorithm/AboutDFS.js\";\nimport React, { Component } from \"react\";\nimport \"./AboutAlgorithm.css\";\nexport default class AboutDFS extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tutorial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"Depth-First-Search\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"algorithm-image\",\n      src: require(\"./../../gifs/dfsslow.gif\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"paragraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, \"The Depth-First-Search, while very applicable and useful in many situations, is not a great algorithm for pathfinding. The DFS has the characteristic of exploring whatever it sees first. This results in no real direction and a guess of where the end node is. The result is a random path as the DFS will eventually reach the end as it seaches all nodes and updates its parents. A stack or recursion is used to keep track of these nodes to keep the \\\"First-come First-serve\\\" order. As nodes are visited they will be removed from the stack. The DFS would not be used in pathfinding but this still provides a nice visual of how the algorithm searches graphs.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }), \" The code for the implementation of DFS can be found here:\\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://github.com/ignlg/heap-js/blob/master/dist/heap-js.es5.js\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    }, \"Depth-First-Search\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"next\",\n      onClick: () => {\n        this.props.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, \"Close\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutAlgorithm/AboutDFS.js"],"names":["React","Component","AboutDFS","constructor","props","state","render","require","close"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,sBAAP;AAEA,eAAe,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAC9CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,GAAG,EAAEC,OAAO,CAAC,0BAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAME;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uqBAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,iFAYE;AACE,MAAA,IAAI,EAAC,kEADP;AAEE,MAAA,MAAM,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAZF,CANF,eAyBE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKH,KAAL,CAAWI,KAAX;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAzBF,CADF;AAoCD;;AA3C6C","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./AboutAlgorithm.css\";\n\nexport default class AboutDFS extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"tutorial\">\n        <h3 className=\"title\">Depth-First-Search</h3>\n        <img\n          className=\"algorithm-image\"\n          src={require(\"./../../gifs/dfsslow.gif\")}\n        ></img>\n        <p className=\"paragraph\">\n          The Depth-First-Search, while very applicable and useful in many\n          situations, is not a great algorithm for pathfinding. The DFS has the\n          characteristic of exploring whatever it sees first. This results in no\n          real direction and a guess of where the end node is. The result is a\n          random path as the DFS will eventually reach the end as it seaches all\n          nodes and updates its parents. A stack or recursion is used to keep\n          track of these nodes to keep the \"First-come First-serve\" order. As\n          nodes are visited they will be removed from the stack. The DFS would\n          not be used in pathfinding but this still provides a nice visual of\n          how the algorithm searches graphs.\n          <br /> The code for the implementation of DFS can be found here:&nbsp;\n          <a\n            href=\"https://github.com/ignlg/heap-js/blob/master/dist/heap-js.es5.js\"\n            target=\"_blank\"\n          >\n            Depth-First-Search\n          </a>\n        </p>\n        <button\n          className=\"next\"\n          onClick={() => {\n            this.props.close();\n          }}\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}