{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 17;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 18;\nconst GRID_COL_LENGTH = 40;\nconst SIMULATION_SPEED = 5;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({\n      grid\n    });\n    this.setState({\n      startNode: grid[START_NODE_ROW][START_NODE_COL]\n    });\n    this.setState({\n      endNode: grid[END_NODE_ROW][END_NODE_COL]\n    });\n    console.log(this.props.simulationSpeed);\n    console.log(this.props.simulationSpeed * SIMULATION_SPEED);\n  }\n\n  handleMouseDown(row, col) {\n    const {\n      startNode,\n      endNode,\n      disableClicking\n    } = this.state; // Alogrithm in progress don't allow clicking\n\n    if (disableClicking) return; // Check to see if the mouse clicked on the start\n    // or end point\n\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true\n      });\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // If the user releases the start on a grid\n    // set the start on that grid\n    if (this.state.mouseHoldsStart) {\n      this.setState({\n        startNode: this.state.grid[row][col]\n      });\n    } else if (this.state.mouseHoldsEnd) {\n      this.setState({\n        endNode: this.state.grid[row][col]\n      });\n    }\n\n    this.setState({\n      mouseIsPressed: false\n    });\n    this.setState({\n      mouseHoldsStart: false\n    });\n    this.setState({\n      mouseHoldsEnd: false\n    });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n\n    if (this.state.mouseHoldsEnd) {\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return; // If we enter a new grid with the start held, generate a new start\n\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    } // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n        const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n        this.setState({\n          grid: newGrid\n        });\n      } // Toogle the obstacles\n      else {\n          const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid\n          });\n        }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    const speed = SIMULATION_SPEED / this.props.simulatorSpeed;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, speed * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, speed * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  visualizeAlgorithm(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const {\n      activeAlgorithm\n    } = this.props;\n    if (activeAlgorithm == \"astar\") visitedNodesInOrder = astar(grid, startNode, endNode);else if (activeAlgorithm == \"dijkstra\") var visitedNodesInOrder = dijkstra(grid, startNode, endNode);else if (activeAlgorithm == \"gbf\") var visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);else if (activeAlgorithm == \"bfs\") var visitedNodesInOrder = bfs(grid, startNode, endNode);else if (activeAlgorithm == \"dfs\") var visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDijkstra(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeGreedy(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeBFS(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDFS(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    }); // Grab our values and call the animate function for visualization\n\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      startNode,\n      endNode\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, this.props.activeAlgorithm), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }, this.props.simulatorSpeed), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAlgorithm(grid, startNode, endNode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }, \"Simulate Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          mouseIsPressed: mouseIsPressed,\n          onMouseOut: (row, col) => this.handleMouseOut(row, col),\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: (row, col) => this.handleMouseUp(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n} // const randomizeObstacles = (grid) => {\n//   // Randomly assigns obstacles\n//   for (let row = 0; row < grid.length; row++) {\n//     for (let col = 0; col < grid[row].length; col++) {\n//       if (\n//         random(1) < 0.3 &&\n//         !grid[row][col].isStartNode &&\n//         !grid[row][col].isEndNode\n//       ) {\n//         grid[i][j].isObstacle = true;\n//       }\n//     }\n//   }\n// };\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStartNode: !node.isStartNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isEndNode: !node.isEndNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getResultPath = endNode => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return []; // Get the shortest path by backtracking\n  // each node\n\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","dijkstra","greedybestfirst","bfs","dfs","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_ROW_LENGTH","GRID_COL_LENGTH","SIMULATION_SPEED","Display","constructor","props","state","grid","startNode","endNode","mouseIsPressed","mouseHoldsStart","mouseHoldsEnd","disableClicking","componentDidMount","createGrid","setState","console","log","simulationSpeed","handleMouseDown","row","col","newGrid","getNewGridWithToggledObstacle","handleMouseUp","handleMouseOut","getNewGridWithNewStart","getNewGridWithNewEnd","handleMouseEnter","animateNodeList","visitedNodesInOrder","shortestPathInOrder","speed","simulatorSpeed","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeAlgorithm","activeAlgorithm","getResultPath","visualizeDijkstra","visualizeGreedy","visualizeBFS","visualizeDFS","render","map","rowId","nodeId","isStartNode","isEndNode","isObstacle","currentRow","push","createNewNode","newNode","g","Infinity","h","isVisited","neighborNodes","parentNode","slice","scanningNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\n\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 17;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 18;\nconst GRID_COL_LENGTH = 40;\nconst SIMULATION_SPEED = 5;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({ grid });\n    this.setState({ startNode: grid[START_NODE_ROW][START_NODE_COL] });\n    this.setState({ endNode: grid[END_NODE_ROW][END_NODE_COL] });\n\n    console.log(this.props.simulationSpeed);\n    console.log(this.props.simulationSpeed * SIMULATION_SPEED);\n  }\n\n  handleMouseDown(row, col) {\n    const { startNode, endNode, disableClicking } = this.state;\n\n    // Alogrithm in progress don't allow clicking\n    if (disableClicking) return;\n\n    // Check to see if the mouse clicked on the start\n    // or end point\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true,\n      });\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true,\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // If the user releases the start on a grid\n    // set the start on that grid\n    if (this.state.mouseHoldsStart) {\n      this.setState({ startNode: this.state.grid[row][col] });\n    } else if (this.state.mouseHoldsEnd) {\n      this.setState({ endNode: this.state.grid[row][col] });\n    }\n\n    this.setState({ mouseIsPressed: false });\n    this.setState({ mouseHoldsStart: false });\n    this.setState({ mouseHoldsEnd: false });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    if (this.state.mouseHoldsEnd) {\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    // If we enter a new grid with the start held, generate a new start\n    if (this.state.mouseHoldsStart) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // Toogle the obstacles\n    else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    const speed = SIMULATION_SPEED / this.props.simulatorSpeed;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, speed * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, speed * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  visualizeAlgorithm(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const { activeAlgorithm } = this.props;\n\n    if (activeAlgorithm == \"astar\")\n      visitedNodesInOrder = astar(grid, startNode, endNode);\n    else if (activeAlgorithm == \"dijkstra\")\n      var visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    else if (activeAlgorithm == \"gbf\")\n      var visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    else if (activeAlgorithm == \"bfs\")\n      var visitedNodesInOrder = bfs(grid, startNode, endNode);\n    else if (activeAlgorithm == \"dfs\")\n      var visitedNodesInOrder = dfs(grid, startNode, endNode);\n\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDijkstra(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeGreedy(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeBFS(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDFS(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    // Grab our values and call the animate function for visualization\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed, startNode, endNode } = this.state;\n    return (\n      <>\n        <div>{this.props.activeAlgorithm}</div>\n        <div>{this.props.simulatorSpeed}</div>\n        <button\n          onClick={() => this.visualizeAlgorithm(grid, startNode, endNode)}\n        >\n          Simulate Algorithm\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseOut={(row, col) => this.handleMouseOut(row, col)}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={(row, col) => this.handleMouseUp(row, col)}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\n// const randomizeObstacles = (grid) => {\n//   // Randomly assigns obstacles\n//   for (let row = 0; row < grid.length; row++) {\n//     for (let col = 0; col < grid[row].length; col++) {\n//       if (\n//         random(1) < 0.3 &&\n//         !grid[row][col].isStartNode &&\n//         !grid[row][col].isEndNode\n//       ) {\n//         grid[i][j].isObstacle = true;\n//       }\n//     }\n//   }\n// };\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStartNode: !node.isStartNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isEndNode: !node.isEndNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getResultPath = (endNode) => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return [];\n\n  // Get the shortest path by backtracking\n  // each node\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};\n"]},"metadata":{},"sourceType":"module"}