{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutAlgorithm/AboutDijkstra.js\";\nimport React, { Component } from \"react\";\nimport \"./AboutAlgorithm.css\";\nexport default class AboutDijkstra extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tutorial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"Dijkstra\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"algorithm-image\",\n      src: require(\"./../../gifs/dijkstraslow.gif\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"paragraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, \"Dijkstra aims to find the shortest path from the start node to the end node. It explores each node starting with the ones with the smallest heuristic cost and will find the shortest path to each node. The huerstic function for the implemented algorithm was simply the known distance g(n) from the start node to the current explored node (which starts at 0). This formula f(n) = h(n), gives us an estimation of how close the path of the explored node (marked in blue above) is to the start node. Dijkstra will visit each unvisted node and update it if it has smaller f(n). As a result, Dijkstra tries to cover as many cells as it can until it reaches the end node, staying as close as it can to the start node. A min heap is used to efficiently sort each one of the nodes by their smallest hueristic function which are removed when the nodes' neighbors have all been visited. Dijkstra is regarded as one of the most commonly used pathfinding algorithms.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }), \" The code for the implementation of Dijkstra can be found here:\\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://github.com/ignlg/heap-js/blob/master/dist/heap-js.es5.js\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }\n    }, \"Dijkstra\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"next\",\n      onClick: () => {\n        this.props.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"Close\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutAlgorithm/AboutDijkstra.js"],"names":["React","Component","AboutDijkstra","constructor","props","state","render","require","close"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,sBAAP;AAEA,eAAe,MAAMC,aAAN,SAA4BD,SAA5B,CAAsC;AACnDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,GAAG,EAAEC,OAAO,CAAC,+BAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAME;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,g9BAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,sFAiBE;AACE,MAAA,IAAI,EAAC,kEADP;AAEE,MAAA,MAAM,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjBF,CANF,eA8BE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKH,KAAL,CAAWI,KAAX;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA9BF,CADF;AAyCD;;AAhDkD","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./AboutAlgorithm.css\";\n\nexport default class AboutDijkstra extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"tutorial\">\n        <h3 className=\"title\">Dijkstra</h3>\n        <img\n          className=\"algorithm-image\"\n          src={require(\"./../../gifs/dijkstraslow.gif\")}\n        ></img>\n        <p className=\"paragraph\">\n          Dijkstra aims to find the shortest path from the start node to the end\n          node. It explores each node starting with the ones with the smallest\n          heuristic cost and will find the shortest path to each node. The\n          huerstic function for the implemented algorithm was simply the known\n          distance g(n) from the start node to the current explored node (which\n          starts at 0). This formula f(n) = h(n), gives us an estimation of how\n          close the path of the explored node (marked in blue above) is to the\n          start node. Dijkstra will visit each unvisted node and update it if it\n          has smaller f(n). As a result, Dijkstra tries to cover as many cells\n          as it can until it reaches the end node, staying as close as it can to\n          the start node. A min heap is used to efficiently sort each one of the\n          nodes by their smallest hueristic function which are removed when the\n          nodes' neighbors have all been visited. Dijkstra is regarded as one of\n          the most commonly used pathfinding algorithms.\n          <br /> The code for the implementation of Dijkstra can be found\n          here:&nbsp;\n          <a\n            href=\"https://github.com/ignlg/heap-js/blob/master/dist/heap-js.es5.js\"\n            target=\"_blank\"\n          >\n            Dijkstra\n          </a>\n        </p>\n        <button\n          className=\"next\"\n          onClick={() => {\n            this.props.close();\n          }}\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}