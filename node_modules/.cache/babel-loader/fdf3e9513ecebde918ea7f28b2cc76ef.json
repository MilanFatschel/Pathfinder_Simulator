{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutAlgorithm/AboutGBF.js\";\nimport React, { Component } from \"react\";\nimport \"./AboutAlgorithm.css\";\nexport default class AboutGBF extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tutorial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"Greedy-Best-First\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"algorithm-image\",\n      src: require(\"./../../gifs/gbfslow.gif\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"paragraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, \"Greedy-Best-First aims to find a path from the start node to the end node. It is extemely aggressive and speedy, but at the cost that it won't find the shortest path everytime. It explores each node starting with the ones with the smallest heuristic cost. The huerstic function for the implemented algorithm was simply the euclidean distance h(n) from the current explored node (which starts at 0) to the end node. This formula f(n) = h(n), gives us an estimation of how close we are to the end node at the current explored node (marked in blue). A min heap is used to efficiently sort each one of the nodes by their smallest hueristic function which are then removed after they are explored. Greedy-Best-First can be considerably faster than other algorithms if a path (not always the shortest) is only desired.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }), \" The code for the implementation of A* can be found here:\\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://github.com/ignlg/heap-js/blob/master/dist/heap-js.es5.js\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, \"A*\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"next\",\n      onClick: () => {\n        this.props.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"Close\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutAlgorithm/AboutGBF.js"],"names":["React","Component","AboutGBF","constructor","props","state","render","require","close"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,sBAAP;AAEA,eAAe,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAC9CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,GAAG,EAAEC,OAAO,CAAC,0BAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAME;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,o0BAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,gFAcE;AACE,MAAA,IAAI,EAAC,kEADP;AAEE,MAAA,MAAM,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF,CANF,eA2BE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKH,KAAL,CAAWI,KAAX;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA3BF,CADF;AAsCD;;AA7C6C","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./AboutAlgorithm.css\";\n\nexport default class AboutGBF extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"tutorial\">\n        <h3 className=\"title\">Greedy-Best-First</h3>\n        <img\n          className=\"algorithm-image\"\n          src={require(\"./../../gifs/gbfslow.gif\")}\n        ></img>\n        <p className=\"paragraph\">\n          Greedy-Best-First aims to find a path from the start node to the end\n          node. It is extemely aggressive and speedy, but at the cost that it\n          won't find the shortest path everytime. It explores each node starting\n          with the ones with the smallest heuristic cost. The huerstic function\n          for the implemented algorithm was simply the euclidean distance h(n)\n          from the current explored node (which starts at 0) to the end node.\n          This formula f(n) = h(n), gives us an estimation of how close we are\n          to the end node at the current explored node (marked in blue). A min\n          heap is used to efficiently sort each one of the nodes by their\n          smallest hueristic function which are then removed after they are\n          explored. Greedy-Best-First can be considerably faster than other\n          algorithms if a path (not always the shortest) is only desired.\n          <br /> The code for the implementation of A* can be found here:&nbsp;\n          <a\n            href=\"https://github.com/ignlg/heap-js/blob/master/dist/heap-js.es5.js\"\n            target=\"_blank\"\n          >\n            A*\n          </a>\n        </p>\n        <button\n          className=\"next\"\n          onClick={() => {\n            this.props.close();\n          }}\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}