{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutDataStructure/AboutQueue.js\";\nimport React, { Component } from \"react\";\nimport \"./AboutDataStructure.css\";\nexport default class AboutQueue extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tutorial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"The Queue\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"queue-image\",\n      src: require(\"./../../gifs/queue.gif\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"paragraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, \"The queue resembles that of the \\\"first-come, first-serve\\\" or a line of people waiting to purchase something. This allows us to keep the First-In First-Out ordering and also makes removing and inserting from the queue very efficient (constant, since we only need to keep track of the front item). Here, enqueue (push) adds an item to the back of the queue and deqeue (pop) removes an item from the front of the queue. The peek (front) method returns the current front item in the queue. In our case, the items in the above image can be thought of each grid cell in the search. The queue can be seen in action with the Breadth-First-Search algorithm.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }), \" The code for the implemented queue can be found here:\\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://github.com/MilanFatschel/Pathfinder_Algorithm_Simulator/blob/master/src/structures/Queue.js\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    }, \"Queue\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"next\",\n      onClick: () => {\n        this.props.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, \"Close\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutDataStructure/AboutQueue.js"],"names":["React","Component","AboutQueue","constructor","props","state","render","require","close"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,0BAAP;AAEA,eAAe,MAAMC,UAAN,SAAyBD,SAAzB,CAAmC;AAChDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AACE,MAAA,SAAS,EAAC,aADZ;AAEE,MAAA,GAAG,EAAEC,OAAO,CAAC,wBAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAME;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kqBAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,6EAYE;AACE,MAAA,IAAI,EAAC,qGADP;AAEE,MAAA,MAAM,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAZF,CANF,eAyBE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKH,KAAL,CAAWI,KAAX;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAzBF,CADF;AAoCD;;AA3C+C","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./AboutDataStructure.css\";\n\nexport default class AboutQueue extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"tutorial\">\n        <h3 className=\"title\">The Queue</h3>\n        <img\n          className=\"queue-image\"\n          src={require(\"./../../gifs/queue.gif\")}\n        ></img>\n        <p className=\"paragraph\">\n          The queue resembles that of the \"first-come, first-serve\" or a line of\n          people waiting to purchase something. This allows us to keep the\n          First-In First-Out ordering and also makes removing and inserting from\n          the queue very efficient (constant, since we only need to keep track\n          of the front item). Here, enqueue (push) adds an item to the back of\n          the queue and deqeue (pop) removes an item from the front of the\n          queue. The peek (front) method returns the current front item in the\n          queue. In our case, the items in the above image can be thought of\n          each grid cell in the search. The queue can be seen in action with the\n          Breadth-First-Search algorithm.\n          <br /> The code for the implemented queue can be found here:&nbsp;\n          <a\n            href=\"https://github.com/MilanFatschel/Pathfinder_Algorithm_Simulator/blob/master/src/structures/Queue.js\"\n            target=\"_blank\"\n          >\n            Queue\n          </a>\n        </p>\n        <button\n          className=\"next\"\n          onClick={() => {\n            this.props.close();\n          }}\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}