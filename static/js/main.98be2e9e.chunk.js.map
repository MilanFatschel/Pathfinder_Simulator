{"version":3,"sources":["gifs sync /^/.*/.gif$","gifs/adjustspeed.gif","gifs/astarslow.gif","gifs/bfs.gif","gifs/bfsslow.gif","gifs/choosealgorithm.gif","gifs/clear.gif","gifs/destination.gif","gifs/dfsslow.gif","gifs/dijkstraslow.gif","gifs/dragobstacle.gif","gifs/dragstartend.gif","gifs/gbfslow.gif","gifs/heap.gif","gifs/queue.gif","gifs/randomize.gif","gifs/reset.gif","gifs/simulate.gif","gifs/stack.gif","gifs/toggleobstacle.gif","components/NavigationBar/NavigationBar.js","components/Node/Node.js","algorithms/Astar.js","algorithms/Dijkstra.js","algorithms/GreedyBestFirst.js","structures/Queue.js","algorithms/BFS.js","structures/Stack.js","algorithms/DFS.js","components/ActionBar/ActionBar.js","components/Display/Display.js","components/Tutorial/TutorialDialog.js","data/Tutorial-Data.js","components/Tutorial/Tutorial.js","data/About-Algorithms-Data.js","components/SimpleDialog/SimpleDialog.js","components/AboutAlgorithms/AboutAlgorithmsDialog.js","data/About-Structures-Data.js","components/AboutStructures/AboutStructuresDialog.js","components/Simulation/Simulation.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","NavigationBar","props","handleNavBarClick","node","contains","target","setState","activeDropDown","state","document","addEventListener","this","removeEventListener","dropdown","preventDefault","tutorialEnabled","mouseHold","aboutAlgorithmEnabled","aboutDataStructureEnabled","classNavBarLink","classNavButton","classAlgoDropdownMenu","classAstarActive","activeAlgorithm","classDijkstraActive","classGBFActive","classBFSActive","classDFSActive","classSpeedDropdownMenu","classSpeed25Active","simulatorSpeed","classSpeed50Active","classSpeed75Active","classSpeed100Active","classSpeed200Active","classSpeed400Active","classAboutAlgoDropdownMenu","classAboutStructDropdownMenu","ref","className","style","userSelect","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","role","aria-haspopup","onClick","showDropdown","cursor","aria-labelledby","onClickAlgorithm","onClickSpeed","onClickAboutAlgorithm","onClickAboutDataStructure","createTutorialEvent","Component","Node","row","col","isStartNode","isEndNode","isVisited","isObstacle","onMouseDown","onMouseEnter","onMouseOut","onMouseUp","getNodeClass","getEuclideanDistance","nodeA","nodeB","Math","sqrt","addNeighborNodes","grid","i","length","j","neighborNodes","push","Queue","items","element","isEmpty","shift","Stack","pop","ActionBar","playClickedHandler","disablePlay","onPlayClick","resetPathClickHandler","disableOthers","onResetPathClick","resetObstaclesClickHandler","onResetObstaclesClick","randomizeClickHandler","onRandomizeClick","disableClass","disableOthersClass","size","timeouts","Display","startNode","endNode","startCancelPos","endCancelPos","mouseIsPressed","mouseHoldsStart","mouseHoldsEnd","disableClicking","window","onWindowResize","bind","createGridBasedOnWindowSize","innerWidth","resetGridStyles","cancelTimeouts","windowIsOpened","savedGrid","mouseHoldOnEvent","newGrid","getNewGridWithToggledObstacle","currentNode","getNewGridWithNewStart","mouseHoldOffEvent","getNewGridWithNewEnd","visitedNodesInOrder","shortestPathInOrder","speed","setTimeout","animateShortestPath","getElementById","clearTimeout","rowLength","colLength","cancelSearch","width","startPos","endPos","GRID_ROW_LENGTH_LARGE","GRID_COL_LENGTH_LARGE","createGrid","GRID_ROW_LENGTH_MEDIUM","GRID_COL_LENGTH_MEDIUM","GRID_ROW_LENGTH_SMALL","GRID_COL_LENGTH_SMALL","GRID_ROW_LENGTH_MOBILE","GRID_COL_LENGTH_MOBILE","currentRow","newNode","createNewNode","floor","random","visitedNodes","g","h","f","nodeHeap","Heap","a","b","peek","remove","nodeNeighbor","possibleLowerG","parentNode","astar","dijkstra","greedybestfirst","nodeQueue","front","bfs","nodeStack","top","dfs","getResultPath","animateNodeList","newStart","newEnd","visualizeAlgorithm","resetPath","resetObstacles","randomizeObstacles","rowId","key","nodeId","handleMouseOut","handleMouseDown","handleMouseEnter","handleMouseUp","Infinity","slice","scanningNode","TutorialDialog","windowWidth","title","gifPath","gifAlt","text","curPageNumber","totalPageNumber","showPrev","showNext","iconSize","imgSize","prevButtonRender","decrementPage","nextButtonRender","incrementPage","imgRender","src","require","alt","height","extraRender","rel","skip","TutorialData","Tutorial","newPageNumber","closeTutorial","dataMap","AboutStructuresData","algo","data","link","SimpleDialog","AboutAlgorithmsDialog","dialogData","AboutAlorithmsData","getData","algorithm","structure","AboutStructuresDialog","Simulation","aboutAlgorithm","aboutDataStructure","closeAboutAlgorithm","closeAboutDataStructure","dataStructure","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98be2e9e.chunk.js","sourcesContent":["var map = {\n\t\"./adjustspeed.gif\": 28,\n\t\"./astarslow.gif\": 29,\n\t\"./bfs.gif\": 30,\n\t\"./bfsslow.gif\": 31,\n\t\"./choosealgorithm.gif\": 32,\n\t\"./clear.gif\": 33,\n\t\"./destination.gif\": 34,\n\t\"./dfsslow.gif\": 35,\n\t\"./dijkstraslow.gif\": 36,\n\t\"./dragobstacle.gif\": 37,\n\t\"./dragstartend.gif\": 38,\n\t\"./gbfslow.gif\": 39,\n\t\"./heap.gif\": 40,\n\t\"./queue.gif\": 41,\n\t\"./randomize.gif\": 42,\n\t\"./reset.gif\": 43,\n\t\"./simulate.gif\": 44,\n\t\"./stack.gif\": 45,\n\t\"./toggleobstacle.gif\": 46\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 12;","module.exports = __webpack_public_path__ + \"static/media/adjustspeed.aea4ee89.gif\";","module.exports = __webpack_public_path__ + \"static/media/astarslow.9df4bd54.gif\";","module.exports = __webpack_public_path__ + \"static/media/bfs.9542cb4a.gif\";","module.exports = __webpack_public_path__ + \"static/media/bfsslow.dbb9fe6b.gif\";","module.exports = __webpack_public_path__ + \"static/media/choosealgorithm.7cdd122f.gif\";","module.exports = __webpack_public_path__ + \"static/media/clear.90104cba.gif\";","module.exports = __webpack_public_path__ + \"static/media/destination.68b640b1.gif\";","module.exports = __webpack_public_path__ + \"static/media/dfsslow.fc9dc19b.gif\";","module.exports = __webpack_public_path__ + \"static/media/dijkstraslow.18bd6645.gif\";","module.exports = __webpack_public_path__ + \"static/media/dragobstacle.f1f2d758.gif\";","module.exports = __webpack_public_path__ + \"static/media/dragstartend.df145adb.gif\";","module.exports = __webpack_public_path__ + \"static/media/gbfslow.53838dab.gif\";","module.exports = __webpack_public_path__ + \"static/media/heap.a6a90c10.gif\";","module.exports = __webpack_public_path__ + \"static/media/queue.27136a69.gif\";","module.exports = __webpack_public_path__ + \"static/media/randomize.4d84657e.gif\";","module.exports = __webpack_public_path__ + \"static/media/reset.be9999d0.gif\";","module.exports = __webpack_public_path__ + \"static/media/simulate.b7235db6.gif\";","module.exports = __webpack_public_path__ + \"static/media/stack.95bfb4af.gif\";","module.exports = __webpack_public_path__ + \"static/media/toggleobstacle.b12eb630.gif\";","import React, { Component } from \"react\";\r\n\r\nexport default class NavigationBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"click\", this.handleNavBarClick, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"click\", this.handleNavBarClick, false);\r\n  }\r\n\r\n  handleNavBarClick = (e) => {\r\n    if (!this.node.contains(e.target)) {\r\n      this.setState({ activeDropDown: null });\r\n    }\r\n  };\r\n\r\n  // Drop Down Menu Toggles\r\n  showDropdown(e, dropdown) {\r\n    e.preventDefault();\r\n    if (dropdown === \"algorithm\") this.setState({ activeDropDown: \"algorithm\" });\r\n    else if (dropdown === \"speed\") this.setState({ activeDropDown: \"speed\" });\r\n    else if (dropdown === \"aboutAlgo\")\r\n      this.setState({ activeDropDown: \"aboutAlgo\" });\r\n    else if (dropdown === \"aboutStruct\")\r\n      this.setState({ activeDropDown: \"aboutStruct\" });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      tutorialEnabled,\r\n      mouseHold,\r\n      aboutAlgorithmEnabled,\r\n      aboutDataStructureEnabled,\r\n    } = this.props;\r\n\r\n    // Navbar enababled/disabled\r\n    const classNavBarLink =\r\n      tutorialEnabled || mouseHold || aboutAlgorithmEnabled || aboutDataStructureEnabled\r\n        ? \"nav-link disabled dropdown-toggle\"\r\n        : \"nav-link dropdown-toggle\";\r\n\r\n    const classNavButton =\r\n      tutorialEnabled || mouseHold || aboutAlgorithmEnabled || aboutDataStructureEnabled\r\n        ? \"nav-link disabled\"\r\n        : \"nav-link\";\r\n\r\n    // Algorithm Drop Down\r\n    const classAlgoDropdownMenu =\r\n      \"dropdown-menu\" +\r\n      (this.state.activeDropDown === \"algorithm\" ? \" show\" : \"\");\r\n    const classAstarActive =\r\n      \"dropdown-item\" + (this.props.activeAlgorithm === \"A*\" ? \" active\" : \"\");\r\n    const classDijkstraActive =\r\n      \"dropdown-item\" +\r\n      (this.props.activeAlgorithm === \"Dijkstra\" ? \" active\" : \"\");\r\n    const classGBFActive =\r\n      \"dropdown-item\" + (this.props.activeAlgorithm === \"GBF\" ? \" active\" : \"\");\r\n    const classBFSActive =\r\n      \"dropdown-item\" + (this.props.activeAlgorithm === \"BFS\" ? \" active\" : \"\");\r\n    const classDFSActive =\r\n      \"dropdown-item\" + (this.props.activeAlgorithm === \"DFS\" ? \" active\" : \"\");\r\n\r\n    // Speed Adjustment Dropdown\r\n    const classSpeedDropdownMenu =\r\n      \"dropdown-menu\" + (this.state.activeDropDown === \"speed\" ? \" show\" : \"\");\r\n    const classSpeed25Active =\r\n      \"dropdown-item\" + (this.props.simulatorSpeed === 0.25 ? \" active\" : \"\");\r\n    const classSpeed50Active =\r\n      \"dropdown-item\" + (this.props.simulatorSpeed === 0.5 ? \" active\" : \"\");\r\n    const classSpeed75Active =\r\n      \"dropdown-item\" + (this.props.simulatorSpeed === 0.75 ? \" active\" : \"\");\r\n    const classSpeed100Active =\r\n      \"dropdown-item\" + (this.props.simulatorSpeed === 1.0 ? \" active\" : \"\");\r\n    const classSpeed200Active =\r\n      \"dropdown-item\" + (this.props.simulatorSpeed === 2.0 ? \" active\" : \"\");\r\n    const classSpeed400Active =\r\n      \"dropdown-item\" + (this.props.simulatorSpeed === 4.0 ? \" active\" : \"\");\r\n    // End Speed Dropdown\r\n\r\n    // About Algorithms Dropdown\r\n    const classAboutAlgoDropdownMenu =\r\n      \"dropdown-menu\" +\r\n      (this.state.activeDropDown === \"aboutAlgo\" ? \" show\" : \"\");\r\n\r\n    // About Data Structures Structures DropDown\r\n    const classAboutStructDropdownMenu =\r\n      \"dropdown-menu\" +\r\n      (this.state.activeDropDown === \"aboutStruct\" ? \" show\" : \"\");\r\n\r\n    return (\r\n      <div ref={(node) => (this.node = node)}>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\"  style={{userSelect: 'none'}}>\r\n          <a className=\"navbar-brand\" href=\"/Pathfinder_Simulator\">\r\n            Pathfinder Simulator\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className={classNavBarLink}\r\n                  href=\"/#\"\r\n                  id=\"navbarDropdown\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                  onClick={(e) => {\r\n                    this.showDropdown(e, \"algorithm\");\r\n                  }}\r\n                >\r\n                  Choose Algorithm: {this.props.activeAlgorithm}\r\n                </a>\r\n                <div\r\n                  className={classAlgoDropdownMenu}\r\n                  style={{cursor: \"pointer\"}}\r\n                  aria-labelledby=\"navbarDropdown\"\r\n                >\r\n                  <a\r\n                    className={classAstarActive}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickAlgorithm(e, \"A*\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    A*\r\n                  </a>\r\n                  <a\r\n                    className={classDijkstraActive}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickAlgorithm(e, \"Dijkstra\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Dijkstra\r\n                  </a>\r\n                  <a\r\n                    className={classGBFActive}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickAlgorithm(e, \"GBF\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Greedy-Best-First\r\n                  </a>\r\n                  <a\r\n                    className={classBFSActive}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickAlgorithm(e, \"BFS\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Breadth-First-Search\r\n                  </a>\r\n                  <a\r\n                    className={classDFSActive}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickAlgorithm(e, \"DFS\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Depth-First-Search\r\n                  </a>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className={classNavBarLink}\r\n                  style={{cursor: \"pointer\"}}\r\n                  id=\"navbarDropdown\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                  onClick={(e) => {\r\n                    this.showDropdown(e, \"speed\");\r\n                  }}\r\n                >\r\n                  Adjust Simulation Speed: {this.props.simulatorSpeed * 100}%\r\n                </a>\r\n                <div\r\n                  className={classSpeedDropdownMenu}\r\n                  aria-labelledby=\"navbarDropdown\"\r\n                >\r\n                  <a\r\n                    className={classSpeed25Active}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickSpeed(e, 0.25);\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    25%\r\n                  </a>\r\n                  <a\r\n                    className={classSpeed50Active}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickSpeed(e, 0.5);\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    50%\r\n                  </a>\r\n                  <a\r\n                    className={classSpeed75Active}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickSpeed(e, 0.75);\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    75%\r\n                  </a>\r\n                  <a\r\n                    className={classSpeed100Active}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickSpeed(e, 1.0);\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    100%\r\n                  </a>\r\n                  <a\r\n                    className={classSpeed200Active}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickSpeed(e, 2.0);\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    200%\r\n                  </a>\r\n                  <a\r\n                    className={classSpeed400Active}\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={(e) => {\r\n                      this.props.onClickSpeed(e, 4.0);\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    400%\r\n                  </a>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className={classNavBarLink}\r\n                  style={{cursor: \"pointer\"}}\r\n                  id=\"navbarDropdown\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                  onClick={(e) => {\r\n                    this.showDropdown(e, \"aboutAlgo\");\r\n                  }}\r\n                >\r\n                  About Pathfinding Algorithms\r\n                </a>\r\n                <div\r\n                  className={classAboutAlgoDropdownMenu}\r\n                  aria-labelledby=\"navbarDropdown\"\r\n                >\r\n                  <a\r\n                    className=\"dropdown-item\"\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={() => {\r\n                      this.props.onClickAboutAlgorithm(\"A*\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    A*\r\n                  </a>\r\n                  <a\r\n                    className=\"dropdown-item\"\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={() => {\r\n                      this.props.onClickAboutAlgorithm(\"Dijkstra\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Dijkstra\r\n                  </a>\r\n                  <a\r\n                    className=\"dropdown-item\"\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={() => {\r\n                      this.props.onClickAboutAlgorithm(\"GBF\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Greedy-Best-First\r\n                  </a>\r\n                  <a\r\n                    className=\"dropdown-item\"\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={() => {\r\n                      this.props.onClickAboutAlgorithm(\"BFS\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Breadth-First-Search\r\n                  </a>\r\n                  <a\r\n                    className=\"dropdown-item\"\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={() => {\r\n                      this.props.onClickAboutAlgorithm(\"DFS\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Depth-First-Search\r\n                  </a>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item dropdown\">\r\n                <a\r\n                  className={classNavBarLink}\r\n                  style={{cursor: \"pointer\"}}\r\n                  id=\"navbarDropdown\"\r\n                  role=\"button\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                  onClick={(e) => {\r\n                    this.showDropdown(e, \"aboutStruct\");\r\n                  }}\r\n                >\r\n                  About Pathfinding Data Structures\r\n                </a>\r\n                <div\r\n                  className={classAboutStructDropdownMenu}\r\n                  aria-labelledby=\"navbarDropdown\"\r\n                >\r\n                  <a\r\n                    className=\"dropdown-item\"\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={() => {\r\n                      this.props.onClickAboutDataStructure(\"Stack\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Stack\r\n                  </a>\r\n                  <a\r\n                    className=\"dropdown-item\"\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={() => {\r\n                      this.props.onClickAboutDataStructure(\"Queue\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Queue\r\n                  </a>\r\n                  <a\r\n                    className=\"dropdown-item\"\r\n                    style={{cursor: \"pointer\"}}\r\n                    onClick={() => {\r\n                      this.props.onClickAboutDataStructure(\"Heap\");\r\n                      this.setState({ activeDropDown: null });\r\n                    }}\r\n                  >\r\n                    Heap\r\n                  </a>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a\r\n                  className={classNavButton}\r\n                  style={{cursor: \"pointer\"}}\r\n                  onClick={(e) => {\r\n                    this.props.createTutorialEvent();\r\n                    this.setState({ activeDropDown: null });\r\n                  }}\r\n                >\r\n                  Instructions <span className=\"sr-only\">(current)</span>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStartNode,\r\n      isEndNode,\r\n      isVisited,\r\n      isObstacle,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseOut,\r\n      onMouseUp,\r\n    } = this.props;\r\n\r\n    const getNodeClass = isStartNode\r\n      ? \"node-start\"\r\n      : isEndNode\r\n      ? \"node-end\"\r\n      : isVisited\r\n      ? \"node-visited\"\r\n      : isObstacle\r\n      ? \"node-obstacle\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${getNodeClass}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseOut={() => onMouseOut(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import Heap from \"heap-js\";\r\n// A* Algorithm\r\n// Returns list of nodes that have been visited, and\r\n// each of the nodes' parent node which will be used\r\n// for creating our final shortest path\r\n\r\nexport function astar(grid, startNode, endNode) {\r\n  // Inital check on our parameters\r\n  if (!startNode || !endNode || startNode === endNode) {\r\n    return false;\r\n  }\r\n\r\n  // Add each nodes' neighbors before\r\n  // starting\r\n  addNeighborNodes(grid);\r\n\r\n  // Create visited array for visualization\r\n  const visitedNodes = [];\r\n\r\n  // Start by adding our start Node\r\n  // Calculate initial g,h, and f\r\n  startNode.g = 0;\r\n  startNode.h = getEuclideanDistance(startNode, endNode);\r\n  startNode.f = startNode.g + startNode.h;\r\n\r\n  // Push in startNode as first in our min heap\r\n  const customPriorityComparator = (a, b) => a.f - b.f;\r\n  const nodeHeap = new Heap(customPriorityComparator);\r\n  nodeHeap.push(startNode);\r\n\r\n  // A* algorithm starts here....\r\n  while (nodeHeap.length > 0) {\r\n    // Check to see if the next node in the list is visited or the end node.\r\n    // If so remove it, we do not need to check it\r\n    while (nodeHeap.length > 0 && nodeHeap.peek().isVisited) {\r\n      nodeHeap.remove();\r\n    }\r\n\r\n    // Make sure our list is not empty\r\n    if (nodeHeap.length > 0) {\r\n      // Mark current node as visited, add to visited array\r\n      const currentNode = nodeHeap.peek();\r\n      currentNode.isVisited = true;\r\n\r\n      // push nodes visited into array for rendering\r\n      // keep start and end nodes out of list\r\n      if (currentNode !== startNode && currentNode !== endNode)\r\n        visitedNodes.push(currentNode);\r\n\r\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\r\n        // Get current neighbor being scanned\r\n        var nodeNeighbor = currentNode.neighborNodes[i];\r\n\r\n        // Calculate possible lower g value\r\n        var possibleLowerG =\r\n          currentNode.g + getEuclideanDistance(currentNode, nodeNeighbor);\r\n\r\n        // If lower, update the current g and the parent.\r\n        // Recalculate the new h\r\n        if (possibleLowerG < nodeNeighbor.g) {\r\n          nodeNeighbor.parentNode = currentNode;\r\n          nodeNeighbor.g = possibleLowerG;\r\n          nodeNeighbor.h = getEuclideanDistance(nodeNeighbor, endNode);\r\n\r\n          // f(n) = g(n) + h(n)\r\n          nodeNeighbor.f = nodeNeighbor.g + nodeNeighbor.h;\r\n\r\n          // If the node neighbor has not been visited and is not an\r\n          // obstacle add it to the node list\r\n          if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle)\r\n            nodeHeap.push(nodeNeighbor);\r\n\r\n          // If a node neighbor is the end node\r\n          // we are finished\r\n          if (nodeNeighbor === endNode) return visitedNodes;\r\n        }\r\n      }\r\n    } else {\r\n      // No solutions, show the visited nodes\r\n      return visitedNodes;\r\n    }\r\n  }\r\n}\r\n\r\n// Euclidean hueristic function\r\nconst getEuclideanDistance = (nodeA, nodeB) => {\r\n  return Math.sqrt(\r\n    (nodeA.col - nodeB.col) * (nodeA.col - nodeB.col) +\r\n      (nodeA.row - nodeB.row) * (nodeA.row - nodeB.row)\r\n  );\r\n};\r\n\r\nconst addNeighborNodes = (grid) => {\r\n  // Adds each neighbor node in the grid.\r\n  // Have to make sure we do not run out of bounds\r\n\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      if (i < grid.length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\r\n      }\r\n      if (i > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\r\n      }\r\n      if (j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\r\n      }\r\n      if (j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\r\n      }\r\n      if (i > 0 && j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\r\n      }\r\n      if (i < grid.length - 1 && j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\r\n      }\r\n      if (i > 0 && j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\r\n      }\r\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\r\n      }\r\n    }\r\n  }\r\n};\r\n","import Heap from \"heap-js\";\r\n// Dijkstra's Algorithm\r\n// Returns list of nodes that have been visited, and\r\n// each of the nodes' parent node which will be used\r\n// for creating our final shortest path\r\n\r\nexport function dijkstra(grid, startNode, endNode) {\r\n  // Inital check on our parameters\r\n  if (!startNode || !endNode || startNode === endNode) {\r\n    return false;\r\n  }\r\n\r\n  // Add each nodes' neighbors before\r\n  // starting\r\n  addNeighborNodes(grid);\r\n\r\n  // Create visited array for visualization\r\n  const visitedNodes = [];\r\n\r\n  // Start by adding our start Node\r\n  // Set the initial g and f\r\n  startNode.g = 0;\r\n  startNode.f = startNode.g;\r\n\r\n  // Push in startNode as first in our min heap\r\n  const customPriorityComparator = (a, b) => a.f - b.f;\r\n  const nodeHeap = new Heap(customPriorityComparator);\r\n  nodeHeap.push(startNode);\r\n\r\n  // Dijkstra's algorithm starts here....\r\n  while (nodeHeap.length > 0) {\r\n    // Check to see if the next node in the list is visited or the end node.\r\n    // If so remove it, we do not need to check it\r\n    while (nodeHeap.length > 0 && nodeHeap.peek().isVisited) {\r\n      nodeHeap.pop();\r\n    }\r\n\r\n    // Make sure our list is not empty\r\n    if (nodeHeap.length > 0) {\r\n      // Mark current node as visited, add to visited array\r\n      const currentNode = nodeHeap.peek();\r\n      currentNode.isVisited = true;\r\n\r\n      // push nodes visited into array for rendering\r\n      // keep start and end nodes out of list\r\n      if (currentNode !== startNode && currentNode !== endNode)\r\n        visitedNodes.push(currentNode);\r\n\r\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\r\n        // Get current neighbor being scanned\r\n        var nodeNeighbor = currentNode.neighborNodes[i];\r\n\r\n        // Calculate possible lower g value\r\n        var possibleLowerG =\r\n          currentNode.g + getEuclideanDistance(currentNode, nodeNeighbor);\r\n\r\n        // If lower, update the current g and the parent.\r\n        if (possibleLowerG < nodeNeighbor.g) {\r\n          nodeNeighbor.parentNode = currentNode;\r\n          nodeNeighbor.g = possibleLowerG;\r\n\r\n          // f(n) = g(n)\r\n          nodeNeighbor.f = nodeNeighbor.g;\r\n        }\r\n\r\n        // If the node neighbor has not been visited and is not an\r\n        // obstacle add it to the node list\r\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle)\r\n          nodeHeap.push(nodeNeighbor);\r\n\r\n        // If a node neighbor is the end node\r\n        // we are finished\r\n        if (nodeNeighbor === endNode) return visitedNodes;\r\n      }\r\n    } else {\r\n      // No solution, show the visited nodes\r\n      return visitedNodes;\r\n    }\r\n  }\r\n}\r\n\r\n// Euclidean hueristic function\r\nconst getEuclideanDistance = (nodeA, nodeB) => {\r\n  return Math.sqrt(\r\n    (nodeA.col - nodeB.col) * (nodeA.col - nodeB.col) +\r\n      (nodeA.row - nodeB.row) * (nodeA.row - nodeB.row)\r\n  );\r\n};\r\n\r\nconst addNeighborNodes = (grid) => {\r\n  // Adds each neighbor node in the grid.\r\n  // Have to make sure we do not run out of bounds\r\n\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      if (i < grid.length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\r\n      }\r\n      if (i > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\r\n      }\r\n      if (j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\r\n      }\r\n      if (j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\r\n      }\r\n      if (i > 0 && j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\r\n      }\r\n      if (i < grid.length - 1 && j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\r\n      }\r\n      if (i > 0 && j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\r\n      }\r\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\r\n      }\r\n    }\r\n  }\r\n};\r\n","import Heap from \"heap-js\";\r\n// Greedy-Best-first Algorithm\r\n// Returns list of nodes that have been visited, and\r\n// each of the nodes' parent node which will be used\r\n// for creating our final shortest path\r\n\r\nexport function greedybestfirst(grid, startNode, endNode) {\r\n  // Inital check on our parameters\r\n  if (!startNode || !endNode || startNode === endNode) {\r\n    return false;\r\n  }\r\n\r\n  // Add each nodes' neighbors before\r\n  // starting\r\n  addNeighborNodes(grid);\r\n\r\n  // Create visited array for visualization\r\n  const visitedNodes = [];\r\n\r\n  // Start by adding our start Node\r\n  // Calculate initial g, h and f\r\n  startNode.g = 0;\r\n  startNode.h = getEuclideanDistance(startNode, endNode);\r\n  startNode.f = startNode.h;\r\n\r\n  // Push in startNode as first in our min heap\r\n  const customPriorityComparator = (a, b) => a.f - b.f;\r\n  const nodeHeap = new Heap(customPriorityComparator);\r\n  nodeHeap.push(startNode);\r\n\r\n  // GBF algorithm starts here....\r\n  while (nodeHeap.length > 0) {\r\n    // Check to see if the next node in the list is visited or the end node.\r\n    // If so remove it, we do not need to check it\r\n    while (nodeHeap.length > 0 && nodeHeap.peek().isVisited) {\r\n      nodeHeap.pop();\r\n    }\r\n\r\n    // Make sure our list is not empty\r\n    if (nodeHeap.length > 0) {\r\n      // Mark current node as visited, add to visited array\r\n      const currentNode = nodeHeap.peek();\r\n      currentNode.isVisited = true;\r\n\r\n      // push nodes visited into array for rendering\r\n      // keep start and end nodes out of list\r\n      if (currentNode !== startNode && currentNode !== endNode)\r\n        visitedNodes.push(currentNode);\r\n\r\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\r\n        // Get current neighbor being scanned\r\n        var nodeNeighbor = currentNode.neighborNodes[i];\r\n\r\n        // Calculate possible lower g value\r\n        var possibleLowerG =\r\n          currentNode.g + getEuclideanDistance(currentNode, nodeNeighbor);\r\n\r\n        // If lower, update the current g and the parent.\r\n        // Recalculate the new h\r\n        if (possibleLowerG < nodeNeighbor.g) {\r\n          nodeNeighbor.parentNode = currentNode;\r\n          nodeNeighbor.g = possibleLowerG;\r\n          nodeNeighbor.h = getEuclideanDistance(nodeNeighbor, endNode);\r\n\r\n          // f(n) = h(n)\r\n          nodeNeighbor.f = nodeNeighbor.h;\r\n\r\n          // If the node neighbor has not been visited and is not an\r\n          // obstacle add it to the node list\r\n          if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle)\r\n            nodeHeap.push(nodeNeighbor);\r\n\r\n          // If a node neighbor is the end node\r\n          // we are finished\r\n          if (nodeNeighbor === endNode) return visitedNodes;\r\n        }\r\n      }\r\n    } else {\r\n      // No solution, show the visited nodes\r\n      return visitedNodes;\r\n    }\r\n  }\r\n}\r\n\r\n// Euclidean hueristic function\r\nconst getEuclideanDistance = (nodeA, nodeB) => {\r\n  return Math.sqrt(\r\n    (nodeA.col - nodeB.col) * (nodeA.col - nodeB.col) +\r\n      (nodeA.row - nodeB.row) * (nodeA.row - nodeB.row)\r\n  );\r\n};\r\n\r\nconst addNeighborNodes = (grid) => {\r\n  // Adds each neighbor node in the grid.\r\n  // Have to make sure we do not run out of bounds\r\n\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      if (i < grid.length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\r\n      }\r\n      if (i > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\r\n      }\r\n      if (j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\r\n      }\r\n      if (j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\r\n      }\r\n      if (i > 0 && j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\r\n      }\r\n      if (i < grid.length - 1 && j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\r\n      }\r\n      if (i > 0 && j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\r\n      }\r\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\r\n      }\r\n    }\r\n  }\r\n};\r\n","// Custom queue implementation\r\n\r\nimport { Component } from \"react\";\r\n\r\nexport default class Queue extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n    };\r\n  }\r\n\r\n  push(element) {\r\n    // adding element to the queue\r\n    this.state.items.push(element);\r\n  }\r\n\r\n  pop() {\r\n    // removing element from the queue\r\n    // returns underflow when called\r\n    // on empty queue\r\n    if (this.isEmpty()) return \"Underflow\";\r\n    return this.state.items.shift();\r\n  }\r\n\r\n  front() {\r\n    // returns the Front element of\r\n    // the queue without removing it.\r\n    if (this.isEmpty()) return \"No elements in Queue\";\r\n    return this.state.items[0];\r\n  }\r\n\r\n  isEmpty() {\r\n    // return true if the queue is empty.\r\n    return this.state.items.length === 0;\r\n  }\r\n\r\n  render() {\r\n    return;\r\n  }\r\n}\r\n","import Queue from \"../structures/Queue\";\r\n\r\n// BFS Algorithm\r\n// Returns list of nodes that have been visited, and\r\n// each of the nodes' parent node which will be used\r\n// for creating our final shortest path\r\n\r\nexport function bfs(grid, startNode, endNode) {\r\n  // Inital check on our parameters\r\n  if (!startNode || !endNode || startNode === endNode) {\r\n    return false;\r\n  }\r\n\r\n  // Add each nodes' neighbors before\r\n  // starting\r\n  addNeighborNodes(grid);\r\n\r\n  // Create visited array for visualization\r\n  const visitedNodes = [];\r\n\r\n  // Create a new queue to keep track of BFS\r\n  var nodeQueue = new Queue();\r\n  nodeQueue.push(startNode);\r\n\r\n  // BFS algorithm starts here....\r\n  while (!nodeQueue.isEmpty()) {\r\n    // Check to see if the next node in the queue is visited or the end node.\r\n    // If so remove it, we do not need to check it\r\n    while (!nodeQueue.isEmpty() && nodeQueue.front().isVisited) {\r\n      nodeQueue.pop();\r\n    }\r\n\r\n    // Make sure our queue is not empty\r\n    if (!nodeQueue.isEmpty()) {\r\n      // Mark current node as visited, add to visited array\r\n      const currentNode = nodeQueue.front();\r\n      currentNode.isVisited = true;\r\n\r\n      // push nodes visited into list for rendering\r\n      // keep start and end nodes out of list\r\n      if (currentNode !== startNode && currentNode !== endNode)\r\n        visitedNodes.push(currentNode);\r\n\r\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\r\n        // Get current neighbor being scanned\r\n        var nodeNeighbor = currentNode.neighborNodes[i];\r\n\r\n        // If the node neighbor has not been visited and is not an\r\n        // obstacle, add the current node as a parent\r\n        // and  add it to the node list\r\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle) {\r\n          // Only update the parent if is has no parent yet, since\r\n          // BFS works in wave frontes we do not want to update\r\n          if (!nodeNeighbor.parentNode) nodeNeighbor.parentNode = currentNode;\r\n          nodeQueue.push(nodeNeighbor);\r\n\r\n          // If a node neighbor is the end node\r\n          // we are finished\r\n          if (nodeNeighbor === endNode) return visitedNodes;\r\n        }\r\n      }\r\n    } else {\r\n      // No solution, show the visited nodes\r\n      return visitedNodes;\r\n    }\r\n  }\r\n}\r\n\r\nconst addNeighborNodes = (grid) => {\r\n  // Adds each neighbor node in the grid.\r\n  // Have to make sure we do not run out of bounds\r\n\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      if (i < grid.length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\r\n      }\r\n      if (i > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\r\n      }\r\n      if (j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\r\n      }\r\n      if (j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\r\n      }\r\n      if (i > 0 && j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\r\n      }\r\n      if (i < grid.length - 1 && j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\r\n      }\r\n      if (i > 0 && j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\r\n      }\r\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\r\n      }\r\n    }\r\n  }\r\n};\r\n","// Custom stack implementation\r\n\r\nimport { Component } from \"react\";\r\n\r\nexport default class Stack extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n    };\r\n  }\r\n\r\n  push(element) {\r\n    // adding element to the queue\r\n    this.state.items.push(element);\r\n  }\r\n\r\n  pop() {\r\n    // removing element from the queue\r\n    // returns underflow when called\r\n    // on empty queue\r\n    if (this.isEmpty()) return \"Underflow\";\r\n    return this.state.items.pop();\r\n  }\r\n\r\n  top() {\r\n    // returns the Front element of\r\n    // the queue without removing it.\r\n    if (this.isEmpty()) return \"No elements in Stack\";\r\n    return this.state.items[this.state.items.length - 1];\r\n  }\r\n\r\n  isEmpty() {\r\n    // return true if the queue is empty.\r\n    return this.state.items.length === 0;\r\n  }\r\n\r\n  render() {\r\n    return;\r\n  }\r\n}\r\n","import Stack from \"../structures/Stack\";\r\n\r\n// DFS Algorithm\r\n// Returns list of nodes that have been visited, and\r\n// each of the nodes' parent node which will be used\r\n// for creating our final path (Not necessarly shortest)\r\n\r\nexport function dfs(grid, startNode, endNode) {\r\n  // Inital check on our parameters\r\n  if (!startNode || !endNode || startNode === endNode) {\r\n    return false;\r\n  }\r\n\r\n  // Add each nodes' neighbors before\r\n  // starting\r\n  addNeighborNodes(grid);\r\n\r\n  // Create visited array for visualization\r\n  const visitedNodes = [];\r\n\r\n  // Create a new queue to keep track of BFS\r\n  var nodeStack = new Stack();\r\n  nodeStack.push(startNode);\r\n\r\n  // DFS algorithm starts here....\r\n  while (!nodeStack.isEmpty()) {\r\n    // Check to see if the next node in the queue is visited or the end node.\r\n    // If so remove it, we do not need to check it\r\n    while (!nodeStack.isEmpty() && nodeStack.top().isVisited) {\r\n      nodeStack.pop();\r\n    }\r\n\r\n    // Make sure our queue is not empty\r\n    if (!nodeStack.isEmpty()) {\r\n      // Mark current node as visited, add to visited array\r\n      const currentNode = nodeStack.top();\r\n      currentNode.isVisited = true;\r\n\r\n      // push nodes visited into list for rendering\r\n      // keep start and end nodes out of list\r\n      if (currentNode !== startNode && currentNode !== endNode)\r\n        visitedNodes.push(currentNode);\r\n\r\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\r\n        // Get current neighbor being scanned\r\n        var nodeNeighbor = currentNode.neighborNodes[i];\r\n\r\n        // If the node neighbor has not been visited and is not an\r\n        // obstacle, add the current node as a parent\r\n        // and  add it to the node list\r\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle) {\r\n          // Only update the parent if is has no parent yet\r\n          nodeNeighbor.parentNode = currentNode;\r\n          nodeStack.push(nodeNeighbor);\r\n\r\n          // If a node neighbor is the end node\r\n          // we are finished\r\n          if (nodeNeighbor === endNode) return visitedNodes;\r\n        }\r\n      }\r\n    } else {\r\n      // No solution, show the visted nodes\r\n      return visitedNodes;\r\n    }\r\n  }\r\n}\r\n\r\nconst addNeighborNodes = (grid) => {\r\n  // Adds each neighbor node in the grid.\r\n  // Have to make sure we do not run out of bounds\r\n\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[i].length; j++) {\r\n      if (i > 0 && j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\r\n      }\r\n      if (i < grid.length - 1 && j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\r\n      }\r\n      if (i > 0 && j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\r\n      }\r\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\r\n      }\r\n      if (i < grid.length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\r\n      }\r\n      if (j < grid[i].length - 1) {\r\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\r\n      }\r\n      if (i > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\r\n      }\r\n      if (j > 0) {\r\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\r\n      }\r\n    }\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { FiPlay } from \"react-icons/fi\"\r\nimport { BiReset } from \"react-icons/bi\"\r\nimport { FaRandom } from \"react-icons/fa\"\r\nimport { VscDebugRestartFrame } from \"react-icons/vsc\"\r\n\r\nimport \"./ActionBar.css\";\r\n\r\nexport default class ActionBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    };\r\n  }\r\n\r\n  playClickedHandler = () => {\r\n    if(this.props.disablePlay) return;\r\n    this.props.onPlayClick();\r\n  }\r\n\r\n  resetPathClickHandler = () => {\r\n    if(this.props.disableOthers) return;\r\n    this.props.onResetPathClick();\r\n  }\r\n\r\n  resetObstaclesClickHandler = () => {\r\n    if(this.props.disableOthers) return;\r\n    this.props.onResetObstaclesClick();\r\n  }\r\n\r\n  randomizeClickHandler = () => {\r\n    if(this.props.disableOthers) return;\r\n    this.props.onRandomizeClick();\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {disablePlay, disableOthers} = this.props;\r\n\r\n    // Conditional Renders\r\n    const disableClass = disablePlay ? \"disable\" : \"\";\r\n    const disableOthersClass = disableOthers ? \"disable\" : \"\";\r\n\r\n    return (\r\n      <div className=\"action-bar-container\">\r\n          <div className={disableClass} onClick={this.playClickedHandler}> <FiPlay size={32}></FiPlay> <span>Simulate</span></div>\r\n          <div className={disableOthersClass}onClick={this.resetPathClickHandler}><VscDebugRestartFrame size={32}></VscDebugRestartFrame><span>Reset Path</span></div>\r\n          <div className={disableOthersClass} onClick={this.resetObstaclesClickHandler}><BiReset size={32}></BiReset><span>Reset Obstacles</span></div>\r\n          <div className={disableOthersClass} style={{'borderRight': 'none'}} onClick={this.randomizeClickHandler}><FaRandom size={32}></FaRandom><span>Randomize</span></div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport Node from \"./../Node/Node\";\r\nimport \"./Display.css\";\r\nimport { astar } from \"../../algorithms/Astar\";\r\nimport { dijkstra } from \"../../algorithms/Dijkstra\";\r\nimport { greedybestfirst } from \"../../algorithms/GreedyBestFirst\";\r\nimport { bfs } from \"../../algorithms/BFS\";\r\nimport { dfs } from \"../../algorithms/DFS\";\r\nimport ActionBar from \"../ActionBar/ActionBar\";\r\n\r\n// Constants\r\nconst GRID_ROW_LENGTH_LARGE = 25;\r\nconst GRID_COL_LENGTH_LARGE = 50;\r\nconst GRID_ROW_LENGTH_MEDIUM = 25;\r\nconst GRID_COL_LENGTH_MEDIUM =  30;\r\nconst GRID_ROW_LENGTH_SMALL = 10;\r\nconst GRID_COL_LENGTH_SMALL = 10;\r\nconst GRID_ROW_LENGTH_MOBILE = 18;\r\nconst GRID_COL_LENGTH_MOBILE = 7;\r\nconst SIMULATION_SPEED = 50;\r\n\r\n// Break Points \r\nconst LARGE_BREAK_POINT = 1600;\r\nconst MEDIUM_BREAK_POINT = 1000;\r\nconst SMALL_BREAK_POINT = 425;\r\nvar timeouts = [];\r\n\r\nexport default class Display extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      startNode: {},\r\n      endNode: {},\r\n      startCancelPos: {},\r\n      endCancelPos: {},\r\n      mouseIsPressed: false,\r\n      mouseHoldsStart: false,\r\n      mouseHoldsEnd: false,\r\n      disableClicking: false,\r\n      tutorialEnabled: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // For checking window size\r\n    window.addEventListener(\"resize\", this.onWindowResize.bind(this));\r\n    const grid = this.createGridBasedOnWindowSize(window.innerWidth);\r\n    this.setState({ \r\n      grid\r\n     });\r\n  }\r\n\r\n  onWindowResize() {\r\n    // Check Break Points and create a new grid if so \r\n    this.resetGridStyles(this.state.grid);\r\n    this.cancelTimeouts();\r\n    const grid = this.createGridBasedOnWindowSize(window.innerWidth);\r\n    this.setState({ \r\n      grid,\r\n      mouseIsPressed: false,\r\n      mouseHoldsStart: false,\r\n      mouseHoldsEnd: false,\r\n      disableClicking: false,\r\n     });\r\n  }\r\n\r\n  onTutorialEnabled() {\r\n    this.setState({ disableClicking: true });\r\n  }\r\n\r\n  onTutorialDisabled() {\r\n    this.setState({ disableClicking: false });\r\n  }\r\n\r\n  handleMouseDown(row, col, windowIsOpened) {\r\n    const {\r\n      grid,\r\n      startNode,\r\n      endNode,\r\n      disableClicking,\r\n      mouseHoldsStart,\r\n      mouseHoldsEnd,\r\n    } = this.state;\r\n\r\n    // Alogrithm/tutorial in progress don't allow clicking\r\n    if (disableClicking || windowIsOpened || mouseHoldsStart || mouseHoldsEnd) return;\r\n    // Check to see if the mouse clicked on the start\r\n    // or end point\r\n    if (row === startNode.row && col === startNode.col) {\r\n      this.setState({\r\n        mouseIsPressed: true,\r\n        mouseHoldsStart: true,\r\n        savedGrid: grid,\r\n        startCancelPos: { row: row, col: col },\r\n      });\r\n      this.props.mouseHoldOnEvent();\r\n    } else if (row === endNode.row && col === endNode.col) {\r\n      this.setState({\r\n        mouseIsPressed: true,\r\n        mouseHoldsEnd: true,\r\n        endCancelPos: { row: row, col: col },\r\n      });\r\n      this.props.mouseHoldOnEvent();\r\n    } else {\r\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    // Check to see if the grid spot is already occupied\r\n    // if so cancel\r\n\r\n    // If the user releases the start or end on a grid\r\n    // set the start on that grid\r\n    const { grid, mouseHoldsStart, mouseHoldsEnd, startCancelPos, endCancelPos} = this.state;\r\n    const {\r\n      tutorialEnabled,\r\n      aboutAlgorithmEnabled,\r\n      aboutDataStructureEnabled,\r\n    } = this.props;\r\n    const currentNode = grid[row][col];\r\n\r\n    // Dont allow dropping on tutorial - edge case\r\n    if(tutorialEnabled || aboutAlgorithmEnabled || aboutDataStructureEnabled) return;\r\n\r\n    if (mouseHoldsStart) {\r\n      // Check to see if the grid spot is already occupied\r\n      // if so cancel\r\n      if (currentNode.isEndNode || currentNode.isObstacle) {\r\n        const newGrid = getNewGridWithNewStart(\r\n          grid,\r\n          startCancelPos.row,\r\n          startCancelPos.col\r\n        );\r\n        this.setState({\r\n          mouseHoldsStart: false,\r\n          mouseHoldsEnd: false,\r\n          mouseIsPressed: false,\r\n          grid: newGrid,\r\n          startNode: grid[startCancelPos.row][startCancelPos.col],\r\n        });\r\n        this.props.mouseHoldOffEvent();\r\n        return;\r\n      }\r\n      this.setState({ startNode: currentNode });\r\n    } else if (mouseHoldsEnd) {\r\n      if (currentNode.isStartNode || currentNode.isObstacle) {\r\n        const newGrid = getNewGridWithNewEnd(\r\n          this.state.grid,\r\n          endCancelPos.row,\r\n          endCancelPos.col\r\n        );\r\n        this.setState({\r\n          mouseHoldsStart: false,\r\n          mouseHoldsEnd: false,\r\n          mouseIsPressed: false,\r\n          grid: newGrid,\r\n          endNode: grid[endCancelPos.row][endCancelPos.col],\r\n        });\r\n        this.props.mouseHoldOffEvent();\r\n        return;\r\n      }\r\n      this.setState({ endNode: currentNode });\r\n    }\r\n\r\n    this.setState({\r\n      mouseHoldsStart: false,\r\n      mouseHoldsEnd: false,\r\n      mouseIsPressed: false,\r\n    });\r\n    this.props.mouseHoldOffEvent();\r\n  }\r\n\r\n  handleMouseOut(row, col) {\r\n    // If the mouse isn't held down do not do anything here\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    const { grid } = this.state;\r\n\r\n    if (this.state.mouseHoldsStart) {\r\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\r\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n    if (this.state.mouseHoldsEnd) {\r\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\r\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    // If the mouse isn't held down do not do anything here\r\n    if (!this.state.mouseIsPressed) return;\r\n\r\n    const { grid } = this.state;\r\n\r\n    // If we enter a new grid with the start held, generate a new start\r\n    if (this.state.mouseHoldsStart) {\r\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\r\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n    // If we enter a new grid with the end held, generate a new end\r\n    else if (this.state.mouseHoldsEnd) {\r\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\r\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n    // Toogle the obstacles\r\n    else {\r\n      if (grid[row][col].isStartNode || grid[row][col].isEndNode) return;\r\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\r\n    const speed = SIMULATION_SPEED / (this.props.simulatorSpeed * 5);\r\n\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      // If there is a solution, animate it\r\n      // If not skip it and just animate the visited nodes\r\n      if (i === visitedNodesInOrder.length) {\r\n        timeouts.push(\r\n          setTimeout(() => {\r\n            this.animateShortestPath(shortestPathInOrder);\r\n          }, speed * i)\r\n        );\r\n        return;\r\n      }\r\n      timeouts.push(\r\n        setTimeout(() => {\r\n          const node = visitedNodesInOrder[i];\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }, speed * i)\r\n      );\r\n    }\r\n  }\r\n\r\n  animateShortestPath(shortestPathInOrder) {\r\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\r\n      timeouts.push(\r\n        setTimeout(() => {\r\n          const node = shortestPathInOrder[i];\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-shortest-path\";\r\n        }, 40 * i)\r\n      );\r\n    }\r\n  }\r\n\r\n  cancelTimeouts() {\r\n    for (let i = 0; i < timeouts.length; i++) {\r\n      clearTimeout(timeouts[i]);\r\n    }\r\n    timeouts = [];\r\n  }\r\n\r\n  resetGridStyles(grid) {\r\n    const rowLength = grid.length;\r\n    const colLength = grid[0].length\r\n\r\n    this.setState({ cancelSearch: true });\r\n\r\n    for (let row = 0; row < rowLength; row++) {\r\n      for (let col = 0; col < colLength; col++) {\r\n        const node = grid[row][col];\r\n        if (!node.isStartNode && !node.isEndNode) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  createGridBasedOnWindowSize(width) {\r\n    const startPos = { row: 0, col: 0 };\r\n  \r\n    if(width >= LARGE_BREAK_POINT) {\r\n      const endPos = { row: GRID_ROW_LENGTH_LARGE - 1, col: GRID_COL_LENGTH_LARGE - 1};\r\n      return this.createGrid(startPos, endPos, GRID_ROW_LENGTH_LARGE, GRID_COL_LENGTH_LARGE);\r\n    } else if(width < LARGE_BREAK_POINT && width >= MEDIUM_BREAK_POINT) {\r\n      const endPos = { row: GRID_ROW_LENGTH_MEDIUM - 1, col: GRID_COL_LENGTH_MEDIUM - 1};\r\n      return this.createGrid(startPos, endPos, GRID_ROW_LENGTH_MEDIUM, GRID_COL_LENGTH_MEDIUM);\r\n    } else if(width < MEDIUM_BREAK_POINT && width >= SMALL_BREAK_POINT) {\r\n      const endPos = { row: GRID_ROW_LENGTH_SMALL - 1, col: GRID_COL_LENGTH_SMALL - 1};\r\n      return this.createGrid(startPos, endPos, GRID_ROW_LENGTH_SMALL, GRID_COL_LENGTH_SMALL);\r\n    } else {\r\n      const endPos = { row: GRID_ROW_LENGTH_MOBILE - 1, col: GRID_COL_LENGTH_MOBILE - 1};\r\n        return this.createGrid(startPos, endPos, GRID_ROW_LENGTH_MOBILE, GRID_COL_LENGTH_MOBILE);\r\n    }\r\n  }\r\n\r\n  createGrid(startPos, endPos, rowLength, colLength) {\r\n    // Create a new grid which holds nodes\r\n    const grid = [];\r\n    for (let row = 0; row < rowLength; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colLength; col++) {\r\n        const newNode = createNewNode(row, col);\r\n        // If the position is at the designated start\r\n        // or end, add the start and node to that cell\r\n        if (row === startPos.row && col === startPos.col) {\r\n          newNode.isStartNode = true;\r\n          this.setState({ startNode: newNode });\r\n        }\r\n        if (row === endPos.row && col === endPos.col) {\r\n          newNode.isEndNode = true;\r\n          this.setState({ endNode: newNode });\r\n        }\r\n\r\n        currentRow.push(newNode);\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n\r\n    return grid;\r\n  }\r\n\r\n  randomizeObstacles() {\r\n    const { startNode, endNode, grid } = this.state;\r\n\r\n    const startPos = {\r\n      row: startNode.row,\r\n      col: startNode.col,\r\n    };\r\n    const endPos = {\r\n      row: endNode.row,\r\n      col: endNode.col,\r\n    };\r\n\r\n    const rowLength = grid.length;\r\n    const colLength = grid[0].length\r\n\r\n    const newGrid = this.createGrid(startPos, endPos, rowLength, colLength);\r\n\r\n    for (let row = 0; row < rowLength; row++) {\r\n      for (let col = 0; col < colLength; col++) {\r\n        if (\r\n          (startPos.row === row && startPos.col === col) ||\r\n          (endPos.row === row && endPos.col === col)\r\n        ) {\r\n          continue;\r\n        }\r\n        var randomNum = Math.floor(Math.random() * 10 + 1);\r\n        if (randomNum <= 3) {\r\n          const node = newGrid[row][col];\r\n          node.isObstacle = true;\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-obstacle\";\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid, disableClicking: false });\r\n  }\r\n\r\n  resetPath() {\r\n    const { grid, startNode, endNode } = this.state;\r\n    const startPos = {\r\n      row: startNode.row,\r\n      col: startNode.col,\r\n    };\r\n    const endPos = {\r\n      row: endNode.row,\r\n      col: endNode.col,\r\n    };\r\n\r\n    const rowLength = grid.length;\r\n    const colLength = grid[0].length\r\n\r\n    const newGrid = this.createGrid(startPos, endPos, rowLength, colLength);\r\n\r\n    for (let row = 0; row < rowLength; row++) {\r\n      for (let col = 0; col < colLength; col++) {\r\n        const node = newGrid[row][col];\r\n        node.isObstacle = grid[row][col].isObstacle;\r\n        if (node.isObstacle) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-obstacle\";\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({ grid: newGrid, disableClicking: false });\r\n  }\r\n\r\n  visualizeAlgorithm(grid, startNode, endNode) {\r\n    this.setState({ disableClicking: true, cancelSearch: false });\r\n    // Grab our values and call the animate function for visualization\r\n    const { activeAlgorithm } = this.props;\r\n    var visitedNodesInOrder = []\r\n\r\n    if (activeAlgorithm === \"A*\")\r\n      visitedNodesInOrder = astar(grid, startNode, endNode);\r\n    else if (activeAlgorithm === \"Dijkstra\")\r\n      visitedNodesInOrder = dijkstra(grid, startNode, endNode);\r\n    else if (activeAlgorithm === \"GBF\")\r\n      visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\r\n    else if (activeAlgorithm === \"BFS\")\r\n      visitedNodesInOrder = bfs(grid, startNode, endNode);\r\n    else if (activeAlgorithm === \"DFS\")\r\n      visitedNodesInOrder = dfs(grid, startNode, endNode);\r\n\r\n    const shortestPathInOrder = getResultPath(endNode);\r\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\r\n  }\r\n\r\n  resetObstacles() {\r\n    this.setState({ cancelSearch: true });\r\n    const { startNode, endNode, grid } = this.state;\r\n\r\n    const newGrid = this.createGrid(startNode, endNode, grid.length, grid[0].length);\r\n    const newStart = newGrid[startNode.row][startNode.col];\r\n    const newEnd = newGrid[endNode.row][endNode.col];\r\n    newStart.isStartNode = true;\r\n    newEnd.isEndNode = true;\r\n    this.setState({\r\n      startNode: newStart,\r\n      endNode: newEnd,\r\n      grid: newGrid,\r\n      disableClicking: false,\r\n    });\r\n    this.resetGridStyles(newGrid);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      grid,\r\n      mouseIsPressed,\r\n      startNode,\r\n      endNode,\r\n      disableClicking,\r\n      mouseHoldsStart,\r\n      mouseHoldsEnd\r\n    } = this.state;\r\n\r\n    const {\r\n      tutorialEnabled,\r\n      aboutAlgorithmEnabled,\r\n      aboutDataStructureEnabled,\r\n    } = this.props;\r\n\r\n    const windowIsOpened =\r\n      tutorialEnabled || aboutAlgorithmEnabled || aboutDataStructureEnabled;\r\n   \r\n    \r\n    return (\r\n      <>\r\n        <ActionBar \r\n        onPlayClick={() => this.visualizeAlgorithm(grid, startNode, endNode)}\r\n        onResetPathClick={() => {\r\n          this.cancelTimeouts();\r\n          this.resetGridStyles(grid); \r\n          this.resetPath();\r\n        }}\r\n        onResetObstaclesClick={() => {\r\n          this.cancelTimeouts();\r\n          this.resetGridStyles(grid);\r\n          this.resetObstacles()\r\n        }}\r\n        onRandomizeClick={() => {\r\n          this.cancelTimeouts();\r\n          this.resetGridStyles(grid);\r\n          this.randomizeObstacles();\r\n        }}\r\n        disablePlay={disableClicking || windowIsOpened || mouseHoldsStart || mouseHoldsEnd}\r\n        disableOthers = {windowIsOpened || mouseHoldsStart || mouseHoldsEnd}\r\n        > \r\n        </ActionBar>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowId) => {\r\n            return (\r\n              <div key={rowId}>\r\n                {row.map((node, nodeId) => {\r\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeId}\r\n                      row={row}\r\n                      col={col}\r\n                      isStartNode={isStartNode}\r\n                      isEndNode={isEndNode}\r\n                      isObstacle={isObstacle}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseOut={(row, col) => this.handleMouseOut(row, col)}\r\n                      onMouseDown={(row, col) =>\r\n                        this.handleMouseDown(row, col, windowIsOpened)\r\n                      }\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={(row, col) => this.handleMouseUp(row, col)}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst createNewNode = (row, col) => {\r\n  // Create a new node\r\n  const newNode = {\r\n    row,\r\n    col,\r\n    g: Infinity,\r\n    h: Infinity,\r\n    isStartNode: false,\r\n    isEndNode: false,\r\n    isVisited: false,\r\n    isObstacle: false,\r\n    neighborNodes: [],\r\n    parentNode: null,\r\n  };\r\n\r\n  return newNode;\r\n};\r\n\r\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isObstacle: !node.isObstacle,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithNewStart = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isStartNode: !node.isStartNode,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithNewEnd = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isEndNode: !node.isEndNode,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n\r\n  return newGrid;\r\n};\r\n\r\nconst getResultPath = (endNode) => {\r\n  // Check to see if there is a path\r\n  // if not just return an empty array\r\n  if (endNode.parentNode === null) return [];\r\n\r\n  // Get the shortest path by backtracking\r\n  // each node\r\n  const shortestPathInOrder = [];\r\n  let scanningNode = endNode.parentNode;\r\n\r\n  while (scanningNode.parentNode) {\r\n    shortestPathInOrder.push(scanningNode);\r\n    scanningNode = scanningNode.parentNode;\r\n  }\r\n\r\n  return shortestPathInOrder;\r\n};\r\n\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./TutorialDialog.css\";\r\nimport { MdClear } from \"react-icons/md\"; \r\nimport { IoMdArrowForward } from \"react-icons/io\";\r\nimport { IoMdArrowBack } from \"react-icons/io\";\r\n\r\nconst SMALL_ICON_SIZE = 25;\r\nconst MEDIUM_ICON_SIZE = 30;\r\nconst LARGE_ICON_SIZE = 40;\r\nconst LARGE_BREAK_POINT = 1200;\r\nconst MEDIUM_BREAK_POINT = 600;\r\nconst LARGE_IMG_SIZE = 200;\r\nconst MEDIUM_IMG_SIZE = 150;\r\nconst SMALL_IMG_SIZE = 100;\r\n\r\nexport default class TutorialDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      windowWidth: window.innerWidth\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", () => {\r\n      this.setState({windowWidth: window.innerWidth});\r\n    });\r\n  }\r\n\r\n  onWindowResize() {\r\n\r\n  }\r\n\r\n  render() {\r\n    const {title, gifPath, gifAlt, text, curPageNumber, totalPageNumber, showPrev, showNext} = this.props;\r\n    const {windowWidth} = this.state;\r\n    const iconSize = windowWidth > LARGE_BREAK_POINT \r\n    ? LARGE_ICON_SIZE : windowWidth > MEDIUM_BREAK_POINT \r\n    ? MEDIUM_ICON_SIZE : SMALL_ICON_SIZE;\r\n\r\n    const imgSize = windowWidth > LARGE_BREAK_POINT \r\n    ? LARGE_IMG_SIZE : windowWidth > MEDIUM_BREAK_POINT  \r\n    ? MEDIUM_IMG_SIZE : SMALL_IMG_SIZE;\r\n\r\n\r\n    const prevButtonRender = showPrev ?  \r\n    <div id=\"back\" onClick={this.props.decrementPage}><IoMdArrowBack size={iconSize}></IoMdArrowBack></div>\r\n    : '';\r\n\r\n    const nextButtonRender = showNext ?  \r\n    <div id=\"next\" onClick={this.props.incrementPage}><IoMdArrowForward size={iconSize}></IoMdArrowForward></div>\r\n    : '';\r\n\r\n    const imgRender = gifPath ? \r\n    <img\r\n            src={require(`./../../gifs/${gifPath}.gif`)}\r\n            alt={gifAlt}\r\n            width={imgSize}\r\n            height={imgSize}\r\n    ></img> : ''\r\n\r\n    const extraRender = curPageNumber === 12 ? \r\n    <p className=\"paragraph\">\r\n          This repo can be found at:&nbsp;\r\n          <a\r\n            href=\"https://github.com/MilanFatschel/Pathfinder_Simulator/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            GitHub Link\r\n          </a>\r\n          <br></br> Contact: Milan.Fatschel@gmail.com\r\n    </p>\r\n    : '';\r\n\r\n\r\n    return (\r\n      <div className=\"tutorial\">\r\n        <div className=\"header\">\r\n          <div className=\"title\">{title}</div>\r\n          <div id=\"exit\" onClick={this.props.skip}><MdClear size={iconSize}></MdClear></div>\r\n        </div>\r\n        <div className=\"body\">\r\n          {imgRender}\r\n          <p>{text}</p> \r\n          {extraRender}\r\n        </div>\r\n        <div className=\"footer\">\r\n        {prevButtonRender}\r\n        <div id=\"pages\">{curPageNumber}/{totalPageNumber}</div>\r\n        {nextButtonRender}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export default class TutorialData {\r\n\r\n    static get dataMap() {\r\n        return [\r\n            // 1\r\n            {\r\n                title: \"Welcome to the Pathfinding Simulator\",\r\n                gifPath: \"destination\",\r\n                gifAlt: \"Welcome GIF\",\r\n                text: \"If you want to skip the tutorial, feel free to exit. Press the next button to continue!\", \r\n                showNext: true,\r\n                showPrev: false\r\n            },\r\n            // 2\r\n            {\r\n                title: \"What is Pathfinding?\",\r\n                gifPath: \"bfs\",\r\n                gifAlt: \"Pathfinding Example\",\r\n                text: \"Pathfinding algorithms seek to find a path from a starting point to an end point. Some path algorithms are tuned to find the shortest path while others just find an available path. You can click on the 'About Pathfinding Algorithms' dropdown to learn more about each algorithmand how they individually work. Some of these algorithms are used by routing apps such as Uber, Lyft, and Google Maps. Their search algorithms will quickly search the area and use roads as an agent to expand to the destination. In our case, we will just use grid cells as our 'available roads' to keep things simple. Click next to learn about the controls of the simulator!\", \r\n                showNext: true,\r\n                showPrev: true\r\n            },\r\n            // 3\r\n            {\r\n                title: \"Placing Obstacles\",\r\n                gifPath: \"toggleobstacle\",\r\n                gifAlt: \"Toggle obstacle example\",\r\n                text: \"Activate any obstacle by simply clicking on an empty grid cell. Clicking on the obstacle again will deactivate it.\", \r\n                showNext: true,\r\n                showPrev: true\r\n            },\r\n            // 4\r\n            {\r\n                title: \"Placing Multiple Obstacles\",\r\n                gifPath: \"dragobstacle\",\r\n                gifAlt: \"Mutliple obstacles example\",\r\n                text: \"Press and drag on empty cells to continously activate obstacles. Pressing and dragging over obstacles will continously deactivate them.\", \r\n                showNext: true,\r\n                showPrev: true\r\n            },\r\n            // 5\r\n            {\r\n                title: \"Positioning the Start and End Nodes\",\r\n                gifPath: \"dragstartend\",\r\n                gifAlt: \"drag\",\r\n                text: \"Drag and drop either the start (green) or end (red) node on an empty cell to reposition the node.\", \r\n                showNext: true,\r\n                showPrev: true\r\n            },\r\n            // 6\r\n            {\r\n                title: \"Choosing an Algorithm\",\r\n                gifPath: \"choosealgorithm\",\r\n                gifAlt: \"Choose algorithm example\",\r\n                text: \"Select the 'Choose Algorithm' dropdown to choose which pathfinding algorithm you would like to simulate.\", \r\n                showNext: true,\r\n                showPrev: true\r\n            },\r\n            // 7\r\n            {\r\n                title: \"Adjusting Simulation Speed\",\r\n                gifPath: \"adjustspeed\",\r\n                gifAlt: \"Adjust speed example\",\r\n                text: \"Select the 'Adjust Simulation Speed' dropdown to adjust the animation search speed of the simulator.\", \r\n                showNext: true,\r\n                showPrev: true\r\n            },\r\n            // 8\r\n            {\r\n                title: \"Simulating the Pathfinding Search\",\r\n                gifPath: \"simulate\",\r\n                gifAlt: \"Welcome\",\r\n                text: \"Select the 'Simulate' button to start the pathfinding search. The blue cells represent nodes that were checked for a path while the yellow cells represent the final result path from the algorithm.\", \r\n                showNext: true,\r\n                showPrev: true\r\n            },\r\n            // 9\r\n            {\r\n                title: \"Clearing the Simulated Search\",\r\n                gifPath: \"clear\",\r\n                gifAlt: \"Clear example\",\r\n                text: \"Select the 'Reset Path' button to clear the path.\", \r\n                showNext: true,\r\n                showPrev: true\r\n            },\r\n            // 10\r\n            {\r\n                title: \"Clearing All Obstacles\",\r\n                gifPath: \"reset\",\r\n                gifAlt: \"Clear example\",\r\n                text: \"Select the 'Reset Obstacles' button to clear all placed obstacles.\", \r\n                showNext: true,\r\n                showPrev: true\r\n            },\r\n            // 11\r\n            {\r\n                title: \"Generating Random Obstacles\",\r\n                gifPath: \"randomize\",\r\n                gifAlt: \"Randomize obstacle example\",\r\n                text: \"Select the 'Randomize Obstacles' button to randomly generate obstacles over the grid.\", \r\n                showNext: true,\r\n                showPrev: true\r\n            },\r\n            // 12\r\n            {\r\n                title: \"That's it!\",\r\n                gifAlt: \"Welcome\",\r\n                text: \"Find more information about the algorithms and data structures behind the simulator in the 'About Pathfinding Algorithms' and 'About DataStructures' dropdowns.\", \r\n                showNext: false,\r\n                showPrev: true\r\n            }\r\n        ]\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport TutorialDialog from \"./TutorialDialog\";\r\nimport TutorialData from \"./../../data/Tutorial-Data\"\r\n\r\nexport default class Tutorial extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      curPageNumber: 1,\r\n      totalPageNumber: 12\r\n    };\r\n    this.incrementPage = this.incrementPage.bind(this);\r\n    this.decrementPage = this.decrementPage.bind(this);\r\n    this.skip = this.skip.bind(this);\r\n  }\r\n\r\n  incrementPage() {\r\n    const newPageNumber = this.state.curPageNumber + 1;\r\n    this.setState({ curPageNumber: newPageNumber });\r\n  }\r\n\r\n  decrementPage() {\r\n    const newPageNumber = this.state.curPageNumber - 1;\r\n    this.setState({ curPageNumber: newPageNumber });\r\n  }\r\n\r\n  skip() {\r\n    const newPageNumber = 1;\r\n    this.setState({ curPageNumber: newPageNumber });\r\n    this.props.closeTutorial();\r\n  }\r\n\r\n  render() {\r\n    var { curPageNumber, totalPageNumber } = this.state;;\r\n    const {title, gifPath, gifAlt, text, showNext, showPrev} = TutorialData.dataMap[curPageNumber - 1];\r\n\r\n    return (\r\n      <TutorialDialog\r\n        title={title}\r\n        gifPath={gifPath}\r\n        gifAlt={gifAlt}\r\n        text={text}\r\n        showNext={showNext}\r\n        showPrev={showPrev}\r\n        curPageNumber={curPageNumber}\r\n        totalPageNumber={totalPageNumber}\r\n        incrementPage={this.incrementPage}\r\n        decrementPage={this.decrementPage}\r\n        skip={this.skip}>\r\n      </TutorialDialog>\r\n    );\r\n  }\r\n}\r\n","export default class AboutStructuresData {\r\n\r\n    static data = {\r\n        \"A*\":\r\n        {\r\n            title: \"A*\",\r\n            gifPath: \"astarslow\",\r\n            gifAlt: \"A* example\",\r\n            text: `A* aims to find the shortest path from the start node to the end node. \r\n            It explores each node starting with the ones with the smallest heuristic cost. \r\n            The huerstic function for the implemented algorithmwas simply the known distance g(n) \r\n            from the start node to the current explored node (which starts at 0) in addition to the \r\n            the euclide an distance h(n) from the current explored node to the end node. This formula \r\n            f(n) = g(n) + h(n), gives us an estimation of how short the path f(n) is if we were to use \r\n            that explored node (marked in blue above). A min heap is used to efficiently sort each one \r\n            of the nodesby their smallest hueristic function which are then removed after all of the \r\n            nodes' neighbors have been visited. A* is considered a balance between Dijkstra and Greedy.\r\n            \\n The code for the implementation of A* can be found here:`, \r\n            link: \"https://github.com/MilanFatschel/Pathfinder_Simulator/blob/master/src/algorithms/Astar.js\"\r\n        },\r\n        \"Dijkstra\":\r\n        {\r\n            title: \"Dijkstra\",\r\n            gifPath: \"dijkstraslow\",\r\n            gifAlt: \"Dijkstra example\",\r\n            text: `Dijkstra aims to find the shortest path from the start node to the end\r\n            node. It explores each node starting with the ones with the smallest\r\n            heuristic cost and will find the shortest path to each node. The\r\n            huerstic function for the implemented algorithm was simply the known\r\n            distance g(n) from the start node to the current explored node (which\r\n            starts at 0). This formula f(n) = h(n), gives us an estimation of how\r\n            close the path of the explored node (marked in blue above) is to the\r\n            start node. Dijkstra will visit each unvisted node and update it if it\r\n            has smaller f(n). As a result, Dijkstra tries to cover as many cells\r\n            as it can until it reaches the end node, staying as close as it can to\r\n            the start node. A min heap is used to efficiently sort each one of the\r\n            nodes by their smallest hueristic function which are removed when the\r\n            nodes' neighbors have all been visited. Dijkstra is regarded as one of\r\n            the most commonly used pathfinding algorithms.\r\n            \\nThe code for the implementation of Dijkstra can be found here:`,\r\n            link: \"https://github.com/MilanFatschel/Pathfinder_Simulator/blob/master/src/algorithms/Dijkstra.js\"\r\n        },\r\n        \"GBF\":\r\n        {\r\n            title: \"Greedy-Best-First\",\r\n            gifPath: \"gbfslow\",\r\n            gifAlt: \"GBF example\",\r\n            text: `Greedy-Best-First aims to find a path from the start node to the end\r\n            node. It is extemely aggressive and speedy, but at the cost that it\r\n            won't find the shortest path everytime. It explores each node starting\r\n            with the ones with the smallest heuristic cost and updates them with\r\n            their parent node (where it came from) if a lower hueristic distance\r\n            is found. The huerstic function for the implemented algorithm was\r\n            simply the euclidean distance h(n) from the current explored node\r\n            (which starts at 0) to the end node. This formula f(n) = h(n), gives\r\n            us an estimation of how close we are to the end node at the current\r\n            explored node (marked in blue). A min heap is used to efficiently sort\r\n            each one of the nodes by their smallest hueristic function which are\r\n            removed when all of the nodes' neighbors have been visited.\r\n            Greedy-Best-First can be considerably faster than other algorithms if\r\n            a path (not always the shortest) is desired.\r\n            \\nThe code for the implementation of Greedy-Best-First can be found here:`,\r\n            link: \"https://github.com/MilanFatschel/Pathfinder_Simulator/blob/master/src/algorithms/GreedyBestFirst.js\"\r\n        },\r\n        \"BFS\":\r\n        {\r\n            title: \"Breadth-First-Search\",\r\n            gifPath: \"bfsslow\",\r\n            gifAlt: \"BFS example\",\r\n            text: `Breadth-First-Search aims to find the shortest path from the start\r\n            node to the end node. The BFS expores nodes level by level, and\r\n            updates each node with their parent (where they came from) with each\r\n            new visit. Levels are defined as multiple nodes with the same exact\r\n            distance to the start node. Expanding level by level forces the\r\n            algorithm to return the shortest path when it finally hits the end\r\n            node, since the level distances are the same. The BFS uses a queue to\r\n            keep track of this level ordering of nodes. When all of the nodes'\r\n            neighbors have been visited it will be removed from the queue. BFS may\r\n            be slower than others with heuristics but it is easier to implement.\r\n            However, it is still fully effective in producing an accurate shortest\r\n            path.\r\n            \\nThe code for the implementation of BFS can be found here:`,\r\n            link:\"https://github.com/MilanFatschel/Pathfinder_Simulator/blob/master/src/algorithms/BFS.js\"\r\n        },\r\n        \"DFS\":\r\n        {\r\n            title: \"Depth-First-Search\",\r\n            gifPath: \"dfsslow\",\r\n            gifAlt: \"DFS example\",\r\n            text: `The Depth-First-Search, while very applicable and useful in many\r\n            situations, is not a great algorithm for pathfinding. The DFS has the\r\n            characteristic of exploring whatever it sees first. This produces no\r\n            real direction and a guess of where the end node is. The result is a\r\n            random path as the DFS will eventually reach the end as it seaches all\r\n            nodes and updates its parents. A stack or recursion is used to keep\r\n            track of these nodes to keep the \"first-come first-serve\" order. When\r\n            all of the nodes' neighbors have been visited it will be removed from\r\n            the stack. The DFS would not be used in pathfinding but this still\r\n            provides a nice visual of how the algorithm searches graphs.\r\n            \\nThe code for the implementation of DFS can be found here:`,\r\n            link: \"https://github.com/MilanFatschel/Pathfinder_Simulator/blob/master/src/algorithms/DFS.js\",\r\n        }\r\n    }\r\n\r\n    static getData(algo) {\r\n        return this.data[algo];\r\n    }\r\n}","import React, { Component } from \"react\";\r\n\r\nimport \"./SimpleDialog.css\";\r\nimport { MdClear } from \"react-icons/md\"; \r\n\r\nconst SMALL_ICON_SIZE = 25;\r\nconst MEDIUM_ICON_SIZE = 30;\r\nconst LARGE_ICON_SIZE = 40;\r\nconst LARGE_BREAK_POINT = 1200;\r\nconst MEDIUM_BREAK_POINT = 600;\r\nconst LARGE_IMG_SIZE = 200;\r\nconst MEDIUM_IMG_SIZE = 150;\r\nconst SMALL_IMG_SIZE = 100;\r\n\r\nexport default class SimpleDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      windowWidth: window.innerWidth\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", () => {\r\n      this.setState({windowWidth: window.innerWidth});\r\n    });\r\n  }\r\n\r\n  onWindowResize() {\r\n\r\n  }\r\n\r\n  render() {\r\n    const {title, gifPath, gifAlt, text, link } = this.props;\r\n    const {windowWidth} = this.state;\r\n    const iconSize = windowWidth > LARGE_BREAK_POINT \r\n    ? LARGE_ICON_SIZE : windowWidth > MEDIUM_BREAK_POINT \r\n    ? MEDIUM_ICON_SIZE : SMALL_ICON_SIZE;\r\n\r\n    const imgSize = windowWidth > LARGE_BREAK_POINT \r\n    ? LARGE_IMG_SIZE : windowWidth > MEDIUM_BREAK_POINT  \r\n    ? MEDIUM_IMG_SIZE : SMALL_IMG_SIZE;\r\n\r\n    const imgRender = gifPath ? \r\n    <img\r\n            src={require(`./../../gifs/${gifPath}.gif`)}\r\n            alt={gifAlt}\r\n            width={imgSize}\r\n            height={imgSize}\r\n    ></img> : ''\r\n    \r\n    return (\r\n      <div className=\"simple\">\r\n        <div className=\"header\">\r\n          <div className=\"title\">{title}</div>\r\n          <div id=\"exit\" onClick={this.props.skip}><MdClear size={iconSize}></MdClear></div>\r\n        </div>\r\n        <div className=\"body\">\r\n          {imgRender}\r\n          <p>{text}</p> \r\n          <a\r\n            href={link}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >Github Link</a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n ","import React, { Component } from \"react\";\r\nimport AboutAlorithmsData from \"../../data/About-Algorithms-Data\";\r\nimport SimpleDialog from \"../SimpleDialog/SimpleDialog\";\r\n\r\nexport default class AboutAlgorithmsDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    const dialogData = AboutAlorithmsData.getData(this.props.algorithm);\r\n   \r\n    return (\r\n      <SimpleDialog\r\n      title={dialogData.title}\r\n      gifPath={dialogData.gifPath}\r\n      gifAlt={dialogData.gifAlt}\r\n      text={dialogData.text}\r\n      link={dialogData.link}\r\n      skip={this.props.skip}\r\n      ></SimpleDialog>\r\n    );\r\n  }\r\n}\r\n","export default class AboutStructuresData {\r\n\r\n    static data = {\r\n        \"Heap\":\r\n        {\r\n            title: \"The Heap\",\r\n            gifPath: \"heap\",\r\n            gifAlt: \"Heap example\",\r\n            text: `The heap can be thought of as an efficient structure that keeps track\r\n            of a minimum or maximum element in a list or array. Heaps are useful\r\n            when quick and constant access is needed to this minimum or maximum\r\n            element. Heaps use trees as seen above, to either \"bubble up\" or\r\n            \"bubble down\" an element when it is inserted or removed. The binary\r\n            tree allows us to remove and insert items in log(n) time and access\r\n            the minimum or maximum element in constant time. This can be much more\r\n            efficent than having to sort every element. A*, Dijkstra, and\r\n            Greedy-Best-First all use the heap to keep track of their minimum\r\n            heuristic element or the best path at that time!\r\n            \\nThe code for the implemented heap can be found here (heap-js-library):`, \r\n            link: \"https://github.com/ignlg/heap-js/blob/master/dist/heap-js.es5.js\"\r\n        },\r\n        \"Queue\":\r\n        {\r\n            title: \"The Queue\",\r\n            gifPath: \"queue\",\r\n            gifAlt: \"Queue example\",\r\n            text: `The queue resembles that of the \"first-come, first-serve\" or a line of\r\n            people waiting to purchase something. This allows us to keep the\r\n            First-In First-Out ordering and also makes removing and inserting from\r\n            the queue very efficient (constant, since we only need to keep track\r\n            of the front item). Here, enqueue (push) adds an item to the back of\r\n            the queue and deqeue (pop) removes an item from the front of the\r\n            queue. The peek (front) method returns the current front item in the\r\n            queue. In our case, the items in the above image can be thought of\r\n            each grid cell in the search. The queue can be seen in action with the\r\n            Breadth-First-Search algorithm.\r\n            \\nThe code for the implemented queue can be found here:`,\r\n            link: \"https://github.com/MilanFatschel/Pathfinder_Simulator/blob/master/src/structures/Queue.js\"\r\n        },\r\n        \"Stack\":\r\n        {\r\n            title: \"The Stack\",\r\n            gifPath: \"stack\",\r\n            gifAlt: \"Stack example\",\r\n            text: `The stack can be thought of a physical stack of books. As you place\r\n            books on top of each other you can only take off the top book in order\r\n            to remove things from the stack. This allows us to keep the Last-In\r\n            First-Out ordering and also makes removing and inserting from the\r\n            stack very efficient (constant, since we only need to keep track of\r\n            the top item). Here, push adds an item and pop removes an item. The\r\n            peek method returns the current top item in the stack. In our case,\r\n            the red items in the above image can be thought of each grid cell in\r\n            the search. The stack can be seen in action with Depth-First-Search\r\n            algorithm.\r\n            \\nThe code for the implemented stack can be found here:`,\r\n            link: \"https://github.com/MilanFatschel/Pathfinder_Simulator/blob/master/src/structures/Stack.js\"\r\n        }\r\n    }\r\n\r\n    static getData(structure) {\r\n        return this.data[structure];\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport AboutStructuresData from \"../../data/About-Structures-Data\";\r\nimport SimpleDialog from \"../SimpleDialog/SimpleDialog\";\r\n\r\nexport default class AboutStructuresDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    const dialogData = AboutStructuresData.getData(this.props.structure);\r\n   \r\n    return (\r\n      <SimpleDialog\r\n      title={dialogData.title}\r\n      gifPath={dialogData.gifPath}\r\n      gifAlt={dialogData.gifAlt}\r\n      text={dialogData.text}\r\n      link={dialogData.link}\r\n      skip={this.props.skip}\r\n      ></SimpleDialog>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Navigationbar from \"../NavigationBar/NavigationBar\";\r\nimport Display from \"../Display/Display\";\r\nimport Tutorial from \"../Tutorial/Tutorial\";\r\nimport AboutAlgorithmsDialog from \"../AboutAlgorithms/AboutAlgorithmsDialog\";\r\nimport AboutStructuresDialog from \"../AboutStructures/AboutStructuresDialog\";\r\n\r\nexport default class Simulation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // Defaults\r\n      activeAlgorithm: \"A*\",\r\n      aboutAlgorithm: \"\",\r\n      aboutDataStructure: \"\",\r\n      simulatorSpeed: 1.0,\r\n      tutorialEnabled: true,\r\n      mouseHold: false\r\n    };\r\n\r\n    this.onClickAlgorithm = this.onClickAlgorithm.bind(this);\r\n    this.onClickSpeed = this.onClickSpeed.bind(this);\r\n    this.onClickAboutAlgorithm = this.onClickAboutAlgorithm.bind(this);\r\n    this.onClickAboutDataStructure = this.onClickAboutDataStructure.bind(this);\r\n    this.createTutorialEvent = this.createTutorialEvent.bind(this);\r\n    this.closeTutorial = this.closeTutorial.bind(this);\r\n    this.closeAboutAlgorithm = this.closeAboutAlgorithm.bind(this);\r\n    this.closeAboutDataStructure = this.closeAboutDataStructure.bind(this);\r\n    this.mouseHoldOnEvent = this.mouseHoldOnEvent.bind(this);\r\n    this.mouseHoldOffEvent = this.mouseHoldOffEvent.bind(this);\r\n  }\r\n\r\n  onComponentDidMount() {\r\n  }\r\n\r\n  // On Click Events\r\n  createTutorialEvent() {\r\n    this.setState({ tutorialEnabled: true });\r\n  }\r\n\r\n  // Item clicks for algorithms\r\n  onClickAlgorithm(e, algorithm) {\r\n    e.preventDefault();\r\n    this.setState({ activeAlgorithm: algorithm });\r\n  }\r\n\r\n  // Item Clicks for Simulation Speed\r\n  onClickSpeed(e, speed) {\r\n    e.preventDefault();\r\n    this.setState({ simulatorSpeed: speed });\r\n  }\r\n\r\n  // About Algorithms on Clicks\r\n  onClickAboutAlgorithm(algorithm) {\r\n    this.setState({ aboutAlgorithm: algorithm, aboutAlgorithmEnabled: true });\r\n  }\r\n\r\n  // About Data Structures on Clicks\r\n  onClickAboutDataStructure(dataStructure) {\r\n    this.setState({\r\n      aboutDataStructure: dataStructure,\r\n      aboutDataStructureEnabled: true,\r\n    });\r\n  }\r\n\r\n  // Closing Events\r\n  closeAboutAlgorithm() {\r\n    this.setState({ aboutAlgorithm: \"\", aboutAlgorithmEnabled: false });\r\n  }\r\n\r\n  closeAboutDataStructure() {\r\n    this.setState({\r\n      aboutDataStructure: \"\",\r\n      aboutDataStructureEnabled: false,\r\n    });\r\n  }\r\n\r\n  closeTutorial() {\r\n    this.setState({ tutorialEnabled: false });\r\n  }\r\n\r\n  // Mouse Holds\r\n  mouseHoldOnEvent() {\r\n    this.setState({ mouseHold: true})\r\n\r\n  }\r\n\r\n  mouseHoldOffEvent() {\r\n    this.setState({ mouseHold: false})\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      tutorialEnabled,\r\n      mouseHold,\r\n      aboutAlgorithmEnabled,\r\n      aboutDataStructureEnabled,\r\n      aboutAlgorithm,\r\n      aboutDataStructure,\r\n      activeAlgorithm,\r\n      simulatorSpeed,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {tutorialEnabled ? (\r\n          <Tutorial closeTutorial={this.closeTutorial}></Tutorial>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        {aboutAlgorithm.length > 0 ? (\r\n          <AboutAlgorithmsDialog\r\n            algorithm={aboutAlgorithm}\r\n            skip={this.closeAboutAlgorithm}\r\n          ></AboutAlgorithmsDialog>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        {aboutDataStructure.length > 0 ? (\r\n          <AboutStructuresDialog\r\n          structure={aboutDataStructure}\r\n          skip={this.closeAboutDataStructure}\r\n        ></AboutStructuresDialog>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        <Navigationbar\r\n          tutorialEnabled={tutorialEnabled}\r\n          mouseHold={mouseHold}\r\n          aboutAlgorithmEnabled={aboutAlgorithmEnabled}\r\n          aboutDataStructureEnabled={aboutDataStructureEnabled}\r\n          activeAlgorithm={activeAlgorithm}\r\n          simulatorSpeed={simulatorSpeed}\r\n          onClickAlgorithm={this.onClickAlgorithm}\r\n          onClickSpeed={this.onClickSpeed}\r\n          createTutorialEvent={this.createTutorialEvent}\r\n          onClickAboutAlgorithm={this.onClickAboutAlgorithm}\r\n          onClickAboutDataStructure={this.onClickAboutDataStructure}\r\n        ></Navigationbar>\r\n        <Display\r\n          tutorialEnabled={tutorialEnabled}\r\n          aboutAlgorithmEnabled={aboutAlgorithmEnabled}\r\n          aboutDataStructureEnabled={aboutDataStructureEnabled}\r\n          activeAlgorithm={activeAlgorithm}\r\n          simulatorSpeed={simulatorSpeed}\r\n          mouseHoldOnEvent={this.mouseHoldOnEvent}\r\n          mouseHoldOffEvent={this.mouseHoldOffEvent}\r\n        ></Display>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Simulation from \"./components/Simulation/Simulation\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Simulation></Simulation>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}