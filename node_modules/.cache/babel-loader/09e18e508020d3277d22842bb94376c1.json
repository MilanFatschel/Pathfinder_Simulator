{"ast":null,"code":"import Heap from \"heap-js\"; // A* Algorithm\n// Returns list of nodes that have been visited, and\n// each of the nodes' parent node which will be used\n// for creating our final shortest path\n\nexport function astar(grid, startNode, endNode) {\n  // Inital check on our parameters\n  if (!startNode || !endNode || startNode === endNode) {\n    return false;\n  } // Add each nodes' neighbors before\n  // starting\n\n\n  addNeighborNodes(grid); // Create visited array for visualization\n\n  const visitedNodes = []; // Start by adding our start Node\n  // Calculate initial g,h, and f\n\n  startNode.g = 0;\n  startNode.h = getChebyshevDistance(startNode, endNode);\n  startNode.f = startNode.g + startNode.h; // Push in startNode as first in our min heap\n\n  const customPriorityComparator = (a, b) => a.f - b.f;\n\n  const nodeHeap = new Heap(customPriorityComparator);\n  nodeHeap.push(startNode); // A* algorithm starts here....\n\n  while (nodeHeap.length > 0) {\n    // Check to see if the next node in the list is visited or the end node.\n    // If so remove it, we do not need to check it\n    while (nodeHeap.length > 0 && (nodeHeap.peek().isVisited || nodeHeap.peek() === endNode)) {\n      // Check to see if we are finished/at the end node\n      if (nodeHeap.peek() === endNode) {\n        console.log(visitedNodes);\n        return visitedNodes;\n      }\n\n      nodeHeap.remove();\n    } // Make sure our list is not empty\n\n\n    if (nodeHeap.length > 0) {\n      // Mark current node as visited, add to visited array\n      console.log(nodeHeap.length);\n      const currentNode = nodeHeap.peek();\n      currentNode.isVisited = true; // push nodes visited into array for rendering\n      // keep start and end nodes out of list\n\n      if (currentNode !== startNode && currentNode !== endNode) visitedNodes.push(currentNode);\n\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\n        // Get current neighbor being scanned\n        var nodeNeighbor = currentNode.neighborNodes[i]; // Calculate possible lower g value\n\n        var possibleLowerG = currentNode.g + getChebyshevDistance(currentNode, nodeNeighbor); // If lower, update the current g and the parent.\n        // Recalculate the new h\n\n        if (possibleLowerG < nodeNeighbor.g) {\n          nodeNeighbor.parentNode = currentNode;\n          nodeNeighbor.g = possibleLowerG;\n          nodeNeighbor.h = getChebyshevDistance(nodeNeighbor, endNode); // f(n) = g(n) + h(n)\n\n          nodeNeighbor.f = nodeNeighbor.g + nodeNeighbor.h; // If the node neighbor has not been visited and is not an\n          // obstacle add it to the node list\n\n          if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle) nodeHeap.push(nodeNeighbor);\n        }\n      }\n    } else {\n      // No solutions, show the visited nodes\n      return visitedNodes;\n    }\n  }\n}\n\nconst getChebyshevDistance = (nodeA, nodeB) => {\n  y_dist = abs(nodeA.y - nodeB.y);\n  x_dist = abs(nodeA.x - nodeB.x);\n  return max(y_dist, x_dist);\n}; // Euclidean hueristic function\n\n\nconst getEuclideanDistance = (nodeA, nodeB) => {\n  return Math.sqrt((nodeA.col - nodeB.col) * (nodeA.col - nodeB.col) + (nodeA.row - nodeB.row) * (nodeA.row - nodeB.row));\n};\n\nconst addNeighborNodes = grid => {\n  // Adds each neighbor node in the grid.\n  // Have to make sure we do not run out of bounds\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (i < grid.length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n\n      if (j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n\n      if (i < grid.length - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n\n      if (i > 0 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/algorithms/astar.js"],"names":["Heap","astar","grid","startNode","endNode","addNeighborNodes","visitedNodes","g","h","getChebyshevDistance","f","customPriorityComparator","a","b","nodeHeap","push","length","peek","isVisited","console","log","remove","currentNode","i","neighborNodes","nodeNeighbor","possibleLowerG","parentNode","isObstacle","nodeA","nodeB","y_dist","abs","y","x_dist","x","max","getEuclideanDistance","Math","sqrt","col","row","j"],"mappings":"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","sourcesContent":["import Heap from \"heap-js\";\n// A* Algorithm\n// Returns list of nodes that have been visited, and\n// each of the nodes' parent node which will be used\n// for creating our final shortest path\n\nexport function astar(grid, startNode, endNode) {\n  // Inital check on our parameters\n  if (!startNode || !endNode || startNode === endNode) {\n    return false;\n  }\n\n  // Add each nodes' neighbors before\n  // starting\n  addNeighborNodes(grid);\n\n  // Create visited array for visualization\n  const visitedNodes = [];\n\n  // Start by adding our start Node\n  // Calculate initial g,h, and f\n  startNode.g = 0;\n  startNode.h = getChebyshevDistance(startNode, endNode);\n  startNode.f = startNode.g + startNode.h;\n\n  // Push in startNode as first in our min heap\n  const customPriorityComparator = (a, b) => a.f - b.f;\n  const nodeHeap = new Heap(customPriorityComparator);\n  nodeHeap.push(startNode);\n\n  // A* algorithm starts here....\n  while (nodeHeap.length > 0) {\n    // Check to see if the next node in the list is visited or the end node.\n    // If so remove it, we do not need to check it\n    while (\n      nodeHeap.length > 0 &&\n      (nodeHeap.peek().isVisited || nodeHeap.peek() === endNode)\n    ) {\n      // Check to see if we are finished/at the end node\n      if (nodeHeap.peek() === endNode) {\n        console.log(visitedNodes);\n        return visitedNodes;\n      }\n      nodeHeap.remove();\n    }\n\n    // Make sure our list is not empty\n    if (nodeHeap.length > 0) {\n      // Mark current node as visited, add to visited array\n      console.log(nodeHeap.length);\n      const currentNode = nodeHeap.peek();\n      currentNode.isVisited = true;\n\n      // push nodes visited into array for rendering\n      // keep start and end nodes out of list\n      if (currentNode !== startNode && currentNode !== endNode)\n        visitedNodes.push(currentNode);\n\n      for (var i = 0; i < currentNode.neighborNodes.length; i++) {\n        // Get current neighbor being scanned\n        var nodeNeighbor = currentNode.neighborNodes[i];\n\n        // Calculate possible lower g value\n        var possibleLowerG =\n          currentNode.g + getChebyshevDistance(currentNode, nodeNeighbor);\n\n        // If lower, update the current g and the parent.\n        // Recalculate the new h\n        if (possibleLowerG < nodeNeighbor.g) {\n          nodeNeighbor.parentNode = currentNode;\n          nodeNeighbor.g = possibleLowerG;\n          nodeNeighbor.h = getChebyshevDistance(nodeNeighbor, endNode);\n\n          // f(n) = g(n) + h(n)\n          nodeNeighbor.f = nodeNeighbor.g + nodeNeighbor.h;\n\n          // If the node neighbor has not been visited and is not an\n          // obstacle add it to the node list\n          if (!nodeNeighbor.isVisited && !nodeNeighbor.isObstacle)\n            nodeHeap.push(nodeNeighbor);\n        }\n      }\n    } else {\n      // No solutions, show the visited nodes\n      return visitedNodes;\n    }\n  }\n}\n\nconst getChebyshevDistance = (nodeA, nodeB) => {\n  y_dist = abs(nodeA.y - nodeB.y);\n  x_dist = abs(nodeA.x - nodeB.x);\n  return max(y_dist, x_dist);\n};\n\n// Euclidean hueristic function\nconst getEuclideanDistance = (nodeA, nodeB) => {\n  return Math.sqrt(\n    (nodeA.col - nodeB.col) * (nodeA.col - nodeB.col) +\n      (nodeA.row - nodeB.row) * (nodeA.row - nodeB.row)\n  );\n};\n\nconst addNeighborNodes = (grid) => {\n  // Adds each neighbor node in the grid.\n  // Have to make sure we do not run out of bounds\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (i < grid.length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n      if (j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n      if (i < grid.length - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n      if (i > 0 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n      if (i < grid.length - 1 && j < grid[i].length - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}