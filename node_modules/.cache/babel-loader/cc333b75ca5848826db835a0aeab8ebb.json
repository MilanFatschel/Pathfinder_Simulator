{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 19;\nconst GRID_ROW_LENGTH = 20;\nconst GRID_COL_LENGTH = 20;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    addNeighborNodes(grid);\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    console.log(\"mouse is pressed\");\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  animateNodeList(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i]; // React not refreshing correctly for animation\n        // so have to do it this way for now\n\n        document.getElementById(`node-${node.row}-${$node.col}`).className = \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  visualizeAstar() {\n    // Grab our values and call the animate function for visualization\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(startNode, endNode);\n    this.animateNodeList(visitedNodesInOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAstar(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, \"A*\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst addNeighborNodes = grid => {\n  // Adds each neighbor node in the grid.\n  // Have to make sure we do not run out of bounds\n  for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n    for (let j = 0; j < GRID_COL_LENGTH; j++) {\n      if (i < GRID_COL_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n\n      if (j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n\n      if (i < GRID_COL_LENGTH - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n\n      if (i > 0 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n\n      if (i < GRID_COL_LENGTH - 1 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_ROW_LENGTH","GRID_COL_LENGTH","Display","constructor","props","state","grid","mouseIsPressed","componentDidMount","createGrid","addNeighborNodes","setState","handleMouseDown","row","col","newGrid","getNewGridWithToggledObstacle","handleMouseUp","handleMouseEnter","console","log","animateNodeList","visitedNodesInOrder","i","length","setTimeout","node","document","getElementById","$node","className","visualizeAstar","startNode","endNode","render","map","rowId","nodeId","isStartNode","isEndNode","isObstacle","currentRow","push","createNewNode","newNode","g","Infinity","h","isVisited","neighborNodes","parentNode","j","slice"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 19;\nconst GRID_ROW_LENGTH = 20;\nconst GRID_COL_LENGTH = 20;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    addNeighborNodes(grid);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    console.log(\"mouse is pressed\");\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  animateNodeList(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        // React not refreshing correctly for animation\n        // so have to do it this way for now\n        document.getElementById(`node-${node.row}-${$node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  visualizeAstar() {\n    // Grab our values and call the animate function for visualization\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(startNode, endNode);\n    this.animateNodeList(visitedNodesInOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <>\n        <button onClick={() => this.visualizeAstar()}>A*</button>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst addNeighborNodes = (grid) => {\n  // Adds each neighbor node in the grid.\n  // Have to make sure we do not run out of bounds\n\n  for (let i = 0; i < GRID_ROW_LENGTH; i++) {\n    for (let j = 0; j < GRID_COL_LENGTH; j++) {\n      if (i < GRID_COL_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j]);\n      }\n      if (i > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j]);\n      }\n      if (j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i][j + 1]);\n      }\n      if (j > 0) {\n        grid[i][j].neighborNodes.push(grid[i][j - 1]);\n      }\n      if (i > 0 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j - 1]);\n      }\n      if (i < GRID_COL_LENGTH - 1 && j > 0) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j - 1]);\n      }\n      if (i > 0 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i - 1][j + 1]);\n      }\n      if (i < GRID_COL_LENGTH - 1 && j < GRID_ROW_LENGTH - 1) {\n        grid[i][j].neighborNodes.push(grid[i + 1][j + 1]);\n      }\n    }\n  }\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}