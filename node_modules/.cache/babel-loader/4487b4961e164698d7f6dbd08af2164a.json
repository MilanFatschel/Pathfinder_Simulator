{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst GRID_ROW_LENGTH = 20;\nconst GRID_COL_LENGTH = 20;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: []\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  animateNodeList(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const newGrid = this.state.grid.slice();\n        const newNode = { ...node,\n          isVisited: true\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({\n          grid: newGrid\n        });\n      }, 25 * i);\n    }\n  }\n\n  visualizeAstar() {\n    // Grab our values and call the animate function for visualization\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_ROW];\n    const endNode = grid[END_NODE_ROW][END_NODE_ROW];\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    this.animateNodeList(visitedNodesInOrder);\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAstar(),\n      Run: true,\n      astar: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          isStartNode,\n          isEndNode,\n          isVisited\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isVisited: isVisited,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst createGrid = () => {\n  // Display Grid and Nodes\n  const grid = [];\n\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (col, row) => {\n  const newNode = {\n    col,\n    row,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_ROW,\n    isVisited: false,\n    isObstacle: false,\n    neighbors: null,\n    parentNode: null\n  };\n  return newNode;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","GRID_ROW_LENGTH","GRID_COL_LENGTH","Display","constructor","props","state","grid","componentDidMount","createGrid","setState","animateNodeList","visitedNodesInOrder","i","length","setTimeout","node","newGrid","slice","newNode","isVisited","row","col","visualizeAstar","startNode","endNode","render","map","rowIdx","nodeIdx","isStartNode","isEndNode","currentRow","push","createNode","createNewNode","g","Infinity","h","isObstacle","neighbors","parentNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst GRID_ROW_LENGTH = 20;\nconst GRID_COL_LENGTH = 20;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({ grid });\n  }\n\n  animateNodeList(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const newGrid = this.state.grid.slice();\n        const newNode = {\n          ...node,\n          isVisited: true,\n        };\n        newGrid[node.row][node.col] = newNode;\n        this.setState({ grid: newGrid });\n      }, 25 * i);\n    }\n  }\n\n  visualizeAstar() {\n    // Grab our values and call the animate function for visualization\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_ROW];\n    const endNode = grid[END_NODE_ROW][END_NODE_ROW];\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    this.animateNodeList(visitedNodesInOrder);\n  }\n\n  render() {\n    const { grid } = this.state;\n    return (\n      <div>\n        <button onClick={() => this.visualizeAstar()} Run astar></button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { isStartNode, isEndNode, isVisited } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isVisited={isVisited}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst createGrid = () => {\n  // Display Grid and Nodes\n  const grid = [];\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (col, row) => {\n  const newNode = {\n    col,\n    row,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_ROW,\n    isVisited: false,\n    isObstacle: false,\n    neighbors: null,\n    parentNode: null,\n  };\n\n  return newNode;\n};\n"]},"metadata":{},"sourceType":"module"}