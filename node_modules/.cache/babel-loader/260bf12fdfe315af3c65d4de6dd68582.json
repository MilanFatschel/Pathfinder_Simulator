{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutAlgorithm/AboutBFS.js\";\nimport React, { Component } from \"react\";\nimport \"./AboutAlgorithm.css\";\nexport default class AboutBFS extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tutorial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"Breadth-First-Search\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"algorithm-image\",\n      src: require(\"./../../gifs/bfsslow.gif\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"paragraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, \"Breadth-First-Search aims to find the shortest path from the start node to the end node. The BFS expores nodes level by level, and updates each node with their parent (where they came from) with each new visit. Levels are defined as multiple nodes with the same exact distance to the start node. Expanding level by level forces the algorithm to return the shortest path when it finally hits the end node, since the level distances are the same. The BFS uses a queue to keep track of this level ordering of nodes. When all of the nodes' neighbors have been visited it will be removed from the queue. BFS may be slower than others with heuristics but it is easier to implement. However, it is still fully effective in producing an accurate shortest path.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }), \" The code for the implementation of BFS can be found here:\\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://github.com/MilanFatschel/Pathfinder_Algorithm_Simulator/blob/master/src/algorithms/BFS.js\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, \"Breath-First-Search\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"next\",\n      onClick: () => {\n        this.props.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"Close\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutAlgorithm/AboutBFS.js"],"names":["React","Component","AboutBFS","constructor","props","state","render","require","close"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,sBAAP;AAEA,eAAe,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAC9CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,eAEE;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,GAAG,EAAEC,OAAO,CAAC,0BAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAME;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wwBAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,iFAcE;AACE,MAAA,IAAI,EAAC,mGADP;AAEE,MAAA,MAAM,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAdF,CANF,eA2BE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKH,KAAL,CAAWI,KAAX;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA3BF,CADF;AAsCD;;AA7C6C","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./AboutAlgorithm.css\";\n\nexport default class AboutBFS extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"tutorial\">\n        <h3 className=\"title\">Breadth-First-Search</h3>\n        <img\n          className=\"algorithm-image\"\n          src={require(\"./../../gifs/bfsslow.gif\")}\n        ></img>\n        <p className=\"paragraph\">\n          Breadth-First-Search aims to find the shortest path from the start\n          node to the end node. The BFS expores nodes level by level, and\n          updates each node with their parent (where they came from) with each\n          new visit. Levels are defined as multiple nodes with the same exact\n          distance to the start node. Expanding level by level forces the\n          algorithm to return the shortest path when it finally hits the end\n          node, since the level distances are the same. The BFS uses a queue to\n          keep track of this level ordering of nodes. When all of the nodes'\n          neighbors have been visited it will be removed from the queue. BFS may\n          be slower than others with heuristics but it is easier to implement.\n          However, it is still fully effective in producing an accurate shortest\n          path.\n          <br /> The code for the implementation of BFS can be found here:&nbsp;\n          <a\n            href=\"https://github.com/MilanFatschel/Pathfinder_Algorithm_Simulator/blob/master/src/algorithms/BFS.js\"\n            target=\"_blank\"\n          >\n            Breath-First-Search\n          </a>\n        </p>\n        <button\n          className=\"next\"\n          onClick={() => {\n            this.props.close();\n          }}\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}