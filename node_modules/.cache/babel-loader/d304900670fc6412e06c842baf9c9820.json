{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutDataStructure/AboutHeap.js\";\nimport React, { Component } from \"react\";\nimport \"./AboutDataStructure.css\";\nexport default class AboutHeap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tutorial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, \"The Heap\"), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"heap-image\",\n      src: require(\"./../../gifs/heap.gif\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"paragraph\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, \"The heap can be thought of as an efficient structure that keeps track of a minimum or maximum element in a list or array. Heaps are useful when quick and constant access is needed to this minimum or maximum element. Heaps use trees as seen above, to either \\\"bubble up\\\" or \\\"bubble down\\\" an element when it is inserted or removed. The binary tree allows us to remove and insert items in log(n) time and access the minimum or maximum element in constant time. This can be much more efficent than having to sort every element. A*, Dijkstra, and Greedy-Best-First all use the heap to keep track of their minimum heuristic element or the best path at that time!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }), \" The code for the implemented heap can be found here(heap-js library):\\xA0\", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://github.com/MilanFatschel/PathFinder_Algorithm_Visualization/blob/master/src/structures/heap.js\",\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }\n    }, \"Heap\")), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"next\",\n      onClick: () => {\n        this.props.close();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, \"Close\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/AboutDataStructure/AboutHeap.js"],"names":["React","Component","AboutHeap","constructor","props","state","render","require","close"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,0BAAP;AAEA,eAAe,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAC/CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,MAAA,SAAS,EAAC,YADZ;AAEE,MAAA,GAAG,EAAEC,OAAO,CAAC,uBAAD,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAME;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2qBAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,6FAaE;AACE,MAAA,IAAI,EAAC,wGADP;AAEE,MAAA,MAAM,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,CANF,eA0BE;AACE,MAAA,SAAS,EAAC,MADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKH,KAAL,CAAWI,KAAX;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA1BF,CADF;AAqCD;;AA5C8C","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./AboutDataStructure.css\";\n\nexport default class AboutHeap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"tutorial\">\n        <h3 className=\"title\">The Heap</h3>\n        <img\n          className=\"heap-image\"\n          src={require(\"./../../gifs/heap.gif\")}\n        ></img>\n        <p className=\"paragraph\">\n          The heap can be thought of as an efficient structure that keeps track\n          of a minimum or maximum element in a list or array. Heaps are useful\n          when quick and constant access is needed to this minimum or maximum\n          element. Heaps use trees as seen above, to either \"bubble up\" or\n          \"bubble down\" an element when it is inserted or removed. The binary\n          tree allows us to remove and insert items in log(n) time and access\n          the minimum or maximum element in constant time. This can be much more\n          efficent than having to sort every element. A*, Dijkstra, and\n          Greedy-Best-First all use the heap to keep track of their minimum\n          heuristic element or the best path at that time!\n          <br /> The code for the implemented heap can be found here(heap-js\n          library):&nbsp;\n          <a\n            href=\"https://github.com/MilanFatschel/PathFinder_Algorithm_Visualization/blob/master/src/structures/heap.js\"\n            target=\"_blank\"\n          >\n            Heap\n          </a>\n        </p>\n        <button\n          className=\"next\"\n          onClick={() => {\n            this.props.close();\n          }}\n        >\n          Close\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}