{"ast":null,"code":"// A* Algorithm\n// Returns list of nodes that have been visited, and\n// each of the nodes' parent node which will be used\n// for creating our final shortest path\nexport function astar(grid, startNode, endNode) {\n  // Inital check on our parameters\n  if (!startNode || !endNode || startNode === endNode) {\n    return false;\n  } // Create visited array for visualization\n\n\n  const visitedNodes = []; // Start by adding our start Node\n  // Calculate initial g,h, and f\n\n  startNode.g = 0;\n  startNode.h = startNode.getEuclideanDistanceToNode(endNode);\n  startNode.f = startNode.g + startNode.h; // Push in startNode as first in our list\n\n  const nodeList = [];\n  nodeList.push(startNode); // A* algorithm starts here....\n\n  while (nodeList.length > 0) {\n    // Normally we would use a priority queue here to omptimize the\n    // algorithm instead of sorting our list everytime. Javascript doesn't\n    // have anything built in so for simplicity will just use this method for now.\n    // A priority queue would do this for us as we add in our nodes with a min heap.\n    // Sort from greatest to least based on the heuristic function. Sorting backwards,\n    // so we can just use the pop() function on our list to remove the next queued node easily.\n    nodeList.sort((a, b) => a.f < b.f ? 1 : -1); // Check to see if the next node in the list is visited or the end node.\n    // If so remove it, we do not need to check it\n\n    while (nodeList.length > 0 && (nodeList[nodeList.length - 1].isVisited || nodeList[nodeList.length - 1] === endNode)) {\n      // Check to see if we are finished/at the end node\n      if (nodeList[nodeList.length - 1] === endNode) {\n        return visitedNodes;\n      }\n\n      nodeList.pop();\n    } // Make sure our list is not empty\n\n\n    if (nodeList.length > 0) {\n      // Mark current node as visited, add to visited array\n      const currentNode = nodeList[nodeList.length - 1];\n      currentNode.isVisited = true;\n      visitedNodes.push(currentNode);\n\n      for (var i = 0; i < currentNode.neighbors.length; i++) {\n        // Get current neighbor being scanned\n        var nodeNeighbor = currentNode.neighbors[i]; // If the node neighbor has not been visited and is not an\n        // obstacle add it to the node list\n\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.obstacle) nodeList.push(nodeNeighbor); // Calculate possible lower g value\n\n        var possibleLowerG = currentNode.g + currentNode.getEuclideanDistanceToNode(nodeNeighbor); // If lower, update the current g and the parent.\n        // Recalculate the new h\n\n        if (possibleLowerG < nodeNeighbor.g) {\n          nodeNeighbor.parentNode = currentNode;\n          nodeNeighbor.g = possibleLowerG;\n          nodeNeighbor.h = nodeNeighbor.getEuclideanDistanceToNode(endNode); // f(n) = g(n) + h(n)\n\n          nodeNeighbor.f = nodeNeighbor.g + nodeNeighbor.h;\n        }\n      }\n    } else {\n      break;\n    }\n  }\n} // Euclidean hueristic function\n\nfunction getEuclideanDistanceToNode(otherNode) {\n  return (this.col - otherNode.col) * (this.col - otherNode.col) + (this.row - otherNode.row) * (this.row - otherNode.row);\n}","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/algorithms/astar.js"],"names":["astar","grid","startNode","endNode","visitedNodes","g","h","getEuclideanDistanceToNode","f","nodeList","push","length","sort","a","b","isVisited","pop","currentNode","i","neighbors","nodeNeighbor","obstacle","possibleLowerG","parentNode","otherNode","col","row"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAO,SAASA,KAAT,CAAeC,IAAf,EAAqBC,SAArB,EAAgCC,OAAhC,EAAyC;AAC9C;AACA,MAAI,CAACD,SAAD,IAAc,CAACC,OAAf,IAA0BD,SAAS,KAAKC,OAA5C,EAAqD;AACnD,WAAO,KAAP;AACD,GAJ6C,CAM9C;;;AACA,QAAMC,YAAY,GAAG,EAArB,CAP8C,CAS9C;AACA;;AACAF,EAAAA,SAAS,CAACG,CAAV,GAAc,CAAd;AACAH,EAAAA,SAAS,CAACI,CAAV,GAAcJ,SAAS,CAACK,0BAAV,CAAqCJ,OAArC,CAAd;AACAD,EAAAA,SAAS,CAACM,CAAV,GAAcN,SAAS,CAACG,CAAV,GAAcH,SAAS,CAACI,CAAtC,CAb8C,CAe9C;;AACA,QAAMG,QAAQ,GAAG,EAAjB;AACAA,EAAAA,QAAQ,CAACC,IAAT,CAAcR,SAAd,EAjB8C,CAmB9C;;AACA,SAAOO,QAAQ,CAACE,MAAT,GAAkB,CAAzB,EAA4B;AAC1B;AACA;AACA;AACA;AAEA;AACA;AACAF,IAAAA,QAAQ,CAACG,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACL,CAAF,GAAMM,CAAC,CAACN,CAAR,GAAY,CAAZ,GAAgB,CAAC,CAA1C,EAR0B,CAU1B;AACA;;AACA,WACEC,QAAQ,CAACE,MAAT,GAAkB,CAAlB,KACCF,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAR,CAA8BI,SAA9B,IACCN,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAR,KAAkCR,OAFpC,CADF,EAIE;AACA;AACA,UAAIM,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAR,KAAkCR,OAAtC,EAA+C;AAC7C,eAAOC,YAAP;AACD;;AACDK,MAAAA,QAAQ,CAACO,GAAT;AACD,KAtByB,CAwB1B;;;AACA,QAAIP,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AACvB;AACA,YAAMM,WAAW,GAAGR,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAA5B;AACAM,MAAAA,WAAW,CAACF,SAAZ,GAAwB,IAAxB;AACAX,MAAAA,YAAY,CAACM,IAAb,CAAkBO,WAAlB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,SAAZ,CAAsBR,MAA1C,EAAkDO,CAAC,EAAnD,EAAuD;AACrD;AACA,YAAIE,YAAY,GAAGH,WAAW,CAACE,SAAZ,CAAsBD,CAAtB,CAAnB,CAFqD,CAIrD;AACA;;AACA,YAAI,CAACE,YAAY,CAACL,SAAd,IAA2B,CAACK,YAAY,CAACC,QAA7C,EACEZ,QAAQ,CAACC,IAAT,CAAcU,YAAd,EAPmD,CASrD;;AACA,YAAIE,cAAc,GAChBL,WAAW,CAACZ,CAAZ,GAAgBY,WAAW,CAACV,0BAAZ,CAAuCa,YAAvC,CADlB,CAVqD,CAarD;AACA;;AACA,YAAIE,cAAc,GAAGF,YAAY,CAACf,CAAlC,EAAqC;AACnCe,UAAAA,YAAY,CAACG,UAAb,GAA0BN,WAA1B;AACAG,UAAAA,YAAY,CAACf,CAAb,GAAiBiB,cAAjB;AACAF,UAAAA,YAAY,CAACd,CAAb,GAAiBc,YAAY,CAACb,0BAAb,CAAwCJ,OAAxC,CAAjB,CAHmC,CAKnC;;AACAiB,UAAAA,YAAY,CAACZ,CAAb,GAAiBY,YAAY,CAACf,CAAb,GAAiBe,YAAY,CAACd,CAA/C;AACD;AACF;AACF,KA9BD,MA8BO;AACL;AACD;AACF;AACF,C,CAED;;AACA,SAASC,0BAAT,CAAoCiB,SAApC,EAA+C;AAC7C,SACE,CAAC,KAAKC,GAAL,GAAWD,SAAS,CAACC,GAAtB,KAA8B,KAAKA,GAAL,GAAWD,SAAS,CAACC,GAAnD,IACA,CAAC,KAAKC,GAAL,GAAWF,SAAS,CAACE,GAAtB,KAA8B,KAAKA,GAAL,GAAWF,SAAS,CAACE,GAAnD,CAFF;AAID","sourcesContent":["// A* Algorithm\n// Returns list of nodes that have been visited, and\n// each of the nodes' parent node which will be used\n// for creating our final shortest path\n\nexport function astar(grid, startNode, endNode) {\n  // Inital check on our parameters\n  if (!startNode || !endNode || startNode === endNode) {\n    return false;\n  }\n\n  // Create visited array for visualization\n  const visitedNodes = [];\n\n  // Start by adding our start Node\n  // Calculate initial g,h, and f\n  startNode.g = 0;\n  startNode.h = startNode.getEuclideanDistanceToNode(endNode);\n  startNode.f = startNode.g + startNode.h;\n\n  // Push in startNode as first in our list\n  const nodeList = [];\n  nodeList.push(startNode);\n\n  // A* algorithm starts here....\n  while (nodeList.length > 0) {\n    // Normally we would use a priority queue here to omptimize the\n    // algorithm instead of sorting our list everytime. Javascript doesn't\n    // have anything built in so for simplicity will just use this method for now.\n    // A priority queue would do this for us as we add in our nodes with a min heap.\n\n    // Sort from greatest to least based on the heuristic function. Sorting backwards,\n    // so we can just use the pop() function on our list to remove the next queued node easily.\n    nodeList.sort((a, b) => (a.f < b.f ? 1 : -1));\n\n    // Check to see if the next node in the list is visited or the end node.\n    // If so remove it, we do not need to check it\n    while (\n      nodeList.length > 0 &&\n      (nodeList[nodeList.length - 1].isVisited ||\n        nodeList[nodeList.length - 1] === endNode)\n    ) {\n      // Check to see if we are finished/at the end node\n      if (nodeList[nodeList.length - 1] === endNode) {\n        return visitedNodes;\n      }\n      nodeList.pop();\n    }\n\n    // Make sure our list is not empty\n    if (nodeList.length > 0) {\n      // Mark current node as visited, add to visited array\n      const currentNode = nodeList[nodeList.length - 1];\n      currentNode.isVisited = true;\n      visitedNodes.push(currentNode);\n\n      for (var i = 0; i < currentNode.neighbors.length; i++) {\n        // Get current neighbor being scanned\n        var nodeNeighbor = currentNode.neighbors[i];\n\n        // If the node neighbor has not been visited and is not an\n        // obstacle add it to the node list\n        if (!nodeNeighbor.isVisited && !nodeNeighbor.obstacle)\n          nodeList.push(nodeNeighbor);\n\n        // Calculate possible lower g value\n        var possibleLowerG =\n          currentNode.g + currentNode.getEuclideanDistanceToNode(nodeNeighbor);\n\n        // If lower, update the current g and the parent.\n        // Recalculate the new h\n        if (possibleLowerG < nodeNeighbor.g) {\n          nodeNeighbor.parentNode = currentNode;\n          nodeNeighbor.g = possibleLowerG;\n          nodeNeighbor.h = nodeNeighbor.getEuclideanDistanceToNode(endNode);\n\n          // f(n) = g(n) + h(n)\n          nodeNeighbor.f = nodeNeighbor.g + nodeNeighbor.h;\n        }\n      }\n    } else {\n      break;\n    }\n  }\n}\n\n// Euclidean hueristic function\nfunction getEuclideanDistanceToNode(otherNode) {\n  return (\n    (this.col - otherNode.col) * (this.col - otherNode.col) +\n    (this.row - otherNode.row) * (this.row - otherNode.row)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}