{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\"; // Constants\n\nconst GRID_ROW_LENGTH = 25;\nconst GRID_COL_LENGTH = 60;\nconst SIMULATION_SPEED = 50;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      startCancelPos: {},\n      endCancelPos: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false,\n      searchInProgress: false\n    };\n  }\n\n  componentDidMount() {\n    const startPos = {\n      row: 0,\n      col: 0\n    };\n    const endPos = {\n      row: GRID_ROW_LENGTH - 1,\n      col: GRID_COL_LENGTH - 1\n    };\n    const grid = this.createGrid(startPos, endPos);\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const {\n      grid,\n      startNode,\n      endNode,\n      mouseHoldsStart,\n      mouseHoldsEnd,\n      disableClicking\n    } = this.state; // Alogrithm in progress don't allow clicking\n\n    if (disableClicking || mouseHoldsStart || mouseHoldsEnd) return; // Check to see if the mouse clicked on the start\n    // or end point\n\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true,\n        savedGrid: grid,\n        startCancelPos: {\n          row: row,\n          col: col\n        }\n      });\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true,\n        endCancelPos: {\n          row: row,\n          col: col\n        }\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // Check to see if the grid spot is already occupied\n    // if so cancel\n    // If the user releases the start or end on a grid\n    // set the start on that grid\n    const {\n      grid,\n      startCancelPos,\n      endCancelPos\n    } = this.state;\n    const currentNode = grid[row][col];\n\n    if (this.state.mouseHoldsStart) {\n      // Check to see if the grid spot is already occupied\n      // if so cancel\n      if (currentNode.isEndNode || currentNode.isObstacle) {\n        const newGrid = getNewGridWithNewStart(grid, startCancelPos.row, startCancelPos.col);\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid,\n          startNode: grid[startCancelPos.row][startCancelPos.col]\n        });\n        return;\n      }\n\n      this.setState({\n        startNode: currentNode\n      });\n    } else if (this.state.mouseHoldsEnd) {\n      if (currentNode.isStartNode || currentNode.isObstacle) {\n        const newGrid = getNewGridWithNewEnd(this.state.grid, endCancelPos.row, endCancelPos.col);\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid,\n          endNode: grid[endCancelPos.row][endCancelPos.col]\n        });\n        return;\n      }\n\n      this.setState({\n        endNode: currentNode\n      });\n    }\n\n    this.setState({\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      mouseIsPressed: false\n    });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n    const {\n      grid\n    } = this.state;\n\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n\n    if (this.state.mouseHoldsEnd) {\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n    const {\n      grid\n    } = this.state; // If we enter a new grid with the start held, generate a new start\n\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid\n      });\n    } // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n        if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n        const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n        this.setState({\n          grid: newGrid\n        });\n      } // Toogle the obstacles\n      else {\n          if (grid[row][col].isStartNode || grid[row][col].isEndNode) return;\n          const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid\n          });\n        }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    const speed = SIMULATION_SPEED / this.props.simulatorSpeed;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, speed * i);\n        console.log(\"done\");\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, speed * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n        clearTimeout(3);\n      }, 40 * i);\n    }\n  }\n\n  resetGridStyles(grid) {\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = grid[row][col];\n\n        if (!node.isStartNode && !node.isEndNode) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node\";\n        }\n      }\n    }\n  }\n\n  createGrid(startPos, endPos) {\n    // Create a new grid which holds nodes\n    const grid = [];\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const newNode = createNewNode(row, col); // If the position is at the designated start\n        // or end, add the start and node to that cell\n\n        if (row == startPos.row && col == startPos.col) {\n          newNode.isStartNode = true;\n          this.setState({\n            startNode: newNode\n          });\n        }\n\n        if (row == endPos.row && col == endPos.col) {\n          newNode.isEndNode = true;\n          this.setState({\n            endNode: newNode\n          });\n        }\n\n        currentRow.push(newNode);\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  randomizeObstacles() {\n    const {\n      startNode,\n      endNode\n    } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        if (startPos.row == row && startPos.col == col || endPos.row == row && endPos.col == col) {\n          continue;\n        }\n\n        var randomNum = Math.floor(Math.random() * 10 + 1);\n\n        if (randomNum <= 3) {\n          const node = newGrid[row][col];\n          node.isObstacle = true;\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-obstacle\";\n        }\n      }\n    }\n\n    this.setState({\n      grid: newGrid,\n      disableClicking: false\n    });\n  }\n\n  resetPath() {\n    const {\n      grid,\n      startNode,\n      endNode\n    } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = newGrid[row][col];\n        node.isObstacle = grid[row][col].isObstacle;\n\n        if (node.isObstacle) {\n          document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-obstacle\";\n        }\n      }\n    }\n\n    this.setState({\n      grid: newGrid,\n      disableClicking: false\n    });\n  }\n\n  visualizeAlgorithm(grid, startNode, endNode) {\n    this.setState({\n      disableClicking: true\n    });\n    this.setState({\n      searchInProgress: true\n    }); // Grab our values and call the animate function for visualization\n\n    const {\n      activeAlgorithm\n    } = this.props;\n    if (activeAlgorithm == \"A*\") visitedNodesInOrder = astar(grid, startNode, endNode);else if (activeAlgorithm == \"Dijkstra\") var visitedNodesInOrder = dijkstra(grid, startNode, endNode);else if (activeAlgorithm == \"GBF\") var visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);else if (activeAlgorithm == \"BFS\") var visitedNodesInOrder = bfs(grid, startNode, endNode);else if (activeAlgorithm == \"DFS\") var visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder); // this.setState({ searchInProgress: false });\n  }\n\n  resetObstacles() {\n    const {\n      startNode,\n      endNode\n    } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n    const newStart = newGrid[startNode.row][startNode.col];\n    const newEnd = newGrid[endNode.row][endNode.col];\n    newStart.isStartNode = true;\n    newEnd.isEndNode = true;\n    this.setState({\n      startNode: newStart,\n      endNode: newEnd,\n      grid: newGrid,\n      disableClicking: false\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      startNode,\n      endNode,\n      disableClicking,\n      searchInProgress\n    } = this.state;\n    const simClassName = disableClicking ? \"button-simulate-red\" : \"button-simulate\";\n    const resetClassName = searchInProgress ? \"button-reset-red\" : \"button-reset\";\n    const clearClassName = searchInProgress ? \"button-clear-red\" : \"button-clear\";\n    const randomizeClassName = searchInProgress ? \"button-randomize-red\" : \"button-randomize\";\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-panel-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: simClassName,\n      onClick: () => {\n        this.visualizeAlgorithm(grid, startNode, endNode);\n      },\n      disabled: disableClicking,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 15\n      }\n    }, \"Simulate\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: clearClassName,\n      onClick: () => {\n        this.resetGridStyles(grid);\n        this.resetPath();\n      } // disabled={disableClicking}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 15\n      }\n    }, \"Reset Path\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: resetClassName,\n      onClick: () => {\n        this.resetGridStyles(grid);\n        this.resetObstacles();\n      } // disabled={disableClicking}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 15\n      }\n    }, \"Reset Obstacles\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: randomizeClassName,\n      onClick: () => {\n        this.resetGridStyles(grid);\n        this.randomizeObstacles();\n      } // disabled={disableClicking}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 15\n      }\n    }, \"Randomize Obstacles\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          mouseIsPressed: mouseIsPressed,\n          onMouseOut: (row, col) => this.handleMouseOut(row, col),\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: (row, col) => this.handleMouseUp(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: false,\n    isEndNode: false,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isStartNode: !node.isStartNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isEndNode: !node.isEndNode\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getResultPath = endNode => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return []; // Get the shortest path by backtracking\n  // each node\n\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","dijkstra","greedybestfirst","bfs","dfs","GRID_ROW_LENGTH","GRID_COL_LENGTH","SIMULATION_SPEED","Display","constructor","props","state","grid","startNode","endNode","startCancelPos","endCancelPos","mouseIsPressed","mouseHoldsStart","mouseHoldsEnd","disableClicking","searchInProgress","componentDidMount","startPos","row","col","endPos","createGrid","setState","handleMouseDown","savedGrid","newGrid","getNewGridWithToggledObstacle","handleMouseUp","currentNode","isEndNode","isObstacle","getNewGridWithNewStart","isStartNode","getNewGridWithNewEnd","handleMouseOut","handleMouseEnter","animateNodeList","visitedNodesInOrder","shortestPathInOrder","speed","simulatorSpeed","i","length","setTimeout","animateShortestPath","console","log","node","document","getElementById","className","clearTimeout","resetGridStyles","currentRow","newNode","createNewNode","push","randomizeObstacles","randomNum","Math","floor","random","resetPath","visualizeAlgorithm","activeAlgorithm","getResultPath","resetObstacles","newStart","newEnd","render","simClassName","resetClassName","clearClassName","randomizeClassName","map","rowId","nodeId","g","Infinity","h","isVisited","neighborNodes","parentNode","slice","scanningNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\nimport \"./Display.css\";\n\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\";\n\n// Constants\nconst GRID_ROW_LENGTH = 25;\nconst GRID_COL_LENGTH = 60;\nconst SIMULATION_SPEED = 50;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      startNode: {},\n      endNode: {},\n      startCancelPos: {},\n      endCancelPos: {},\n      mouseIsPressed: false,\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      disableClicking: false,\n      searchInProgress: false,\n    };\n  }\n\n  componentDidMount() {\n    const startPos = {\n      row: 0,\n      col: 0,\n    };\n    const endPos = {\n      row: GRID_ROW_LENGTH - 1,\n      col: GRID_COL_LENGTH - 1,\n    };\n    const grid = this.createGrid(startPos, endPos);\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const {\n      grid,\n      startNode,\n      endNode,\n      mouseHoldsStart,\n      mouseHoldsEnd,\n      disableClicking,\n    } = this.state;\n\n    // Alogrithm in progress don't allow clicking\n    if (disableClicking || mouseHoldsStart || mouseHoldsEnd) return;\n    // Check to see if the mouse clicked on the start\n    // or end point\n    if (row == startNode.row && col == startNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsStart: true,\n        savedGrid: grid,\n        startCancelPos: { row: row, col: col },\n      });\n    } else if (row == endNode.row && col == endNode.col) {\n      this.setState({\n        mouseIsPressed: true,\n        mouseHoldsEnd: true,\n        endCancelPos: { row: row, col: col },\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp(row, col) {\n    // Check to see if the grid spot is already occupied\n    // if so cancel\n\n    // If the user releases the start or end on a grid\n    // set the start on that grid\n    const { grid, startCancelPos, endCancelPos } = this.state;\n    const currentNode = grid[row][col];\n\n    if (this.state.mouseHoldsStart) {\n      // Check to see if the grid spot is already occupied\n      // if so cancel\n      if (currentNode.isEndNode || currentNode.isObstacle) {\n        const newGrid = getNewGridWithNewStart(\n          grid,\n          startCancelPos.row,\n          startCancelPos.col\n        );\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid,\n          startNode: grid[startCancelPos.row][startCancelPos.col],\n        });\n        return;\n      }\n      this.setState({ startNode: currentNode });\n    } else if (this.state.mouseHoldsEnd) {\n      if (currentNode.isStartNode || currentNode.isObstacle) {\n        const newGrid = getNewGridWithNewEnd(\n          this.state.grid,\n          endCancelPos.row,\n          endCancelPos.col\n        );\n        this.setState({\n          mouseHoldsStart: false,\n          mouseHoldsEnd: false,\n          mouseIsPressed: false,\n          grid: newGrid,\n          endNode: grid[endCancelPos.row][endCancelPos.col],\n        });\n        return;\n      }\n      this.setState({ endNode: currentNode });\n    }\n\n    this.setState({\n      mouseHoldsStart: false,\n      mouseHoldsEnd: false,\n      mouseIsPressed: false,\n    });\n  }\n\n  handleMouseOut(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    const { grid } = this.state;\n\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    if (this.state.mouseHoldsEnd) {\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseEnter(row, col) {\n    // If the mouse isn't held down do not do anything here\n    if (!this.state.mouseIsPressed) return;\n\n    const { grid } = this.state;\n\n    // If we enter a new grid with the start held, generate a new start\n    if (this.state.mouseHoldsStart) {\n      if (grid[row][col].isEndNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // If we enter a new grid with the end held, generate a new end\n    else if (this.state.mouseHoldsEnd) {\n      if (grid[row][col].isStartNode || grid[row][col].isObstacle) return;\n      const newGrid = getNewGridWithNewEnd(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    // Toogle the obstacles\n    else {\n      if (grid[row][col].isStartNode || grid[row][col].isEndNode) return;\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    const speed = SIMULATION_SPEED / this.props.simulatorSpeed;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      // If there is a solution, animate it\n      // If not skip it and just animate the visited nodes\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, speed * i);\n        console.log(\"done\");\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, speed * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n        clearTimeout(3);\n      }, 40 * i);\n    }\n  }\n\n  resetGridStyles(grid) {\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = grid[row][col];\n        if (!node.isStartNode && !node.isEndNode) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node\";\n        }\n      }\n    }\n  }\n\n  createGrid(startPos, endPos) {\n    // Create a new grid which holds nodes\n    const grid = [];\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      const currentRow = [];\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const newNode = createNewNode(row, col);\n        // If the position is at the designated start\n        // or end, add the start and node to that cell\n        if (row == startPos.row && col == startPos.col) {\n          newNode.isStartNode = true;\n          this.setState({ startNode: newNode });\n        }\n        if (row == endPos.row && col == endPos.col) {\n          newNode.isEndNode = true;\n          this.setState({ endNode: newNode });\n        }\n\n        currentRow.push(newNode);\n      }\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  randomizeObstacles() {\n    const { startNode, endNode } = this.state;\n\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col,\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col,\n    };\n    const newGrid = this.createGrid(startPos, endPos);\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        if (\n          (startPos.row == row && startPos.col == col) ||\n          (endPos.row == row && endPos.col == col)\n        ) {\n          continue;\n        }\n        var randomNum = Math.floor(Math.random() * 10 + 1);\n        if (randomNum <= 3) {\n          const node = newGrid[row][col];\n          node.isObstacle = true;\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-obstacle\";\n        }\n      }\n    }\n    this.setState({ grid: newGrid, disableClicking: false });\n  }\n\n  resetPath() {\n    const { grid, startNode, endNode } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col,\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col,\n    };\n\n    const newGrid = this.createGrid(startPos, endPos);\n\n    for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n      for (let col = 0; col < GRID_COL_LENGTH; col++) {\n        const node = newGrid[row][col];\n        node.isObstacle = grid[row][col].isObstacle;\n        if (node.isObstacle) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-obstacle\";\n        }\n      }\n    }\n\n    this.setState({ grid: newGrid, disableClicking: false });\n  }\n\n  visualizeAlgorithm(grid, startNode, endNode) {\n    this.setState({ disableClicking: true });\n    this.setState({ searchInProgress: true });\n    // Grab our values and call the animate function for visualization\n    const { activeAlgorithm } = this.props;\n\n    if (activeAlgorithm == \"A*\")\n      visitedNodesInOrder = astar(grid, startNode, endNode);\n    else if (activeAlgorithm == \"Dijkstra\")\n      var visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    else if (activeAlgorithm == \"GBF\")\n      var visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    else if (activeAlgorithm == \"BFS\")\n      var visitedNodesInOrder = bfs(grid, startNode, endNode);\n    else if (activeAlgorithm == \"DFS\")\n      var visitedNodesInOrder = dfs(grid, startNode, endNode);\n\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n    // this.setState({ searchInProgress: false });\n  }\n\n  resetObstacles() {\n    const { startNode, endNode } = this.state;\n    const startPos = {\n      row: startNode.row,\n      col: startNode.col,\n    };\n    const endPos = {\n      row: endNode.row,\n      col: endNode.col,\n    };\n\n    const newGrid = this.createGrid(startPos, endPos);\n    const newStart = newGrid[startNode.row][startNode.col];\n    const newEnd = newGrid[endNode.row][endNode.col];\n    newStart.isStartNode = true;\n    newEnd.isEndNode = true;\n    this.setState({\n      startNode: newStart,\n      endNode: newEnd,\n      grid: newGrid,\n      disableClicking: false,\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed,\n      startNode,\n      endNode,\n      disableClicking,\n      searchInProgress,\n    } = this.state;\n\n    const simClassName = disableClicking\n      ? \"button-simulate-red\"\n      : \"button-simulate\";\n    const resetClassName = searchInProgress\n      ? \"button-reset-red\"\n      : \"button-reset\";\n    const clearClassName = searchInProgress\n      ? \"button-clear-red\"\n      : \"button-clear\";\n    const randomizeClassName = searchInProgress\n      ? \"button-randomize-red\"\n      : \"button-randomize\";\n    return (\n      <>\n        <div className=\"button-panel-container\">\n          <div className=\"button-panel\">\n            <div className=\"button-group\">\n              <button\n                className={simClassName}\n                onClick={() => {\n                  this.visualizeAlgorithm(grid, startNode, endNode);\n                }}\n                disabled={disableClicking}\n              >\n                Simulate\n              </button>\n              <button\n                className={clearClassName}\n                onClick={() => {\n                  this.resetGridStyles(grid);\n                  this.resetPath();\n                }}\n                // disabled={disableClicking}\n              >\n                Reset Path\n              </button>\n              <button\n                className={resetClassName}\n                onClick={() => {\n                  this.resetGridStyles(grid);\n                  this.resetObstacles();\n                }}\n                // disabled={disableClicking}\n              >\n                Reset Obstacles\n              </button>\n              <button\n                className={randomizeClassName}\n                onClick={() => {\n                  this.resetGridStyles(grid);\n                  this.randomizeObstacles();\n                }}\n                // disabled={disableClicking}\n              >\n                Randomize Obstacles\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseOut={(row, col) => this.handleMouseOut(row, col)}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={(row, col) => this.handleMouseUp(row, col)}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: false,\n    isEndNode: false,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStartNode: !node.isStartNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getNewGridWithNewEnd = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isEndNode: !node.isEndNode,\n  };\n  newGrid[row][col] = newNode;\n\n  return newGrid;\n};\n\nconst getResultPath = (endNode) => {\n  // Check to see if there is a path\n  // if not just return an empty array\n  if (endNode.parentNode == null) return [];\n\n  // Get the shortest path by backtracking\n  // each node\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};\n"]},"metadata":{},"sourceType":"module"}