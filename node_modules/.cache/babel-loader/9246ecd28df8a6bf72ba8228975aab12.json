{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { SceneView } from '@react-navigation/core';\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nclass ResourceSavingSceneView extends React.PureComponent {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.isFocused && !prevState.awake) {\n      return {\n        awake: true\n      };\n    } else {\n      return null;\n    }\n  }\n\n  constructor(props) {\n    super();\n\n    _defineProperty(this, \"_mustAlwaysBeVisible\", () => {\n      return this.props.animationEnabled || this.props.swipeEnabled;\n    });\n\n    this.state = {\n      awake: props.lazy ? props.isFocused : true\n    };\n  }\n\n  render() {\n    const {\n      awake\n    } = this.state;\n\n    const _this$props = this.props,\n          {\n      isFocused,\n      childNavigation,\n      removeClippedSubviews\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"isFocused\", \"childNavigation\", \"removeClippedSubviews\"]);\n\n    return /*#__PURE__*/React.createElement(View, {\n      style: styles.container,\n      collapsable: false,\n      removeClippedSubviews: Platform.OS === 'android' ? removeClippedSubviews : !isFocused && removeClippedSubviews\n    }, /*#__PURE__*/React.createElement(View, {\n      style: this._mustAlwaysBeVisible() || isFocused ? styles.innerAttached : styles.innerDetached\n    }, awake ? /*#__PURE__*/React.createElement(SceneView, _extends({}, rest, {\n      navigation: childNavigation\n    })) : null));\n  }\n\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  innerAttached: {\n    flex: 1\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});\nexport default ResourceSavingSceneView;","map":{"version":3,"sources":["ResourceSavingSceneView.js"],"names":["FAR_FAR_AWAY","React","nextProps","prevState","awake","constructor","props","render","removeClippedSubviews","rest","styles","Platform","innerDetached","childNavigation","container","flex","overflow","innerAttached","top"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,EAAA,UAAA,EAAA,IAAA,QAAA,cAAA;AACA,SAAA,SAAA,QAAA,wBAAA;AAEA,MAAMA,YAAY,GAAlB,IAAA,C,CAA2B;;AAE3B,MAAA,uBAAA,SAAsCC,KAAK,CAA3C,aAAA,CAA0D;AACxD,SAAA,wBAAA,CAAA,SAAA,EAAA,SAAA,EAAsD;AACpD,QAAIC,SAAS,CAATA,SAAAA,IAAuB,CAACC,SAAS,CAArC,KAAA,EAA6C;AAC3C,aAAO;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAP;AADF,KAAA,MAEO;AACL,aAAA,IAAA;AACD;AACF;;AAEDC,EAAAA,WAAW,CAAA,KAAA,EAAQ;AACjB;;AADiB,IAAA,eAAA,CAAA,IAAA,EAAA,sBAAA,EAQI,MAAM;AAC3B,aAAO,KAAA,KAAA,CAAA,gBAAA,IAA+B,KAAA,KAAA,CAAtC,YAAA;AATiB,KAAA,CAAA;;AAGjB,SAAA,KAAA,GAAa;AACXD,MAAAA,KAAK,EAAEE,KAAK,CAALA,IAAAA,GAAaA,KAAK,CAAlBA,SAAAA,GAA+B;AAD3B,KAAb;AAGD;;AAMDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEH,MAAAA;AAAF,QAAY,KAAlB,KAAA;;AACA,UAAA,WAAA,GAKI,KALJ,KAAA;AAAA,UAAM;AAAA,MAAA,SAAA;AAAA,MAAA,eAAA;AAGJI,MAAAA;AAHI,QAAN,WAAA;AAAA,UAIKC,IAJL,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,WAAA,EAAA,iBAAA,EAAA,uBAAA,CAAA,CAAA;;AAOA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,MAAA,KAAK,EAAEC,MAAM,CADf,SAAA;AAEE,MAAA,WAAW,EAFb,KAAA;AAGE,MAAA,qBAAqB,EACnBC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,GAAAA,qBAAAA,GAEI,CAAA,SAAA,IAAcH;AANtB,KAAA,EAAA,aASE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,MAAA,KAAK,EACH,KAAA,oBAAA,MAAA,SAAA,GACIE,MAAM,CADV,aAAA,GAEIA,MAAM,CAACE;AAJf,KAAA,EAOGR,KAAK,GAAA,aAAG,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAAqB,MAAA,UAAU,EAAES;AAAjC,KAAA,CAAA,CAAH,GAjBZ,IAUI,CATF,CADF;AAqBD;;AAnDuD;;AAsD1D,MAAMH,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BI,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BC,EAAAA,aAAa,EAAE;AACbF,IAAAA,IAAI,EAAE;AADO,GALgB;AAQ/BH,EAAAA,aAAa,EAAE;AACbG,IAAAA,IAAI,EADS,CAAA;AAEbG,IAAAA,GAAG,EAAElB;AAFQ;AARgB,CAAlB,CAAf;AAcA,eAAA,uBAAA","sourcesContent":["import React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { SceneView } from '@react-navigation/core';\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nclass ResourceSavingSceneView extends React.PureComponent {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.isFocused && !prevState.awake) {\n      return { awake: true };\n    } else {\n      return null;\n    }\n  }\n\n  constructor(props) {\n    super();\n\n    this.state = {\n      awake: props.lazy ? props.isFocused : true,\n    };\n  }\n\n  _mustAlwaysBeVisible = () => {\n    return this.props.animationEnabled || this.props.swipeEnabled;\n  };\n\n  render() {\n    const { awake } = this.state;\n    const {\n      isFocused,\n      childNavigation,\n      removeClippedSubviews,\n      ...rest\n    } = this.props;\n\n    return (\n      <View\n        style={styles.container}\n        collapsable={false}\n        removeClippedSubviews={\n          Platform.OS === 'android'\n            ? removeClippedSubviews\n            : !isFocused && removeClippedSubviews\n        }\n      >\n        <View\n          style={\n            this._mustAlwaysBeVisible() || isFocused\n              ? styles.innerAttached\n              : styles.innerDetached\n          }\n        >\n          {awake ? <SceneView {...rest} navigation={childNavigation} /> : null}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  innerAttached: {\n    flex: 1,\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n\nexport default ResourceSavingSceneView;\n"]},"metadata":{},"sourceType":"module"}