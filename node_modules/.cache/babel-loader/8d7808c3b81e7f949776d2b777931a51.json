{"ast":null,"code":"var _jsxFileName = \"/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js\";\nimport React, { Component } from \"react\";\nimport Node from \"./../Node/Node\";\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\"; // Constants\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 23;\nconst GRID_COL_LENGTH = 40;\nconst ANIMATION_SPEED = 30;\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    if (row == START_NODE_ROW && col == START_NODE_COL) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({\n        grid: newGrid,\n        mouseIsPressed: true\n      });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, ANIMATION_SPEED * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, ANIMATION_SPEED * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  visualizeAstar(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDijkstra(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeGreedy(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeBFS(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDFS(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeAstar(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, \"A*\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, \"Dijkstra\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeGreedy(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, \"Greedy-best-first\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeBFS(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, \"BFS\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDFS(grid),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, \"DFS\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowId) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeId) => {\n        const {\n          row,\n          col,\n          isStartNode,\n          isEndNode,\n          isObstacle\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeId,\n          row: row,\n          col: col,\n          isStartNode: isStartNode,\n          isEndNode: isEndNode,\n          isObstacle: isObstacle,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null\n  };\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isObstacle: !node.isObstacle\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const startNode = newGrid[row][col];\n  const newNode = { ...node,\n    isStartNode: !isStartNode\n  };\n  newGrid[row][col] = startNode;\n  return newGrid;\n};\n\nconst getResultPath = endNode => {\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};","map":{"version":3,"sources":["/Users/milanfatschel/Desktop/pathfinder_visualization/src/components/Display/Display.js"],"names":["React","Component","Node","astar","dijkstra","greedybestfirst","bfs","dfs","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","GRID_ROW_LENGTH","GRID_COL_LENGTH","ANIMATION_SPEED","Display","constructor","props","state","grid","mouseIsPressed","componentDidMount","createGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithNewStart","getNewGridWithToggledObstacle","handleMouseUp","handleMouseEnter","animateNodeList","visitedNodesInOrder","shortestPathInOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeAstar","startNode","endNode","getResultPath","visualizeDijkstra","visualizeGreedy","visualizeBFS","visualizeDFS","render","map","rowId","nodeId","isStartNode","isEndNode","isObstacle","currentRow","push","createNewNode","newNode","g","Infinity","h","isVisited","neighborNodes","parentNode","slice","scanningNode"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport Node from \"./../Node/Node\";\n\nimport { astar } from \"../../algorithms/astar\";\nimport { dijkstra } from \"../../algorithms/dijkstra\";\nimport { greedybestfirst } from \"../../algorithms/greedybestfirst\";\nimport { bfs } from \"../../algorithms/bfs\";\nimport { dfs } from \"../../algorithms/dfs\";\n\n// Constants\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst END_NODE_ROW = 19;\nconst END_NODE_COL = 39;\nconst GRID_ROW_LENGTH = 23;\nconst GRID_COL_LENGTH = 40;\nconst ANIMATION_SPEED = 30;\n\nexport default class Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    if (row == START_NODE_ROW && col == START_NODE_COL) {\n      const newGrid = getNewGridWithNewStart(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    } else {\n      const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithToggledObstacle(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  animateNodeList(visitedNodesInOrder, shortestPathInOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(shortestPathInOrder);\n        }, ANIMATION_SPEED * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, ANIMATION_SPEED * i);\n    }\n  }\n\n  animateShortestPath(shortestPathInOrder) {\n    for (let i = 0; i < shortestPathInOrder.length; i++) {\n      setTimeout(() => {\n        const node = shortestPathInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 40 * i);\n    }\n  }\n\n  visualizeAstar(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = astar(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDijkstra(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeGreedy(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = greedybestfirst(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeBFS(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = bfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  visualizeDFS(grid) {\n    // Grab our values and call the animate function for visualization\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const endNode = grid[END_NODE_ROW][END_NODE_COL];\n    const visitedNodesInOrder = dfs(grid, startNode, endNode);\n    const shortestPathInOrder = getResultPath(endNode);\n    this.animateNodeList(visitedNodesInOrder, shortestPathInOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <>\n        <button onClick={() => this.visualizeAstar(grid)}>A*</button>\n        <button onClick={() => this.visualizeDijkstra(grid)}>Dijkstra</button>\n        <button onClick={() => this.visualizeGreedy(grid)}>\n          Greedy-best-first\n        </button>\n        <button onClick={() => this.visualizeBFS(grid)}>BFS</button>\n        <button onClick={() => this.visualizeDFS(grid)}>DFS</button>\n        <div className=\"grid\">\n          {grid.map((row, rowId) => {\n            return (\n              <div key={rowId}>\n                {row.map((node, nodeId) => {\n                  const { row, col, isStartNode, isEndNode, isObstacle } = node;\n                  return (\n                    <Node\n                      key={nodeId}\n                      row={row}\n                      col={col}\n                      isStartNode={isStartNode}\n                      isEndNode={isEndNode}\n                      isObstacle={isObstacle}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst createGrid = () => {\n  // Create a new grid which holds nodes\n  const grid = [];\n  for (let row = 0; row < GRID_ROW_LENGTH; row++) {\n    const currentRow = [];\n    for (let col = 0; col < GRID_COL_LENGTH; col++) {\n      currentRow.push(createNewNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNewNode = (row, col) => {\n  // Create a new node\n  const newNode = {\n    row,\n    col,\n    g: Infinity,\n    h: Infinity,\n    isStartNode: row === START_NODE_ROW && col === START_NODE_COL,\n    isEndNode: row === END_NODE_ROW && col === END_NODE_COL,\n    isVisited: false,\n    isObstacle: false,\n    neighborNodes: [],\n    parentNode: null,\n  };\n\n  return newNode;\n};\n\nconst getNewGridWithToggledObstacle = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isObstacle: !node.isObstacle,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNewStart = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const startNode = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isStartNode: !isStartNode,\n  };\n  newGrid[row][col] = startNode;\n  return newGrid;\n};\n\nconst getResultPath = (endNode) => {\n  const shortestPathInOrder = [];\n  let scanningNode = endNode.parentNode;\n\n  while (scanningNode.parentNode) {\n    shortestPathInOrder.push(scanningNode);\n    scanningNode = scanningNode.parentNode;\n  }\n\n  return shortestPathInOrder;\n};\n"]},"metadata":{},"sourceType":"module"}